[
    {
        "key": "always_declare_return_types",
        "name": "Always declare return types",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   declare method return types.\n</P>\n<P>\n  When declaring a method or function \n  <EM>always</EM>\n   specify a return type. Declaring return types for functions helps improve your codebase by allowing the analyzer to more adequately check your code for errors that could occur during runtime.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">main</SPAN>\n    <SPAN style=\"color:#222222\">() { }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">_bar</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#0468D7\">_Foo</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> _Foo</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  _foo</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">42</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> main</SPAN>\n    <SPAN style=\"color:#222222\">() { }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">_Foo</SPAN>\n    <SPAN style=\"color:#6200EE\"> _bar</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#0468D7\">_Foo</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> _Foo</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#6200EE\"> _foo</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">42</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">typedef</SPAN>\n    <SPAN style=\"color:#222222\"> predicate = </SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#0468D7\"> Function</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#222222\"> o);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "always_put_control_body_on_new_line",
        "name": "Always put control body on new line",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From the \n  <A href=\"https://flutter.dev/style-guide/\">style guide for the flutter repo</A>\n  :\n</P>\n<P>\n  <STRONG>DO</STRONG>\n   separate the control structure expression from its statement.\n</P>\n<P>\n  Don't put the statement part of an \n  <CODE>if</CODE>\n  , \n  <CODE>for</CODE>\n  , \n  <CODE>while</CODE>\n  , \n  <CODE>do</CODE>\n   on the same line as the expression, even if it is short. Doing so makes it unclear that there is relevant code there. This is especially important for early returns.\n</P>\n<CODE>if</CODE>\n<CODE>for</CODE>\n<CODE>while</CODE>\n<CODE>do</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (notReady) </SPAN>\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (notReady)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">else</SPAN>\n    <SPAN style=\"color:#6200EE\"> print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'ok'</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">while</SPAN>\n    <SPAN style=\"color:#222222\"> (condition) i += </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (notReady)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (notReady)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">else</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'ok'</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">while</SPAN>\n    <SPAN style=\"color:#222222\"> (condition)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  i += </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  Note that this rule can conflict with the \n  <A href=\"https://dart.dev/tools/dart-format\">Dart formatter</A>\n  , and should not be enabled when the Dart formatter is used.\n</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "always_put_required_named_parameters_first",
        "name": "Always put required named parameters first",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   specify \n  <CODE>required</CODE>\n   on named parameter before other named parameters.\n</P>\n<CODE>required</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">({b, c, </SPAN>\n    <SPAN style=\"color:#D43324\">required</SPAN>\n    <SPAN style=\"color:#222222\"> a}) ;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#D43324\">required</SPAN>\n    <SPAN style=\"color:#222222\"> a, b, c}) ;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">({b, c, </SPAN>\n    <SPAN style=\"color:#D43324\">@required</SPAN>\n    <SPAN style=\"color:#222222\"> a}) ;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#D43324\">@required</SPAN>\n    <SPAN style=\"color:#222222\"> a, b, c}) ;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "always_require_non_null_named_parameters",
        "name": "Always require non null named parameters",
        "severity": "MINOR",
        "description": "<SECTION><P>NOTE: This rule is removed in Dart 3.3.0; it is no longer functional.</P>\n<P>\n  <STRONG>DO</STRONG>\n   specify \n  <CODE>@required</CODE>\n   on named parameters without a default value on which an \n  <CODE>assert(param != null)</CODE>\n   is done.\n</P>\n<CODE>@required</CODE>\n<CODE>assert(param != null)</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m1</SPAN>\n    <SPAN style=\"color:#222222\">({a}) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  assert</SPAN>\n    <SPAN style=\"color:#222222\">(a != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m1</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#D43324\">@required</SPAN>\n    <SPAN style=\"color:#222222\"> a}) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  assert</SPAN>\n    <SPAN style=\"color:#222222\">(a != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m2</SPAN>\n    <SPAN style=\"color:#222222\">({a: </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">}) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  assert</SPAN>\n    <SPAN style=\"color:#222222\">(a != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>NOTE: Only asserts at the start of the bodies will be taken into account.</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": false
    },
    {
        "key": "always_specify_types",
        "name": "Always specify types",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  From the \n  <A href=\"https://flutter.dev/style-guide/\">style guide for the flutter repo</A>\n  :\n</P>\n<P>\n  <STRONG>DO</STRONG>\n   specify type annotations.\n</P>\n<P>\n  Avoid \n  <CODE>var</CODE>\n   when specifying that a type is unknown and short-hands that elide type annotations. Use \n  <CODE>dynamic</CODE>\n   if you are being explicit that the type is unknown. Use \n  <CODE>Object</CODE>\n   if you are being explicit that you want an object that implements \n  <CODE>==</CODE>\n   and \n  <CODE>hashCode</CODE>\n  .\n</P>\n<CODE>var</CODE>\n<CODE>dynamic</CODE>\n<CODE>Object</CODE>\n<CODE>==</CODE>\n<CODE>hashCode</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> foo = </SPAN>\n    <SPAN style=\"color:#11796D\">10</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> bar = </SPAN>\n    <SPAN style=\"color:#0468D7\">Bar</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> quux = </SPAN>\n    <SPAN style=\"color:#11796D\">20</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> foo = </SPAN>\n    <SPAN style=\"color:#11796D\">10</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#0468D7\"> Bar</SPAN>\n    <SPAN style=\"color:#222222\"> bar = </SPAN>\n    <SPAN style=\"color:#0468D7\">Bar</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> baz = </SPAN>\n    <SPAN style=\"color:#11796D\">'hello'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> quux = </SPAN>\n    <SPAN style=\"color:#11796D\">20</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  NOTE: Using the the \n  <CODE>@optionalTypeArgs</CODE>\n   annotation in the \n  <CODE>meta</CODE>\n   package, API authors can special-case type variables whose type needs to be dynamic but whose declaration should be treated as optional. For example, suppose you have a \n  <CODE>Key</CODE>\n   object whose type parameter you'd like to treat as optional. Using the \n  <CODE>@optionalTypeArgs</CODE>\n   would look like this:\n</P>\n<CODE>@optionalTypeArgs</CODE>\n<CODE>meta</CODE>\n<CODE>Key</CODE>\n<CODE>@optionalTypeArgs</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:meta/meta.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@optionalTypeArgs</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Key</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt; {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\"> ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Key</SPAN>\n    <SPAN style=\"color:#222222\"> s = </SPAN>\n    <SPAN style=\"color:#0468D7\">Key</SPAN>\n    <SPAN style=\"color:#222222\">(); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK!</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "always_use_package_imports",
        "name": "Always use package imports",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   avoid relative imports for files in \n  <CODE>lib/</CODE>\n  .\n</P>\n<CODE>lib/</CODE>\n<P>\n  When mixing relative and absolute imports it's possible to create confusion where the same member gets imported in two different ways. One way to avoid that is to ensure you consistently use absolute imports for files within the \n  <CODE>lib/</CODE>\n   directory.\n</P>\n<CODE>lib/</CODE>\n<P>This is the opposite of 'prefer_relative_imports'.</P>\n<P>\n  You can also use 'avoid_relative_lib_imports' to disallow relative imports of files within \n  <CODE>lib/</CODE>\n   directory outside of it (for example \n  <CODE>test/</CODE>\n  ).\n</P>\n<CODE>lib/</CODE>\n<CODE>test/</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'baz.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'src/bag.dart'</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">import </SPAN>\n    <SPAN style=\"color:#11796D\">'../lib/baz.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">...</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:foo/bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:foo/baz.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:foo/src/baz.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">...</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "annotate_overrides",
        "name": "Annotate overrides",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   annotate overridden methods and fields.\n</P>\n<P>This practice improves code readability and helps protect against unintentionally overriding superclass members.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Cat</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> lives =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">9</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Lucky</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> Cat</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> lives = </SPAN>\n    <SPAN style=\"color:#11796D\">14</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Dog</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  String</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> breed;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> bark</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Husky</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> Dog</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> String</SPAN>\n    <SPAN style=\"color:#222222\"> breed = </SPAN>\n    <SPAN style=\"color:#11796D\">'Husky'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> bark</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "annotate_redeclares",
        "name": "Annotate redeclares",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   annotate redeclared members.\n</P>\n<P>This practice improves code readability and helps protect against unintentionally redeclaring members or being surprised when a member ceases to redeclare (due for example to a rename refactoring).</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">() { }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">extension type</SPAN>\n    <SPAN style=\"color:#0468D7\"> E</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">C</SPAN>\n    <SPAN style=\"color:#222222\"> c) </SPAN>\n    <SPAN style=\"color:#D43324\">implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:meta/meta.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">() { }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">extension type</SPAN>\n    <SPAN style=\"color:#0468D7\"> E</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">C</SPAN>\n    <SPAN style=\"color:#222222\"> c) </SPAN>\n    <SPAN style=\"color:#D43324\">implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @redeclare</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "avoid_annotating_with_dynamic",
        "name": "Avoid annotating with dynamic",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   annotating with \n  <CODE>dynamic</CODE>\n   when not required.\n</P>\n<CODE>dynamic</CODE>\n<P>\n  As \n  <CODE>dynamic</CODE>\n   is the assumed return value of a function or method, it is usually not necessary to annotate it.\n</P>\n<CODE>dynamic</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">dynamic</SPAN>\n    <SPAN style=\"color:#6200EE\"> lookUpOrDefault</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> name, </SPAN>\n    <SPAN style=\"color:#0468D7\">Map</SPAN>\n    <SPAN style=\"color:#222222\"> map, </SPAN>\n    <SPAN style=\"color:#0468D7\">dynamic</SPAN>\n    <SPAN style=\"color:#222222\"> defaultValue) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> value = map[name];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (value != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#222222\"> value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> defaultValue;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">lookUpOrDefault</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> name, </SPAN>\n    <SPAN style=\"color:#0468D7\">Map</SPAN>\n    <SPAN style=\"color:#222222\"> map, defaultValue) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> value = map[name];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (value != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#222222\"> value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> defaultValue;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_as",
        "name": "Avoid as",
        "severity": "MINOR",
        "description": "<SECTION><P>NOTE: This rule was removed from the SDK in Dart 3; it is no longer functional. Its advice is compiler-specific and mostly obsolete with null safety.</P>\n<P>\n  <STRONG>AVOID</STRONG>\n   using \n  <CODE>as</CODE>\n  .\n</P>\n<CODE>as</CODE>\n<P>\n  If you know the type is correct, use an assertion or assign to a more narrowly-typed variable (this avoids the type check in release mode; \n  <CODE>as</CODE>\n   is not compiled out in release mode). If you don't know whether the type is correct, check using \n  <CODE>is</CODE>\n   (this avoids the exception that \n  <CODE>as</CODE>\n   raises).\n</P>\n<CODE>as</CODE>\n<CODE>is</CODE>\n<CODE>as</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">(pm </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> Person</SPAN>\n    <SPAN style=\"color:#222222\">).firstName = </SPAN>\n    <SPAN style=\"color:#11796D\">'Seth'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (pm is </SPAN>\n    <SPAN style=\"color:#0468D7\">Person</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  pm.firstName = </SPAN>\n    <SPAN style=\"color:#11796D\">'Seth'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>but certainly not</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">   (pm </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> Person</SPAN>\n    <SPAN style=\"color:#222222\">).firstName = </SPAN>\n    <SPAN style=\"color:#11796D\">'Seth'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">on</SPAN>\n    <SPAN style=\"color:#0468D7\"> CastError</SPAN>\n    <SPAN style=\"color:#222222\"> { }</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  Note that an exception is made in the case of \n  <CODE>dynamic</CODE>\n   since the cast has no performance impact.\n</P>\n<CODE>dynamic</CODE>\n<P>\n  <STRONG>OK:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">HasScrollDirection</SPAN>\n    <SPAN style=\"color:#222222\"> scrollable = renderObject </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> dynamic</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": false
    },
    {
        "key": "avoid_bool_literals_in_conditional_expressions",
        "name": "Avoid bool literals in conditional expressions",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n  <CODE>bool</CODE>\n   literals in conditional expressions.\n</P>\n<CODE>bool</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">condition ? </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\"> : boolExpression</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">condition ? </SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n    <SPAN style=\"color:#222222\"> : boolExpression</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">condition ? boolExpression : </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">condition ? boolExpression : </SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">condition || boolExpression</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">!condition &amp;&amp; boolExpression</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">!condition || boolExpression</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">condition &amp;&amp; boolExpression</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_catches_without_on_clauses",
        "name": "Avoid catches without on clauses",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/usage#avoid-catches-without-on-clauses\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>AVOID</STRONG>\n   catches without on clauses.\n</P>\n<P>Using catch clauses without on clauses make your code prone to encountering unexpected errors that won't be thrown (and thus will go unnoticed).</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\"> somethingRisky</SPAN>\n    <SPAN style=\"color:#222222\">()</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">catch</SPAN>\n    <SPAN style=\"color:#222222\">(e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  doSomething</SPAN>\n    <SPAN style=\"color:#222222\">(e);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\"> somethingRisky</SPAN>\n    <SPAN style=\"color:#222222\">()</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">on</SPAN>\n    <SPAN style=\"color:#0468D7\"> Exception</SPAN>\n    <SPAN style=\"color:#D43324\"> catch</SPAN>\n    <SPAN style=\"color:#222222\">(e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  doSomething</SPAN>\n    <SPAN style=\"color:#222222\">(e);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>A few exceptional cases are allowed:</P>\n<CODE>Future.error</CODE>\n<CODE>Completer.completeError</CODE>\n<CODE>FlutterError.reportError</CODE>\n<CODE>Never</CODE>\n<P>\n  In these cases, \"directly used\" means that the exception is referenced within the relevant code (like within an argument). If the exception variable is referenced \n  <EM>before</EM>\n   the relevant code, for example to instantiate a wrapper exception, the variable is not \"directly used.\"\n</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_catching_errors",
        "name": "Avoid catching errors",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   explicitly catch \n  <CODE>Error</CODE>\n   or types that implement it.\n</P>\n<CODE>Error</CODE>\n<P>Errors differ from Exceptions in that Errors can be analyzed and prevented prior to runtime. It should almost never be necessary to catch an error at runtime.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  somethingRisky</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">on</SPAN>\n    <SPAN style=\"color:#0468D7\"> Error</SPAN>\n    <SPAN style=\"color:#D43324\"> catch</SPAN>\n    <SPAN style=\"color:#222222\">(e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  doSomething</SPAN>\n    <SPAN style=\"color:#222222\">(e);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  somethingRisky</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">on</SPAN>\n    <SPAN style=\"color:#0468D7\"> Exception</SPAN>\n    <SPAN style=\"color:#D43324\"> catch</SPAN>\n    <SPAN style=\"color:#222222\">(e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  doSomething</SPAN>\n    <SPAN style=\"color:#222222\">(e);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_classes_with_only_static_members",
        "name": "Avoid classes with only static members",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/design#avoid-defining-a-class-that-contains-only-static-members\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>AVOID</STRONG>\n   defining a class that contains only static members.\n</P>\n<P>Creating classes with the sole purpose of providing utility or otherwise static methods is discouraged. Dart allows functions to exist outside of classes for this very reason.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> DateUtils</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#0468D7\"> DateTime</SPAN>\n    <SPAN style=\"color:#6200EE\"> mostRecent</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">DateTime</SPAN>\n    <SPAN style=\"color:#222222\">&gt; dates) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#222222\"> dates.</SPAN>\n    <SPAN style=\"color:#6200EE\">reduce</SPAN>\n    <SPAN style=\"color:#222222\">((a, b) =&gt; a.</SPAN>\n    <SPAN style=\"color:#6200EE\">isAfter</SPAN>\n    <SPAN style=\"color:#222222\">(b) ? a : b);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> _Favorites</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> mammal = </SPAN>\n    <SPAN style=\"color:#11796D\">'weasel'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">DateTime</SPAN>\n    <SPAN style=\"color:#6200EE\"> mostRecent</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">DateTime</SPAN>\n    <SPAN style=\"color:#222222\">&gt; dates) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> dates.</SPAN>\n    <SPAN style=\"color:#6200EE\">reduce</SPAN>\n    <SPAN style=\"color:#222222\">((a, b) =&gt; a.</SPAN>\n    <SPAN style=\"color:#6200EE\">isAfter</SPAN>\n    <SPAN style=\"color:#222222\">(b) ? a : b);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> _favoriteMammal = </SPAN>\n    <SPAN style=\"color:#11796D\">'weasel'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "avoid_double_and_int_checks",
        "name": "Avoid double and int checks",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   to check if type is \n  <CODE>double</CODE>\n   or \n  <CODE>int</CODE>\n  .\n</P>\n<CODE>double</CODE>\n<CODE>int</CODE>\n<P>\n  When compiled to JS, integer values are represented as floats. That can lead to some unexpected behavior when using either \n  <CODE>is</CODE>\n   or \n  <CODE>is!</CODE>\n   where the type is either \n  <CODE>int</CODE>\n   or \n  <CODE>double</CODE>\n  .\n</P>\n<CODE>is</CODE>\n<CODE>is!</CODE>\n<CODE>int</CODE>\n<CODE>double</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#222222\"> x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (x is </SPAN>\n    <SPAN style=\"color:#0468D7\">double</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  } </SPAN>\n    <SPAN style=\"color:#D43324\">else</SPAN>\n    <SPAN style=\"color:#D43324\"> if</SPAN>\n    <SPAN style=\"color:#222222\"> (x is </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">dynamic</SPAN>\n    <SPAN style=\"color:#222222\"> x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (x is </SPAN>\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  } </SPAN>\n    <SPAN style=\"color:#D43324\">else</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "BUG",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_dynamic_calls",
        "name": "Avoid dynamic calls",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   avoid method calls or accessing properties on an object that is either explicitly or implicitly statically typed \n  <CODE>dynamic</CODE>\n  . Dynamic calls are treated slightly different in every runtime environment and compiler, but most production modes (and even some development modes) have both compile size and runtime performance penalties associated with dynamic calls.\n</P>\n<CODE>dynamic</CODE>\n<P>\n  Additionally, targets typed \n  <CODE>dynamic</CODE>\n   disables most static analysis, meaning it is easier to lead to a runtime \n  <CODE>NoSuchMethodError</CODE>\n   or \n  <CODE>TypeError</CODE>\n   than properly statically typed Dart code.\n</P>\n<CODE>dynamic</CODE>\n<CODE>NoSuchMethodError</CODE>\n<CODE>TypeError</CODE>\n<P>\n  There is an exception to methods and properties that exist on \n  <CODE>Object?</CODE>\n  :\n</P>\n<CODE>Object?</CODE>\n<CODE>a.hashCode</CODE>\n<CODE>a.runtimeType</CODE>\n<CODE>a.noSuchMethod(someInvocation)</CODE>\n<CODE>a.toString()</CODE>\n<P>\n  ... these members are dynamically dispatched in the web-based runtimes, but not in the VM-based ones. Additionally, they are so common that it would be very punishing to disallow \n  <CODE>any.toString()</CODE>\n   or \n  <CODE>any == true</CODE>\n  , for example.\n</P>\n<CODE>any.toString()</CODE>\n<CODE>any == true</CODE>\n<P>\n  Note that despite \n  <CODE>Function</CODE>\n   being a type, the semantics are close to identical to \n  <CODE>dynamic</CODE>\n  , and calls to an object that is typed \n  <CODE>Function</CODE>\n   will also trigger this lint.\n</P>\n<CODE>Function</CODE>\n<CODE>dynamic</CODE>\n<CODE>Function</CODE>\n<P>\n  Dynamic calls are allowed on cast expressions (\n  <CODE>as dynamic</CODE>\n   or \n  <CODE>as Function</CODE>\n  ).\n</P>\n<CODE>as dynamic</CODE>\n<CODE>as Function</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> explicitDynamicType</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">dynamic</SPAN>\n    <SPAN style=\"color:#222222\"> object) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(object.</SPAN>\n    <SPAN style=\"color:#6200EE\">foo</SPAN>\n    <SPAN style=\"color:#222222\">());</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> implicitDynamicType</SPAN>\n    <SPAN style=\"color:#222222\">(object) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(object.</SPAN>\n    <SPAN style=\"color:#6200EE\">foo</SPAN>\n    <SPAN style=\"color:#222222\">());</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> SomeWrapper</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  T</SPAN>\n    <SPAN style=\"color:#6200EE\"> doSomething</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt;();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> inferredDynamicType</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">SomeWrapper</SPAN>\n    <SPAN style=\"color:#222222\"> wrapper) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> object = wrapper.</SPAN>\n    <SPAN style=\"color:#6200EE\">doSomething</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(object.</SPAN>\n    <SPAN style=\"color:#6200EE\">foo</SPAN>\n    <SPAN style=\"color:#222222\">());</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> callDynamic</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">dynamic</SPAN>\n    <SPAN style=\"color:#222222\"> function) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  function</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> functionType</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Function</SPAN>\n    <SPAN style=\"color:#222222\"> function) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  function</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> explicitType</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Fooable</SPAN>\n    <SPAN style=\"color:#222222\"> object) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  object.</SPAN>\n    <SPAN style=\"color:#6200EE\">foo</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> castedType</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">dynamic</SPAN>\n    <SPAN style=\"color:#222222\"> object) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  (object </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> Fooable</SPAN>\n    <SPAN style=\"color:#222222\">).</SPAN>\n    <SPAN style=\"color:#6200EE\">foo</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> SomeWrapper</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  T</SPAN>\n    <SPAN style=\"color:#6200EE\"> doSomething</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt;();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> inferredType</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">SomeWrapper</SPAN>\n    <SPAN style=\"color:#222222\"> wrapper) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> object = wrapper.</SPAN>\n    <SPAN style=\"color:#6200EE\">doSomething</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Fooable</SPAN>\n    <SPAN style=\"color:#222222\">&gt;();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  object.</SPAN>\n    <SPAN style=\"color:#6200EE\">foo</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> functionTypeWithParameters</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Function</SPAN>\n    <SPAN style=\"color:#222222\">() function) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  function</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "avoid_empty_else",
        "name": "Avoid empty else",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   empty statements in the \n  <CODE>else</CODE>\n   clause of \n  <CODE>if</CODE>\n   statements.\n</P>\n<CODE>else</CODE>\n<CODE>if</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (x &gt; y)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'1'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">else</SPAN>\n    <SPAN style=\"color:#222222\"> ;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'2'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  If you want a statement that follows the empty clause to \n  <EM>conditionally</EM>\n   run, remove the dangling semicolon to include it in the \n  <CODE>else</CODE>\n   clause. Optionally, also enclose the else's statement in a block.\n</P>\n<CODE>else</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (x &gt; y)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'1'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">else</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'2'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (x &gt; y) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'1'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">else</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'2'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  If you want a statement that follows the empty clause to \n  <EM>unconditionally</EM>\n   run, remove the \n  <CODE>else</CODE>\n   clause.\n</P>\n<CODE>else</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (x &gt; y) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'1'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'2'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_equals_and_hash_code_on_mutable_classes",
        "name": "Avoid equals and hash code on mutable classes",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/design#avoid-defining-custom-equality-for-mutable-classes\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>AVOID</STRONG>\n   overloading operator == and hashCode on classes not marked \n  <CODE>@immutable</CODE>\n  .\n</P>\n<CODE>@immutable</CODE>\n<P>\n  If a class is not immutable, overloading \n  <CODE>operator ==</CODE>\n   and \n  <CODE>hashCode</CODE>\n   can lead to unpredictable and undesirable behavior when used in collections.\n</P>\n<CODE>operator ==</CODE>\n<CODE>hashCode</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  String</SPAN>\n    <SPAN style=\"color:#222222\"> key;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.key);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  operator</SPAN>\n    <SPAN style=\"color:#222222\"> ==(other) =&gt; other is </SPAN>\n    <SPAN style=\"color:#0468D7\">B</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; other.key == key;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> hashCode =&gt; key.hashCode;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@immutable</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> String</SPAN>\n    <SPAN style=\"color:#222222\"> key;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.key);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  operator</SPAN>\n    <SPAN style=\"color:#222222\"> ==(other) =&gt; other is </SPAN>\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; other.key == key;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> hashCode =&gt; key.hashCode;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  NOTE: The lint checks the use of the \n  <CODE>@immutable</CODE>\n   annotation, and will trigger even if the class is otherwise not mutable. Thus:\n</P>\n<CODE>@immutable</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> String</SPAN>\n    <SPAN style=\"color:#222222\"> key;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.key);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  operator</SPAN>\n    <SPAN style=\"color:#222222\"> ==(other) =&gt; other is </SPAN>\n    <SPAN style=\"color:#0468D7\">C</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; other.key == key;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> hashCode =&gt; key.hashCode;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "avoid_escaping_inner_quotes",
        "name": "Avoid escaping inner quotes",
        "severity": "MINOR",
        "description": "<SECTION><P>Avoid escaping inner quotes by converting surrounding quotes.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> s = </SPAN>\n    <SPAN style=\"color:#11796D\">'It</SPAN>\n    <SPAN style=\"color:#222222\">\\'</SPAN>\n    <SPAN style=\"color:#11796D\">s not fun'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> s = </SPAN>\n    <SPAN style=\"color:#11796D\">\"It's not fun\"</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_field_initializers_in_const_classes",
        "name": "Avoid field initializers in const classes",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   field initializers in const classes.\n</P>\n<P>\n  Instead of \n  <CODE>final x = const expr;</CODE>\n  , you should write \n  <CODE>get x =&gt; const expr;</CODE>\n   and not allocate a useless field. As of April 2018 this is true for the VM, but not for code that will be compiled to JS.\n</P>\n<CODE>final x = const expr;</CODE>\n<CODE>get x =&gt; const expr;</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> a = </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> [];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  get</SPAN>\n    <SPAN style=\"color:#222222\"> a =&gt; </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> [];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_final_parameters",
        "name": "Avoid final parameters",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   declaring parameters as \n  <CODE>final</CODE>\n  .\n</P>\n<CODE>final</CODE>\n<P>\n  Declaring parameters as \n  <CODE>final</CODE>\n   can lead to unnecessarily verbose code, especially when using the \"parameter_assignments\" rule.\n</P>\n<CODE>final</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> goodParameter</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#0468D7\"> String</SPAN>\n    <SPAN style=\"color:#222222\"> label) { </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(label);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> badParameter</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> label) { </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(label);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> goodExpression</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> value) =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(value); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> badExpression</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> value) =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(value); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">[</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">4</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">6</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">8</SPAN>\n    <SPAN style=\"color:#222222\">].</SPAN>\n    <SPAN style=\"color:#6200EE\">forEach</SPAN>\n    <SPAN style=\"color:#222222\">((</SPAN>\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> value) =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(value + </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">)); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">[</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">4</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">6</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">8</SPAN>\n    <SPAN style=\"color:#222222\">].</SPAN>\n    <SPAN style=\"color:#6200EE\">forEach</SPAN>\n    <SPAN style=\"color:#222222\">((value) =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(value + </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">)); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_function_literals_in_foreach_calls",
        "name": "Avoid function literals in foreach calls",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   using \n  <CODE>forEach</CODE>\n   with a function literal.\n</P>\n<CODE>forEach</CODE>\n<P>\n  The \n  <CODE>for</CODE>\n   loop enables a developer to be clear and explicit as to their intent. A return in the body of the \n  <CODE>for</CODE>\n   loop returns from the body of the function, where as a return in the body of the \n  <CODE>forEach</CODE>\n   closure only returns a value for that iteration of the \n  <CODE>forEach</CODE>\n  . The body of a \n  <CODE>for</CODE>\n   loop can contain \n  <CODE>await</CODE>\n  s, while the closure body of a \n  <CODE>forEach</CODE>\n   cannot.\n</P>\n<CODE>for</CODE>\n<CODE>for</CODE>\n<CODE>forEach</CODE>\n<CODE>forEach</CODE>\n<CODE>for</CODE>\n<CODE>await</CODE>\n<CODE>forEach</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">people.</SPAN>\n    <SPAN style=\"color:#6200EE\">forEach</SPAN>\n    <SPAN style=\"color:#222222\">((person) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">});</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> person </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> people) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_implementing_value_types",
        "name": "Avoid implementing value types",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   implement classes that override \n  <CODE>==</CODE>\n  .\n</P>\n<CODE>==</CODE>\n<P>\n  The \n  <CODE>==</CODE>\n   operator is contractually required to be an equivalence relation; that is, symmetrically for all objects \n  <CODE>o1</CODE>\n   and \n  <CODE>o2</CODE>\n  , \n  <CODE>o1 == o2</CODE>\n   and \n  <CODE>o2 == o1</CODE>\n   must either both be true, or both be false.\n</P>\n<CODE>==</CODE>\n<CODE>o1</CODE>\n<CODE>o2</CODE>\n<CODE>o1 == o2</CODE>\n<CODE>o2 == o1</CODE>\n<P>\n  <EM>NOTE</EM>\n  : Dart does not have true \n  <EM>value types</EM>\n  , so instead we consider a class that implements \n  <CODE>==</CODE>\n   as a \n  <EM>proxy</EM>\n   for identifying value types.\n</P>\n<CODE>==</CODE>\n<P>\n  When using \n  <CODE>implements</CODE>\n  , you do not inherit the method body of \n  <CODE>==</CODE>\n  , making it nearly impossible to follow the contract of \n  <CODE>==</CODE>\n  . Classes that override \n  <CODE>==</CODE>\n   typically are usable directly in tests \n  <EM>without</EM>\n   creating mocks or fakes as well. For example, for a given class \n  <CODE>Size</CODE>\n  :\n</P>\n<CODE>implements</CODE>\n<CODE>==</CODE>\n<CODE>==</CODE>\n<CODE>==</CODE>\n<CODE>Size</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Size</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> inBytes;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Size</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.inBytes);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#D43324\"> operator</SPAN>\n    <SPAN style=\"color:#222222\"> ==(</SPAN>\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#222222\"> other) =&gt; other is </SPAN>\n    <SPAN style=\"color:#0468D7\">Size</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; other.inBytes == inBytes;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> hashCode =&gt; inBytes.hashCode;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> CustomSize</SPAN>\n    <SPAN style=\"color:#D43324\"> implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> Size</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> inBytes;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> CustomSize</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.inBytes);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> inKilobytes =&gt; inBytes ~/ </SPAN>\n    <SPAN style=\"color:#11796D\">1000</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:test/test.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'size.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> FakeSize</SPAN>\n    <SPAN style=\"color:#D43324\"> implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> Size</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> inBytes = </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'should not throw on a size &gt;1Kb'</SPAN>\n    <SPAN style=\"color:#222222\">, () {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    expect</SPAN>\n    <SPAN style=\"color:#222222\">(() =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">someFunction</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">FakeSize</SPAN>\n    <SPAN style=\"color:#222222\">()..inBytes = </SPAN>\n    <SPAN style=\"color:#11796D\">1001</SPAN>\n    <SPAN style=\"color:#222222\">), returnsNormally);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  });</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> ExtendedSize</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> Size</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  ExtendedSize</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> inBytes) : </SPAN>\n    <SPAN style=\"color:#D43324\">super</SPAN>\n    <SPAN style=\"color:#222222\">(inBytes);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> inKilobytes =&gt; inBytes ~/ </SPAN>\n    <SPAN style=\"color:#11796D\">1000</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n  :\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:test/test.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'size.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'should not throw on a size &gt;1Kb'</SPAN>\n    <SPAN style=\"color:#222222\">, () {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    expect</SPAN>\n    <SPAN style=\"color:#222222\">(() =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">someFunction</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Size</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1001</SPAN>\n    <SPAN style=\"color:#222222\">)), returnsNormally);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  });</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "avoid_init_to_null",
        "name": "Avoid init to null",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/usage#dont-explicitly-initialize-variables-to-null\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>DON'T</STRONG>\n   explicitly initialize variables to \n  <CODE>null</CODE>\n  .\n</P>\n<CODE>null</CODE>\n<P>\n  If a variable has a non-nullable type or is \n  <CODE>final</CODE>\n  , Dart reports a compile error if you try to use it before it has been definitely initialized. If the variable is nullable and not \n  <CODE>const</CODE>\n   or \n  <CODE>final</CODE>\n  , then it is implicitly initialized to \n  <CODE>null</CODE>\n   for you. There's no concept of \"uninitialized memory\" in Dart and no need to explicitly initialize a variable to \n  <CODE>null</CODE>\n   to be \"safe\". Adding \n  <CODE>= null</CODE>\n   is redundant and unneeded.\n</P>\n<CODE>final</CODE>\n<CODE>const</CODE>\n<CODE>final</CODE>\n<CODE>null</CODE>\n<CODE>null</CODE>\n<CODE>= null</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Item</SPAN>\n    <SPAN style=\"color:#222222\">? </SPAN>\n    <SPAN style=\"color:#6200EE\">bestDeal</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Item</SPAN>\n    <SPAN style=\"color:#222222\">&gt; cart) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Item</SPAN>\n    <SPAN style=\"color:#222222\">? bestItem = </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> item </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> cart) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    if</SPAN>\n    <SPAN style=\"color:#222222\"> (bestItem == </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\"> || item.price &lt; bestItem.price) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      bestItem = item;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> bestItem;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Item</SPAN>\n    <SPAN style=\"color:#222222\">? </SPAN>\n    <SPAN style=\"color:#6200EE\">bestDeal</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Item</SPAN>\n    <SPAN style=\"color:#222222\">&gt; cart) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Item</SPAN>\n    <SPAN style=\"color:#222222\">? bestItem;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> item </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> cart) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    if</SPAN>\n    <SPAN style=\"color:#222222\"> (bestItem == </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\"> || item.price &lt; bestItem.price) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      bestItem = item;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> bestItem;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_js_rounded_ints",
        "name": "Avoid js rounded ints",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   integer literals that cannot be represented exactly when compiled to JavaScript.\n</P>\n<P>\n  When a program is compiled to JavaScript \n  <CODE>int</CODE>\n   and \n  <CODE>double</CODE>\n   become JavaScript Numbers. Too large integers (\n  <CODE>value &lt; Number.MIN_SAFE_INTEGER</CODE>\n   or \n  <CODE>value &gt; Number.MAX_SAFE_INTEGER</CODE>\n  ) may be rounded to the closest Number value.\n</P>\n<CODE>int</CODE>\n<CODE>double</CODE>\n<CODE>value &lt; Number.MIN_SAFE_INTEGER</CODE>\n<CODE>value &gt; Number.MAX_SAFE_INTEGER</CODE>\n<P>\n  For instance \n  <CODE>1000000000000000001</CODE>\n   cannot be represented exactly as a JavaScript Number, so \n  <CODE>1000000000000000000</CODE>\n   will be used instead.\n</P>\n<CODE>1000000000000000001</CODE>\n<CODE>1000000000000000000</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> value = </SPAN>\n    <SPAN style=\"color:#11796D\">9007199254740995</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">BigInt</SPAN>\n    <SPAN style=\"color:#222222\"> value = </SPAN>\n    <SPAN style=\"color:#0468D7\">BigInt</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">parse</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'9007199254740995'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "avoid_multiple_declarations_per_line",
        "name": "Avoid multiple declarations per line",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   declare multiple variables on a single line.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">? foo, bar, baz;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">? foo;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">? bar;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">? baz;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_null_checks_in_equality_operators",
        "name": "Avoid null checks in equality operators",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   check for \n  <CODE>null</CODE>\n   in custom \n  <CODE>==</CODE>\n   operators.\n</P>\n<CODE>null</CODE>\n<CODE>==</CODE>\n<P>\n  As \n  <CODE>null</CODE>\n   is a special value, no instance of any class (other than \n  <CODE>Null</CODE>\n  ) can be equivalent to it. Thus, it is redundant to check whether the other instance is \n  <CODE>null</CODE>\n  .\n</P>\n<CODE>null</CODE>\n<CODE>Null</CODE>\n<CODE>null</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Person</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> String</SPAN>\n    <SPAN style=\"color:#222222\">? name;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  operator</SPAN>\n    <SPAN style=\"color:#222222\"> ==(</SPAN>\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#222222\">? other) =&gt;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      other != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; other is </SPAN>\n    <SPAN style=\"color:#0468D7\">Person</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; name == other.name;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Person</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> String</SPAN>\n    <SPAN style=\"color:#222222\">? name;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  operator</SPAN>\n    <SPAN style=\"color:#222222\"> ==(</SPAN>\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#222222\">? other) =&gt; other is </SPAN>\n    <SPAN style=\"color:#0468D7\">Person</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; name == other.name;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_positional_boolean_parameters",
        "name": "Avoid positional boolean parameters",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/design#avoid-positional-boolean-parameters\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>AVOID</STRONG>\n   positional boolean parameters.\n</P>\n<P>Positional boolean parameters are a bad practice because they are very ambiguous. Using named boolean parameters is much more readable because it inherently describes what the boolean value represents.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Task</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Task</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">ListBox</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Button</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Task</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">oneShot</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Task</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">repeating</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">ListBox</SPAN>\n    <SPAN style=\"color:#222222\">(scroll: </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">, showScrollbars: </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Button</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">ButtonState</SPAN>\n    <SPAN style=\"color:#222222\">.enabled);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "avoid_print",
        "name": "Avoid print",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   avoid \n  <CODE>print</CODE>\n   calls in production code.\n</P>\n<CODE>print</CODE>\n<P>\n  For production code, consider using a logging framework. If you are using Flutter, you can use \n  <CODE>debugPrint</CODE>\n   or surround \n  <CODE>print</CODE>\n   calls with a check for \n  <CODE>kDebugMode</CODE>\n</P>\n<CODE>debugPrint</CODE>\n<CODE>print</CODE>\n<CODE>kDebugMode</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'debug: </SPAN>\n    <SPAN style=\"color:#11796D\">$</SPAN>\n    <SPAN style=\"color:#222222\">x</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  debugPrint</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'debug: </SPAN>\n    <SPAN style=\"color:#11796D\">$</SPAN>\n    <SPAN style=\"color:#222222\">x</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  log</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'log: </SPAN>\n    <SPAN style=\"color:#11796D\">$</SPAN>\n    <SPAN style=\"color:#222222\">x</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (kDebugMode) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">      print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'debug: </SPAN>\n    <SPAN style=\"color:#11796D\">$</SPAN>\n    <SPAN style=\"color:#222222\">x</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_private_typedef_functions",
        "name": "Avoid private typedef functions",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   private typedef functions used only once. Prefer inline function syntax.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">typedef</SPAN>\n    <SPAN style=\"color:#D43324\"> void</SPAN>\n    <SPAN style=\"color:#0468D7\"> _F</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">_F</SPAN>\n    <SPAN style=\"color:#222222\"> f);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#0468D7\"> Function</SPAN>\n    <SPAN style=\"color:#222222\">() f);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "10min",
        "active": true
    },
    {
        "key": "avoid_redundant_argument_values",
        "name": "Avoid redundant argument values",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   pass an argument that matches the corresponding parameter's default value.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\"> valWithDefault = </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\">? val}) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  f</SPAN>\n    <SPAN style=\"color:#222222\">(valWithDefault: </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\"> valWithDefault = </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\">? val}) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  f</SPAN>\n    <SPAN style=\"color:#222222\">(valWithDefault: </SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  f</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_relative_lib_imports",
        "name": "Avoid relative lib imports",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   avoid relative imports for files in \n  <CODE>lib/</CODE>\n  .\n</P>\n<CODE>lib/</CODE>\n<P>\n  When mixing relative and absolute imports it's possible to create confusion where the same member gets imported in two different ways. An easy way to avoid that is to ensure you have no relative imports that include \n  <CODE>lib/</CODE>\n   in their paths.\n</P>\n<CODE>lib/</CODE>\n<P>\n  You can also use 'always_use_package_imports' to disallow relative imports between files within \n  <CODE>lib/</CODE>\n  .\n</P>\n<CODE>lib/</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:foo/bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> '../lib/baz.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">...</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:foo/bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'baz.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">...</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "avoid_renaming_method_parameters",
        "name": "Avoid renaming method parameters",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   rename parameters of overridden methods.\n</P>\n<P>\n  Methods that override another method, but do not have their own documentation comment, will inherit the overridden method's comment when \n  <CODE>dart doc</CODE>\n   produces documentation. If the inherited method contains the name of the parameter (in square brackets), then \n  <CODE>dart doc</CODE>\n   cannot link it correctly.\n</P>\n<CODE>dart doc</CODE>\n<CODE>dart doc</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  m</SPAN>\n    <SPAN style=\"color:#222222\">(a);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  m</SPAN>\n    <SPAN style=\"color:#222222\">(b);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  m</SPAN>\n    <SPAN style=\"color:#222222\">(a);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  m</SPAN>\n    <SPAN style=\"color:#222222\">(a);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_return_types_on_setters",
        "name": "Avoid return types on setters",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   return types on setters.\n</P>\n<P>As setters do not return a value, declaring the return type of one is redundant.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#D43324\"> set</SPAN>\n    <SPAN style=\"color:#6200EE\"> speed</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> ms);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">set</SPAN>\n    <SPAN style=\"color:#6200EE\"> speed</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> ms);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_returning_null",
        "name": "Avoid returning null",
        "severity": "MINOR",
        "description": "<SECTION><P>NOTE: This rule is removed in Dart 3.3.0; it is no longer functional.</P>\n<P>\n  <STRONG>AVOID</STRONG>\n   returning null from members whose return type is bool, double, int, or num.\n</P>\n<P>Functions that return primitive types such as bool, double, int, and num are generally expected to return non-nullable values. Thus, returning null where a primitive type was expected can lead to runtime exceptions.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#6200EE\"> getBool</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#6200EE\"> getNum</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#6200EE\"> getInt</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">double</SPAN>\n    <SPAN style=\"color:#6200EE\"> getDouble</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#6200EE\"> getBool</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#6200EE\"> getNum</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; -</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#6200EE\"> getInt</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; -</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">double</SPAN>\n    <SPAN style=\"color:#6200EE\"> getDouble</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; -</SPAN>\n    <SPAN style=\"color:#11796D\">1.0</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": false
    },
    {
        "key": "avoid_returning_null_for_future",
        "name": "Avoid returning null for future",
        "severity": "MINOR",
        "description": "<SECTION><P>NOTE: This rule is removed in Dart 3.3.0; it is no longer functional.</P>\n<P>\n  <STRONG>AVOID</STRONG>\n   returning null for Future.\n</P>\n<P>\n  It is almost always wrong to return \n  <CODE>null</CODE>\n   for a \n  <CODE>Future</CODE>\n  . Most of the time the developer simply forgot to put an \n  <CODE>async</CODE>\n   keyword on the function.\n</P>\n<CODE>null</CODE>\n<CODE>Future</CODE>\n<CODE>async</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": false
    },
    {
        "key": "avoid_returning_null_for_void",
        "name": "Avoid returning null for void",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   returning \n  <CODE>null</CODE>\n   for \n  <CODE>void</CODE>\n  .\n</P>\n<CODE>null</CODE>\n<CODE>void</CODE>\n<P>\n  In a large variety of languages \n  <CODE>void</CODE>\n   as return type is used to indicate that a function doesn't return anything. Dart allows returning \n  <CODE>null</CODE>\n   in functions with \n  <CODE>void</CODE>\n   return type but it also allow using \n  <CODE>return;</CODE>\n   without specifying any value. To have a consistent way you should not return \n  <CODE>null</CODE>\n   and only use an empty return.\n</P>\n<CODE>void</CODE>\n<CODE>null</CODE>\n<CODE>void</CODE>\n<CODE>return;</CODE>\n<CODE>null</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f1</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#11796D\"> null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">f2</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#11796D\"> null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f1</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">f2</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_returning_this",
        "name": "Avoid returning this",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/design#avoid-returning-this-from-methods-just-to-enable-a-fluent-interface\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>AVOID</STRONG>\n   returning this from methods just to enable a fluent interface.\n</P>\n<P>\n  Returning \n  <CODE>this</CODE>\n   from a method is redundant; Dart has a cascade operator which allows method chaining universally.\n</P>\n<CODE>this</CODE>\n<P>\n  Returning \n  <CODE>this</CODE>\n   is allowed for:\n</P>\n<CODE>this</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> buffer = </SPAN>\n    <SPAN style=\"color:#0468D7\">StringBuffer</SPAN>\n    <SPAN style=\"color:#222222\">()</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  .</SPAN>\n    <SPAN style=\"color:#6200EE\">write</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'one'</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  .</SPAN>\n    <SPAN style=\"color:#6200EE\">write</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'two'</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  .</SPAN>\n    <SPAN style=\"color:#6200EE\">write</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'three'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> buffer = </SPAN>\n    <SPAN style=\"color:#0468D7\">StringBuffer</SPAN>\n    <SPAN style=\"color:#222222\">()</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ..</SPAN>\n    <SPAN style=\"color:#6200EE\">write</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'one'</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ..</SPAN>\n    <SPAN style=\"color:#6200EE\">write</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'two'</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ..</SPAN>\n    <SPAN style=\"color:#6200EE\">write</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'three'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "avoid_setters_without_getters",
        "name": "Avoid setters without getters",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   define a setter without a corresponding getter.\n</P>\n<P>Defining a setter without defining a corresponding getter can lead to logical inconsistencies. Doing this could allow you to set a property to some value, but then upon observing the property's value, it could easily be different.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Bad</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> l, r;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  set</SPAN>\n    <SPAN style=\"color:#6200EE\"> length</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> newLength) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    r = l + newLength;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Good</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> l, r;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> length =&gt; r - l;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  set</SPAN>\n    <SPAN style=\"color:#6200EE\"> length</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> newLength) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    r = l + newLength;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_shadowing_type_parameters",
        "name": "Avoid shadowing type parameters",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   shadowing type parameters.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt; {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> fn</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt;() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt; {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> fn</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">U</SPAN>\n    <SPAN style=\"color:#222222\">&gt;() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_single_cascade_in_expression_statements",
        "name": "Avoid single cascade in expression statements",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   single cascade in expression statements.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">o..</SPAN>\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">o.</SPAN>\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_slow_async_io",
        "name": "Avoid slow async io",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   using the following asynchronous file I/O methods because they are much slower than their synchronous counterparts.\n</P>\n<CODE>Directory.exists</CODE>\n<CODE>Directory.stat</CODE>\n<CODE>File.lastModified</CODE>\n<CODE>File.exists</CODE>\n<CODE>File.stat</CODE>\n<CODE>FileSystemEntity.isDirectory</CODE>\n<CODE>FileSystemEntity.isFile</CODE>\n<CODE>FileSystemEntity.isLink</CODE>\n<CODE>FileSystemEntity.type</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'dart:io'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Null</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">someFunction</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> file = </SPAN>\n    <SPAN style=\"color:#0468D7\">File</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'/path/to/my/file'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> now = </SPAN>\n    <SPAN style=\"color:#0468D7\">DateTime</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">now</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> ((</SPAN>\n    <SPAN style=\"color:#D43324\">await</SPAN>\n    <SPAN style=\"color:#222222\"> file.</SPAN>\n    <SPAN style=\"color:#6200EE\">lastModified</SPAN>\n    <SPAN style=\"color:#222222\">()).</SPAN>\n    <SPAN style=\"color:#6200EE\">isBefore</SPAN>\n    <SPAN style=\"color:#222222\">(now)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'before'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'dart:io'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Null</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">someFunction</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> file = </SPAN>\n    <SPAN style=\"color:#0468D7\">File</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'/path/to/my/file'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> now = </SPAN>\n    <SPAN style=\"color:#0468D7\">DateTime</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">now</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (file.</SPAN>\n    <SPAN style=\"color:#6200EE\">lastModifiedSync</SPAN>\n    <SPAN style=\"color:#222222\">().</SPAN>\n    <SPAN style=\"color:#6200EE\">isBefore</SPAN>\n    <SPAN style=\"color:#222222\">(now)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'before'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "avoid_type_to_string",
        "name": "Avoid type to string",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   avoid calls to\n  <TYPE>.toString() in production code, since it does not contractually return the user-defined name of the Type (or underlying class). Development-mode compilers where code size is not a concern use the full name, but release-mode compilers often choose to minify these symbols.</TYPE>\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> bar</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#222222\"> other) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (other.runtimeType.</SPAN>\n    <SPAN style=\"color:#6200EE\">toString</SPAN>\n    <SPAN style=\"color:#222222\">() == </SPAN>\n    <SPAN style=\"color:#11796D\">'Bar'</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    doThing</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#6200EE\"> baz</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Thing</SPAN>\n    <SPAN style=\"color:#222222\"> myThing) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#6200EE\"> getThingFromDatabase</SPAN>\n    <SPAN style=\"color:#222222\">(key: myThing.runtimeType.</SPAN>\n    <SPAN style=\"color:#6200EE\">toString</SPAN>\n    <SPAN style=\"color:#222222\">());</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> bar</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#222222\"> other) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (other is </SPAN>\n    <SPAN style=\"color:#0468D7\">Bar</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    doThing</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Thing</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  String</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> thingTypeKey =&gt; ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#6200EE\"> baz</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Thing</SPAN>\n    <SPAN style=\"color:#222222\"> myThing) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#6200EE\"> getThingFromDatabase</SPAN>\n    <SPAN style=\"color:#222222\">(key: myThing.thingTypeKey);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_types_as_parameter_names",
        "name": "Avoid types as parameter names",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   using a parameter name that is the same as an existing type.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">));</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> v));</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_types_on_closure_parameters",
        "name": "Avoid types on closure parameters",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   annotating types for function expression parameters.\n</P>\n<P>Annotating types for function expression parameters is usually unnecessary because the parameter types can almost always be inferred from the context, thus making the practice redundant.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> names = people.</SPAN>\n    <SPAN style=\"color:#6200EE\">map</SPAN>\n    <SPAN style=\"color:#222222\">((</SPAN>\n    <SPAN style=\"color:#0468D7\">Person</SPAN>\n    <SPAN style=\"color:#222222\"> person) =&gt; person.name);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> names = people.</SPAN>\n    <SPAN style=\"color:#6200EE\">map</SPAN>\n    <SPAN style=\"color:#222222\">((person) =&gt; person.name);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_unnecessary_containers",
        "name": "Avoid unnecessary containers",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   wrapping widgets in unnecessary containers.\n</P>\n<P>\n  Wrapping a widget in \n  <CODE>Container</CODE>\n   with no other parameters set has no effect and makes code needlessly more complex.\n</P>\n<CODE>Container</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> buildRow</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#0468D7\"> Container</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      child: </SPAN>\n    <SPAN style=\"color:#0468D7\">Row</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">        children: &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">          const</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyLogo</SPAN>\n    <SPAN style=\"color:#222222\">(),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">          const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Expanded</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">            child: </SPAN>\n    <SPAN style=\"color:#0468D7\">Text</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'...'</SPAN>\n    <SPAN style=\"color:#222222\">),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">          ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">        ],</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      )</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> buildRow</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#0468D7\"> Row</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    children: &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      const</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyLogo</SPAN>\n    <SPAN style=\"color:#222222\">(),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Expanded</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">        child: </SPAN>\n    <SPAN style=\"color:#0468D7\">Text</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'...'</SPAN>\n    <SPAN style=\"color:#222222\">),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ],</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "avoid_unstable_final_fields",
        "name": "Avoid unstable final fields",
        "severity": "MINOR",
        "description": "<SECTION><P>This rule has been removed.</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": false
    },
    {
        "key": "avoid_unused_constructor_parameters",
        "name": "Avoid unused constructor parameters",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   defining unused parameters in constructors.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> BadOne</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  BadOne</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> unusedParameter, [</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> unusedPositional]);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> BadTwo</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> c;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  BadTwo</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> a, </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> b, </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    c = a + b;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_void_async",
        "name": "Avoid void async",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   mark \n  <CODE>async</CODE>\n   functions as returning \n  <CODE>Future&lt;void&gt;</CODE>\n  .\n</P>\n<CODE>async</CODE>\n<CODE>Future&lt;void&gt;</CODE>\n<P>\n  When declaring an \n  <CODE>async</CODE>\n   method or function which does not return a value, declare that it returns \n  <CODE>Future&lt;void&gt;</CODE>\n   and not just \n  <CODE>void</CODE>\n  .\n</P>\n<CODE>async</CODE>\n<CODE>Future&lt;void&gt;</CODE>\n<CODE>void</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f2</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">f2</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>EXCEPTION:</STRONG>\n</P>\n<P>\n  An exception is made for top-level \n  <CODE>main</CODE>\n   functions, where the \n  <CODE>Future</CODE>\n   annotation \n  <EM>can</EM>\n   (and generally should) be dropped in favor of \n  <CODE>void</CODE>\n  .\n</P>\n<CODE>main</CODE>\n<CODE>Future</CODE>\n<CODE>void</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> main</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  await</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "avoid_web_libraries_in_flutter",
        "name": "Avoid web libraries in flutter",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   using web libraries, \n  <CODE>dart:html</CODE>\n  , \n  <CODE>dart:js</CODE>\n   and \n  <CODE>dart:js_util</CODE>\n   in Flutter packages that are not web plugins. These libraries are not supported outside of a web context; functionality that depends on them will fail at runtime in Flutter mobile, and their use is generally discouraged in Flutter web.\n</P>\n<CODE>dart:html</CODE>\n<CODE>dart:js</CODE>\n<CODE>dart:js_util</CODE>\n<P>\n  Web library access \n  <EM>is</EM>\n   allowed in:\n</P>\n<CODE>web</CODE>\n<P>\n  otherwise, imports of \n  <CODE>dart:html</CODE>\n  , \n  <CODE>dart:js</CODE>\n   and \n  <CODE>dart:js_util</CODE>\n   are disallowed.\n</P>\n<CODE>dart:html</CODE>\n<CODE>dart:js</CODE>\n<CODE>dart:js_util</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "await_only_futures",
        "name": "Await only futures",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   using await on anything which is not a future.\n</P>\n<P>\n  Await is allowed on the types: \n  <CODE>Future&lt;X&gt;</CODE>\n  , \n  <CODE>FutureOr&lt;X&gt;</CODE>\n  , \n  <CODE>Future&lt;X&gt;?</CODE>\n  , \n  <CODE>FutureOr&lt;X&gt;?</CODE>\n   and \n  <CODE>dynamic</CODE>\n  .\n</P>\n<CODE>Future&lt;X&gt;</CODE>\n<CODE>FutureOr&lt;X&gt;</CODE>\n<CODE>Future&lt;X&gt;?</CODE>\n<CODE>FutureOr&lt;X&gt;?</CODE>\n<CODE>dynamic</CODE>\n<P>\n  Further, using \n  <CODE>await null</CODE>\n   is specifically allowed as a way to introduce a microtask delay.\n</P>\n<CODE>await null</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">main</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">await</SPAN>\n    <SPAN style=\"color:#11796D\"> 23</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">main</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  await</SPAN>\n    <SPAN style=\"color:#11796D\"> null</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// If a delay is really intended.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">23</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "camel_case_extensions",
        "name": "Camel case extensions",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/style#do-name-extensions-using-uppercamelcase\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>DO</STRONG>\n   name extensions using \n  <CODE>UpperCamelCase</CODE>\n  .\n</P>\n<CODE>UpperCamelCase</CODE>\n<P>Extensions should capitalize the first letter of each word (including the first word), and use no separators.</P>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">extension</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyFancyList</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#D43324\">on</SPAN>\n    <SPAN style=\"color:#0468D7\"> List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt; { </SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  // ... </SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">extension</SPAN>\n    <SPAN style=\"color:#0468D7\"> SmartIterable</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#D43324\">on</SPAN>\n    <SPAN style=\"color:#0468D7\"> Iterable</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt; {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  // ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "camel_case_types",
        "name": "Camel case types",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/style#do-name-types-using-uppercamelcase\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>DO</STRONG>\n   name types using UpperCamelCase.\n</P>\n<P>Classes and typedefs should capitalize the first letter of each word (including the first word), and use no separators.</P>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> SliderMenu</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  // ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> HttpRequest</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  // ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">typedef</SPAN>\n    <SPAN style=\"color:#0468D7\"> num</SPAN>\n    <SPAN style=\"color:#0468D7\"> Adder</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#222222\"> x, </SPAN>\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#222222\"> y);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "cancel_subscriptions",
        "name": "Cancel subscriptions",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   invoke \n  <CODE>cancel</CODE>\n   on instances of \n  <CODE>dart:async</CODE>\n  <CODE>StreamSubscription</CODE>\n  .\n</P>\n<CODE>cancel</CODE>\n<CODE>dart:async</CODE>\n<CODE>StreamSubscription</CODE>\n<P>Cancelling instances of StreamSubscription prevents memory leaks and unexpected behavior.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  StreamSubscription</SPAN>\n    <SPAN style=\"color:#222222\"> _subscriptionA; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> init</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Stream</SPAN>\n    <SPAN style=\"color:#222222\"> stream) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    _subscriptionA = stream.</SPAN>\n    <SPAN style=\"color:#6200EE\">listen</SPAN>\n    <SPAN style=\"color:#222222\">((_) {});</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  StreamSubscription</SPAN>\n    <SPAN style=\"color:#222222\"> _subscriptionF; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  StreamSubscription</SPAN>\n    <SPAN style=\"color:#222222\"> _subscriptionB; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> init</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Stream</SPAN>\n    <SPAN style=\"color:#222222\"> stream) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    _subscriptionB = stream.</SPAN>\n    <SPAN style=\"color:#6200EE\">listen</SPAN>\n    <SPAN style=\"color:#222222\">((_) {});</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> dispose</SPAN>\n    <SPAN style=\"color:#222222\">(filename) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    _subscriptionB.</SPAN>\n    <SPAN style=\"color:#6200EE\">cancel</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunctionOK</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  StreamSubscription</SPAN>\n    <SPAN style=\"color:#222222\"> _subscriptionB; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  _subscriptionB.</SPAN>\n    <SPAN style=\"color:#6200EE\">cancel</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>Known limitations</STRONG>\n</P>\n<P>\n  This rule does not track all patterns of StreamSubscription instantiations and cancellations. See \n  <A href=\"https://github.com/dart-lang/linter/issues/317\">linter#317</A>\n   for more information.\n</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "cascade_invocations",
        "name": "Cascade invocations",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   Use the cascading style when successively invoking methods on the same reference.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">SomeClass</SPAN>\n    <SPAN style=\"color:#222222\"> someReference = </SPAN>\n    <SPAN style=\"color:#0468D7\">SomeClass</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">someReference.</SPAN>\n    <SPAN style=\"color:#6200EE\">firstMethod</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">someReference.</SPAN>\n    <SPAN style=\"color:#6200EE\">secondMethod</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">SomeClass</SPAN>\n    <SPAN style=\"color:#222222\"> someReference = </SPAN>\n    <SPAN style=\"color:#0468D7\">SomeClass</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">someReference.</SPAN>\n    <SPAN style=\"color:#6200EE\">firstMethod</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">someReference.aProperty = value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">someReference.</SPAN>\n    <SPAN style=\"color:#6200EE\">secondMethod</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">SomeClass</SPAN>\n    <SPAN style=\"color:#222222\"> someReference = </SPAN>\n    <SPAN style=\"color:#0468D7\">SomeClass</SPAN>\n    <SPAN style=\"color:#222222\">()</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ..</SPAN>\n    <SPAN style=\"color:#6200EE\">firstMethod</SPAN>\n    <SPAN style=\"color:#222222\">()</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ..aProperty = value</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ..</SPAN>\n    <SPAN style=\"color:#6200EE\">secondMethod</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">SomeClass</SPAN>\n    <SPAN style=\"color:#222222\"> someReference = </SPAN>\n    <SPAN style=\"color:#0468D7\">SomeClass</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">someReference</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ..</SPAN>\n    <SPAN style=\"color:#6200EE\">firstMethod</SPAN>\n    <SPAN style=\"color:#222222\">()</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ..aProperty = value</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ..</SPAN>\n    <SPAN style=\"color:#6200EE\">secondMethod</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "cast_nullable_to_non_nullable",
        "name": "Cast nullable to non nullable",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   cast a nullable value to a non nullable type. This hides a null check and most of the time it is not what is expected.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\">? a;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> v = a </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> v = a </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\">? a;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> v = a! </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> v = a!;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "close_sinks",
        "name": "Close sinks",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   invoke \n  <CODE>close</CODE>\n   on instances of \n  <CODE>dart:core</CODE>\n  <CODE>Sink</CODE>\n  .\n</P>\n<CODE>close</CODE>\n<CODE>dart:core</CODE>\n<CODE>Sink</CODE>\n<P>Closing instances of Sink prevents memory leaks and unexpected behavior.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  IOSink</SPAN>\n    <SPAN style=\"color:#222222\"> _sinkA;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> init</SPAN>\n    <SPAN style=\"color:#222222\">(filename) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    _sinkA = </SPAN>\n    <SPAN style=\"color:#0468D7\">File</SPAN>\n    <SPAN style=\"color:#222222\">(filename).</SPAN>\n    <SPAN style=\"color:#6200EE\">openWrite</SPAN>\n    <SPAN style=\"color:#222222\">(); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  IOSink</SPAN>\n    <SPAN style=\"color:#222222\"> _sinkF; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  IOSink</SPAN>\n    <SPAN style=\"color:#222222\"> _sinkB;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> init</SPAN>\n    <SPAN style=\"color:#222222\">(filename) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    _sinkB = </SPAN>\n    <SPAN style=\"color:#0468D7\">File</SPAN>\n    <SPAN style=\"color:#222222\">(filename).</SPAN>\n    <SPAN style=\"color:#6200EE\">openWrite</SPAN>\n    <SPAN style=\"color:#222222\">(); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> dispose</SPAN>\n    <SPAN style=\"color:#222222\">(filename) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    _sinkB.</SPAN>\n    <SPAN style=\"color:#6200EE\">close</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunctionOK</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  IOSink</SPAN>\n    <SPAN style=\"color:#222222\"> _sinkFOK; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  _sinkFOK.</SPAN>\n    <SPAN style=\"color:#6200EE\">close</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>Known limitations</STRONG>\n</P>\n<P>\n  This rule does not track all patterns of Sink instantiations and closures. See \n  <A href=\"https://github.com/dart-lang/linter/issues/1381\">linter#1381</A>\n   for more information.\n</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "collection_methods_unrelated_type",
        "name": "Collection methods unrelated type",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   invoke certain collection method with an argument with an unrelated type.\n</P>\n<P>\n  Doing this will invoke \n  <CODE>==</CODE>\n   on the collection's elements and most likely will return \n  <CODE>false</CODE>\n  .\n</P>\n<CODE>==</CODE>\n<CODE>false</CODE>\n<P>An argument passed to a collection method should relate to the collection type as follows:</P>\n<CODE>Iterable&lt;E&gt;.contains</CODE>\n<CODE>E</CODE>\n<CODE>List&lt;E&gt;.remove</CODE>\n<CODE>E</CODE>\n<CODE>Map&lt;K, V&gt;.containsKey</CODE>\n<CODE>K</CODE>\n<CODE>Map&lt;K, V&gt;.containsValue</CODE>\n<CODE>V</CODE>\n<CODE>Map&lt;K, V&gt;.remove</CODE>\n<CODE>K</CODE>\n<CODE>Map&lt;K, V&gt;.[]</CODE>\n<CODE>K</CODE>\n<CODE>Queue&lt;E&gt;.remove</CODE>\n<CODE>E</CODE>\n<CODE>Set&lt;E&gt;.lookup</CODE>\n<CODE>E</CODE>\n<CODE>Set&lt;E&gt;.remove</CODE>\n<CODE>E</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'1'</SPAN>\n    <SPAN style=\"color:#222222\">)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#D43324\"> set</SPAN>\n    <SPAN style=\"color:#222222\"> = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;{};</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  set</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">remove</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'1'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#D43324\"> set</SPAN>\n    <SPAN style=\"color:#222222\"> = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;{};</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  set</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">remove</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "combinators_ordering",
        "name": "Combinators ordering",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   sort combinator names alphabetically.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'a.dart'</SPAN>\n    <SPAN style=\"color:#D43324\"> show</SPAN>\n    <SPAN style=\"color:#222222\"> B, A </SPAN>\n    <SPAN style=\"color:#D43324\">hide</SPAN>\n    <SPAN style=\"color:#222222\"> D, C;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">export</SPAN>\n    <SPAN style=\"color:#11796D\"> 'a.dart'</SPAN>\n    <SPAN style=\"color:#D43324\"> show</SPAN>\n    <SPAN style=\"color:#222222\"> B, A </SPAN>\n    <SPAN style=\"color:#D43324\">hide</SPAN>\n    <SPAN style=\"color:#222222\"> D, C;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'a.dart'</SPAN>\n    <SPAN style=\"color:#D43324\"> show</SPAN>\n    <SPAN style=\"color:#222222\"> A, B </SPAN>\n    <SPAN style=\"color:#D43324\">hide</SPAN>\n    <SPAN style=\"color:#222222\"> C, D;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">export</SPAN>\n    <SPAN style=\"color:#11796D\"> 'a.dart'</SPAN>\n    <SPAN style=\"color:#D43324\"> show</SPAN>\n    <SPAN style=\"color:#222222\"> A, B </SPAN>\n    <SPAN style=\"color:#D43324\">hide</SPAN>\n    <SPAN style=\"color:#222222\"> C, D;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "comment_references",
        "name": "Comment references",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   reference only in-scope identifiers in doc comments.\n</P>\n<P>\n  If you surround identifiers like variable, method, or type names in square brackets, then tools like your IDE and \n  <A href=\"https://dart.dev/tools/dart-doc\">\n    <CODE>dart doc</CODE>\n  </A>\n   can link to them. For this to work, ensure that all identifiers in docs wrapped in brackets are in scope.\n</P>\n<CODE>dart doc</CODE>\n<P>\n  For example, assuming \n  <CODE>outOfScopeId</CODE>\n   is out of scope:\n</P>\n<CODE>outOfScopeId</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// Returns whether </SPAN>\n    <SPAN style=\"color:#222222\">[value]</SPAN>\n    <SPAN style=\"color:#6E6E70\"> is larger than </SPAN>\n    <SPAN style=\"color:#222222\">[outOfScopeId]</SPAN>\n    <SPAN style=\"color:#6E6E70\">.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#6200EE\"> isOutOfRange</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> value) { ... }</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// Returns the larger of </SPAN>\n    <SPAN style=\"color:#222222\">[a]</SPAN>\n    <SPAN style=\"color:#6E6E70\"> or </SPAN>\n    <SPAN style=\"color:#222222\">[b]</SPAN>\n    <SPAN style=\"color:#6E6E70\">.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#6200EE\"> max_int</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> a, </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> b) { ... }</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  Note that the square bracket comment format is designed to allow comments to refer to declarations using a fairly natural format but does not allow \n  <EM>arbitrary expressions</EM>\n  . In particular, code references within square brackets can consist of any of the following:\n</P>\n<CODE>[print]</CODE>\n<CODE>[Future]</CODE>\n<CODE>[Future.new]</CODE>\n<CODE>[Future.value]</CODE>\n<CODE>[Future.wait]</CODE>\n<CODE>[Future.then]</CODE>\n<CODE>[math.max]</CODE>\n<CODE>max</CODE>\n<CODE>[Future.value()]</CODE>\n<CODE>[async.Future.then]</CODE>\n<CODE>async</CODE>\n<P>\n  <STRONG>Known limitations</STRONG>\n</P>\n<P>\n  The \n  <CODE>comment_references</CODE>\n   lint rule aligns with the Dart analyzer's notion of comment references, which is occasionally distinct from Dartdoc's notion of comment references. The lint rule may report comment references which Dartdoc can resolve, even though the analyzer cannot. See \n  <A href=\"https://github.com/dart-lang/linter/issues/1142\">linter#1142</A>\n   for more information.\n</P>\n<CODE>comment_references</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "conditional_uri_does_not_exist",
        "name": "Conditional uri does not exist",
        "severity": "BLOCKER",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   reference files that do not exist in conditional imports.\n</P>\n<P>Code may fail at runtime if the condition evaluates such that the missing file needs to be imported.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'file_that_does_exist.dart'</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (condition) </SPAN>\n    <SPAN style=\"color:#11796D\">'file_that_does_not_exist.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'file_that_does_exist.dart'</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (condition) </SPAN>\n    <SPAN style=\"color:#11796D\">'file_that_also_does_exist.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "constant_identifier_names",
        "name": "Constant identifier names",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   using lowerCamelCase for constant names.\n</P>\n<P>\n  In new code, use \n  <CODE>lowerCamelCase</CODE>\n   for constant variables, including enum values.\n</P>\n<CODE>lowerCamelCase</CODE>\n<P>\n  In existing code that uses \n  <CODE>ALL_CAPS_WITH_UNDERSCORES</CODE>\n   for constants, you may continue to use all caps to stay consistent.\n</P>\n<CODE>ALL_CAPS_WITH_UNDERSCORES</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> PI</SPAN>\n    <SPAN style=\"color:#222222\"> = </SPAN>\n    <SPAN style=\"color:#11796D\">3.14</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> kDefaultTimeout = </SPAN>\n    <SPAN style=\"color:#11796D\">1000</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#0468D7\"> URL_SCHEME</SPAN>\n    <SPAN style=\"color:#222222\"> = </SPAN>\n    <SPAN style=\"color:#0468D7\">RegExp</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'^([a-z]+):'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Dice</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> final</SPAN>\n    <SPAN style=\"color:#0468D7\"> NUMBER_GENERATOR</SPAN>\n    <SPAN style=\"color:#222222\"> = </SPAN>\n    <SPAN style=\"color:#0468D7\">Random</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> pi = </SPAN>\n    <SPAN style=\"color:#11796D\">3.14</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> defaultTimeout = </SPAN>\n    <SPAN style=\"color:#11796D\">1000</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> urlScheme = </SPAN>\n    <SPAN style=\"color:#0468D7\">RegExp</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'^([a-z]+):'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Dice</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> final</SPAN>\n    <SPAN style=\"color:#222222\"> numberGenerator = </SPAN>\n    <SPAN style=\"color:#0468D7\">Random</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "control_flow_in_finally",
        "name": "Control flow in finally",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   control flow leaving \n  <CODE>finally</CODE>\n   blocks.\n</P>\n<CODE>finally</CODE>\n<P>\n  Using control flow in \n  <CODE>finally</CODE>\n   blocks will inevitably cause unexpected behavior that is hard to debug.\n</P>\n<CODE>finally</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> BadReturn</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  double</SPAN>\n    <SPAN style=\"color:#6200EE\"> nonCompliantMethod</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      return</SPAN>\n    <SPAN style=\"color:#11796D\"> 1</SPAN>\n    <SPAN style=\"color:#222222\"> / </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    } </SPAN>\n    <SPAN style=\"color:#D43324\">catch</SPAN>\n    <SPAN style=\"color:#222222\"> (e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">      print</SPAN>\n    <SPAN style=\"color:#222222\">(e);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    } </SPAN>\n    <SPAN style=\"color:#D43324\">finally</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      return</SPAN>\n    <SPAN style=\"color:#11796D\"> 1.0</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> BadContinue</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  double</SPAN>\n    <SPAN style=\"color:#6200EE\"> nonCompliantMethod</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> o </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> [</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">]) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">        print</SPAN>\n    <SPAN style=\"color:#222222\">(o / </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      } </SPAN>\n    <SPAN style=\"color:#D43324\">catch</SPAN>\n    <SPAN style=\"color:#222222\"> (e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">        print</SPAN>\n    <SPAN style=\"color:#222222\">(e);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      } </SPAN>\n    <SPAN style=\"color:#D43324\">finally</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">        continue</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#11796D\"> 1.0</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> BadBreak</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  double</SPAN>\n    <SPAN style=\"color:#6200EE\"> nonCompliantMethod</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> o </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> [</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">]) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">        print</SPAN>\n    <SPAN style=\"color:#222222\">(o / </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      } </SPAN>\n    <SPAN style=\"color:#D43324\">catch</SPAN>\n    <SPAN style=\"color:#222222\"> (e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">        print</SPAN>\n    <SPAN style=\"color:#222222\">(e);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      } </SPAN>\n    <SPAN style=\"color:#D43324\">finally</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">        break</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#11796D\"> 1.0</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Ok</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  double</SPAN>\n    <SPAN style=\"color:#6200EE\"> compliantMethod</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    var</SPAN>\n    <SPAN style=\"color:#222222\"> i = </SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      i = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\"> / </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    } </SPAN>\n    <SPAN style=\"color:#D43324\">catch</SPAN>\n    <SPAN style=\"color:#222222\"> (e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">      print</SPAN>\n    <SPAN style=\"color:#222222\">(e); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#222222\"> i;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "curly_braces_in_flow_control_structures",
        "name": "Curly braces in flow control structures",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use curly braces for all flow control structures.\n</P>\n<P>\n  Doing so avoids the \n  <A href=\"https://en.wikipedia.org/wiki/Dangling_else\">dangling else</A>\n   problem.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (overflowChars != other.overflowChars)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> overflowChars &lt; other.overflowChars;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (isWeekDay) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Bike to work!'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">else</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Go dancing or read a book!'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  There is one exception to this: an \n  <CODE>if</CODE>\n   statement with no \n  <CODE>else</CODE>\n   clause where the entire \n  <CODE>if</CODE>\n   statement and the then body all fit in one line. In that case, you may leave off the braces if you prefer:\n</P>\n<CODE>if</CODE>\n<CODE>else</CODE>\n<CODE>if</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (arg == </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#222222\"> defaultValue;</SPAN>\n  </SPAN>\n</CODE>\n<P>If the body wraps to the next line, though, use braces:</P>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (overflowChars != other.overflowChars) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> overflowChars &lt; other.overflowChars;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "dangling_library_doc_comments",
        "name": "Dangling library doc comments",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  Attach library doc comments (with \n  <CODE>///</CODE>\n  ) to library directives, rather than leaving them dangling near the top of a library.\n</P>\n<CODE>///</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// This is a great library.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:math'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// This is a great library.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// This is a great library.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:math'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>NOTE:</STRONG>\n   An unnamed library, like \n  <CODE>library;</CODE>\n   above, is only supported in Dart 2.19 and later. Code which might run in earlier versions of Dart will need to provide a name in the \n  <CODE>library</CODE>\n   directive.\n</P>\n<CODE>library;</CODE>\n<CODE>library</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "depend_on_referenced_packages",
        "name": "Depend on referenced packages",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   depend on referenced packages.\n</P>\n<P>When importing a package, add a dependency on it to your pubspec.</P>\n<P>Depending explicitly on packages that you reference ensures they will always exist and allows you to put a dependency constraint on them to guard you against breaking changes.</P>\n<P>\n  Whether this should be a regular dependency or dev_dependency depends on if it is referenced from a public file (one under either \n  <CODE>lib</CODE>\n   or \n  <CODE>bin</CODE>\n  ), or some other private file.\n</P>\n<CODE>lib</CODE>\n<CODE>bin</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:a/a.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">dependencies</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:a/a.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">dependencies</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  a</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#11796D\">^1.0.0</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "deprecated_consistency",
        "name": "Deprecated consistency",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   apply \n  <CODE>@Deprecated()</CODE>\n   consistently:\n</P>\n<CODE>@Deprecated()</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@deprecated</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  B</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.field});</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @deprecated</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Object</SPAN>\n    <SPAN style=\"color:#222222\"> field;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@deprecated</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @deprecated</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  B</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#D43324\">@deprecated</SPAN>\n    <SPAN style=\"color:#D43324\"> this</SPAN>\n    <SPAN style=\"color:#222222\">.field});</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @deprecated</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Object</SPAN>\n    <SPAN style=\"color:#222222\"> field;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  C</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#D43324\">@deprecated</SPAN>\n    <SPAN style=\"color:#D43324\"> super</SPAN>\n    <SPAN style=\"color:#222222\">.field});</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "deprecated_member_use_from_same_package",
        "name": "Deprecated member use from same package",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  Elements that are annotated with \n  <CODE>@Deprecated</CODE>\n   should not be referenced from within the package in which they are declared.\n</P>\n<CODE>@Deprecated</CODE>\n<P>\n  <STRONG>AVOID</STRONG>\n   using deprecated elements.\n</P>\n<P>...</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// Declared in one library:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Foo</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @Deprecated</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">\"Use 'm2' instead\"</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> m1</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> m2</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      @Deprecated</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'This is an old parameter'</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">? p,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  })</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@Deprecated</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Do not use'</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> x = </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// In the same or another library, but within the same package:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> m</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Foo</SPAN>\n    <SPAN style=\"color:#222222\"> foo) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  foo.</SPAN>\n    <SPAN style=\"color:#6200EE\">m1</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  foo.</SPAN>\n    <SPAN style=\"color:#6200EE\">m2</SPAN>\n    <SPAN style=\"color:#222222\">(p: </SPAN>\n    <SPAN style=\"color:#11796D\">7</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  x = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  Deprecated elements can be used from within \n  <EM>other</EM>\n   deprecated elements, in order to allow for the deprecation of a collection of APIs together as one unit.\n</P>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// Declared in one library:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Foo</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @Deprecated</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">\"Use 'm2' instead\"</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> m1</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> m2</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      @Deprecated</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'This is an old parameter'</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">? p,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  })</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@Deprecated</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Do not use'</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> x = </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// In the same or another library, but within the same package:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@Deprecated</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Do not use'</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> m</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Foo</SPAN>\n    <SPAN style=\"color:#222222\"> foo) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  foo.</SPAN>\n    <SPAN style=\"color:#6200EE\">m1</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  foo.</SPAN>\n    <SPAN style=\"color:#6200EE\">m2</SPAN>\n    <SPAN style=\"color:#222222\">(p: </SPAN>\n    <SPAN style=\"color:#11796D\">7</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  x = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "diagnostic_describe_all_properties",
        "name": "Diagnostic describe all properties",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   reference all public properties in \n  <CODE>debug</CODE>\n   method implementations.\n</P>\n<CODE>debug</CODE>\n<P>\n  Implementers of \n  <CODE>Diagnosticable</CODE>\n   should reference all public properties in a \n  <CODE>debugFillProperties(...)</CODE>\n   or \n  <CODE>debugDescribeChildren(...)</CODE>\n   method implementation to improve debuggability at runtime.\n</P>\n<CODE>Diagnosticable</CODE>\n<CODE>debugFillProperties(...)</CODE>\n<CODE>debugDescribeChildren(...)</CODE>\n<P>Public properties are defined as fields and getters that are</P>\n<CODE>_</CODE>\n<CODE>static</CODE>\n<CODE>Widget</CODE>\n<CODE>Widget</CODE>\n<P>\n  In addition, the \"debug\" prefix is treated specially for properties in Flutter. For the purposes of diagnostics, a property \n  <CODE>foo</CODE>\n   and a prefixed property \n  <CODE>debugFoo</CODE>\n   are treated as effectively describing the same property and it is sufficient to refer to one or the other.\n</P>\n<CODE>foo</CODE>\n<CODE>debugFoo</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Absorber</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> Widget</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> absorbing =&gt; _absorbing;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#222222\"> _absorbing;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> ignoringSemantics =&gt; _ignoringSemantics;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#222222\"> _ignoringSemantics;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> debugFillProperties</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">DiagnosticPropertiesBuilder</SPAN>\n    <SPAN style=\"color:#222222\"> properties) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    super</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">debugFillProperties</SPAN>\n    <SPAN style=\"color:#222222\">(properties);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    properties.</SPAN>\n    <SPAN style=\"color:#6200EE\">add</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">DiagnosticsProperty</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\">&gt;(</SPAN>\n    <SPAN style=\"color:#11796D\">'absorbing'</SPAN>\n    <SPAN style=\"color:#222222\">, absorbing));</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">    // Missing reference to ignoringSemantics</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Absorber</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> Widget</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> absorbing =&gt; _absorbing;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#222222\"> _absorbing;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> ignoringSemantics =&gt; _ignoringSemantics;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#222222\"> _ignoringSemantics;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> debugFillProperties</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">DiagnosticPropertiesBuilder</SPAN>\n    <SPAN style=\"color:#222222\"> properties) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    super</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">debugFillProperties</SPAN>\n    <SPAN style=\"color:#222222\">(properties);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    properties.</SPAN>\n    <SPAN style=\"color:#6200EE\">add</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">DiagnosticsProperty</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\">&gt;(</SPAN>\n    <SPAN style=\"color:#11796D\">'absorbing'</SPAN>\n    <SPAN style=\"color:#222222\">, absorbing));</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    properties.</SPAN>\n    <SPAN style=\"color:#6200EE\">add</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">DiagnosticsProperty</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\">&gt;(</SPAN>\n    <SPAN style=\"color:#11796D\">'ignoringSemantics'</SPAN>\n    <SPAN style=\"color:#222222\">, ignoringSemantics));</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "directives_ordering",
        "name": "Directives ordering",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   follow the directive ordering conventions in \n  <A href=\"https://dart.dev/effective-dart/style#ordering\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>DO</STRONG>\n   place \n  <CODE>dart:</CODE>\n   imports before other imports.\n</P>\n<CODE>dart:</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:bar/bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:foo/foo.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'dart:async'</SPAN>\n    <SPAN style=\"color:#222222\">;  </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'dart:html'</SPAN>\n    <SPAN style=\"color:#222222\">;  </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'dart:html'</SPAN>\n    <SPAN style=\"color:#222222\">;  </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:bar/bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'dart:async'</SPAN>\n    <SPAN style=\"color:#222222\">;  </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:foo/foo.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'dart:async'</SPAN>\n    <SPAN style=\"color:#222222\">;  </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'dart:html'</SPAN>\n    <SPAN style=\"color:#222222\">;  </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:bar/bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:foo/foo.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>DO</STRONG>\n   place \n  <CODE>package:</CODE>\n   imports before relative imports.\n</P>\n<CODE>package:</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'a.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'b.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:bar/bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;  </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:foo/foo.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;  </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:bar/bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;  </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'a.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:foo/foo.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;  </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'b.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:bar/bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;  </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:foo/foo.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;  </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'a.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'b.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>DO</STRONG>\n   specify exports in a separate section after all imports.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'src/error.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">export</SPAN>\n    <SPAN style=\"color:#11796D\"> 'src/error.dart'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'src/string_source.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'src/error.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'src/string_source.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">export</SPAN>\n    <SPAN style=\"color:#11796D\"> 'src/error.dart'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>DO</STRONG>\n   sort sections alphabetically.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:foo/bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:bar/bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'a/b.dart'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'a.dart'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:bar/bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:foo/bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'a.dart'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'a/b.dart'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "discarded_futures",
        "name": "Discarded futures",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  Making asynchronous calls in non-\n  <CODE>async</CODE>\n   functions is usually the sign of a programming error. In general these functions should be marked \n  <CODE>async</CODE>\n   and such futures should likely be awaited (as enforced by \n  <CODE>unawaited_futures</CODE>\n  ).\n</P>\n<CODE>async</CODE>\n<CODE>async</CODE>\n<CODE>unawaited_futures</CODE>\n<P>\n  <STRONG>DON'T</STRONG>\n   invoke asynchronous functions in non-\n  <CODE>async</CODE>\n   blocks.\n</P>\n<CODE>async</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> recreateDir</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> path) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  deleteDir</SPAN>\n    <SPAN style=\"color:#222222\">(path);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  createDir</SPAN>\n    <SPAN style=\"color:#222222\">(path);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">deleteDir</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> path) </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">createDir</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> path) </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">recreateDir</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> path) </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  await</SPAN>\n    <SPAN style=\"color:#6200EE\"> deleteDir</SPAN>\n    <SPAN style=\"color:#222222\">(path);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  await</SPAN>\n    <SPAN style=\"color:#6200EE\"> createDir</SPAN>\n    <SPAN style=\"color:#222222\">(path);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">deleteDir</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> path) </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">createDir</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> path) </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "do_not_use_environment",
        "name": "Do not use environment",
        "severity": "MINOR",
        "description": "<SECTION><P>Using values derived from the environment at compile-time, creates hidden global state and makes applications hard to understand and maintain.</P>\n<P>\n  <STRONG>DON'T</STRONG>\n   use \n  <CODE>fromEnvironment</CODE>\n   or \n  <CODE>hasEnvironment</CODE>\n   factory constructors.\n</P>\n<CODE>fromEnvironment</CODE>\n<CODE>hasEnvironment</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> loggingLevel =</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">hasEnvironment</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'logging'</SPAN>\n    <SPAN style=\"color:#222222\">) ? </SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">fromEnvironment</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'logging'</SPAN>\n    <SPAN style=\"color:#222222\">) : </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "document_ignores",
        "name": "Document ignores",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   document all ignored diagnostic reports.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// ignore: unused_element</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> _x = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// This private field will be used later.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// ignore: unused_element</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> _x = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "empty_catches",
        "name": "Empty catches",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   empty catch blocks.\n</P>\n<P>\n  In general, empty catch blocks should be avoided. In cases where they are intended, a comment should be provided to explain why exceptions are being caught and suppressed. Alternatively, the exception identifier can be named with underscores (e.g., \n  <CODE>_</CODE>\n  ) to indicate that we intend to skip it.\n</P>\n<CODE>_</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">catch</SPAN>\n    <SPAN style=\"color:#222222\">(exception) { }</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">catch</SPAN>\n    <SPAN style=\"color:#222222\">(e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  // ignored, really.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// Alternatively:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">catch</SPAN>\n    <SPAN style=\"color:#222222\">(_) { }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// Better still:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">catch</SPAN>\n    <SPAN style=\"color:#222222\">(e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  doSomething</SPAN>\n    <SPAN style=\"color:#222222\">(e);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "empty_constructor_bodies",
        "name": "Empty constructor bodies",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/usage#do-use--instead-of--for-empty-constructor-bodies\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>DO</STRONG>\n   use \n  <CODE>;</CODE>\n   instead of \n  <CODE>{}</CODE>\n   for empty constructor bodies.\n</P>\n<CODE>;</CODE>\n<CODE>{}</CODE>\n<P>In Dart, a constructor with an empty body can be terminated with just a semicolon. This is required for const constructors. For consistency and brevity, other constructors should also do this.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> x, y;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Point</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.x, </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.y) {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> x, y;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Point</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.x, </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.y);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "empty_statements",
        "name": "Empty statements",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   empty statements.\n</P>\n<P>Empty statements almost always indicate a bug.</P>\n<P>For example,</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (complicated.expression.</SPAN>\n    <SPAN style=\"color:#6200EE\">foo</SPAN>\n    <SPAN style=\"color:#222222\">());</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  bar</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  Formatted with \n  <CODE>dart format</CODE>\n   the bug becomes obvious:\n</P>\n<CODE>dart format</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (complicated.expression.</SPAN>\n    <SPAN style=\"color:#6200EE\">foo</SPAN>\n    <SPAN style=\"color:#222222\">()) ;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">bar</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n<P>Better to avoid the empty statement altogether.</P>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (complicated.expression.</SPAN>\n    <SPAN style=\"color:#6200EE\">foo</SPAN>\n    <SPAN style=\"color:#222222\">())</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  bar</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "enable_null_safety",
        "name": "Enable null safety",
        "severity": "MINOR",
        "description": "<SECTION><P>NOTE: This rule is removed in Dart 2.12.0; it is no longer functional.</P>\n<P>\n  <STRONG>DO</STRONG>\n   use sound null safety, by not specifying a dart version lower than \n  <CODE>2.12</CODE>\n  .\n</P>\n<CODE>2.12</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// @dart=2.8</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">a</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">b</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": false
    },
    {
        "key": "eol_at_end_of_file",
        "name": "Eol at end of file",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   put a single newline at the end of non-empty files.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">a {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">b {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    &lt;-- newline</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "exhaustive_cases",
        "name": "Exhaustive cases",
        "severity": "MAJOR",
        "description": "<SECTION><P>Switching on instances of enum-like classes should be exhaustive.</P>\n<P>Enum-like classes are defined as concrete (non-abstract) classes that have:</P>\n<P>\n  <STRONG>DO</STRONG>\n   define case clauses for all constants in enum-like classes.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> EnumLike</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> i;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> EnumLike</SPAN>\n    <SPAN style=\"color:#222222\">._(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.i);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> e = </SPAN>\n    <SPAN style=\"color:#0468D7\">EnumLike</SPAN>\n    <SPAN style=\"color:#222222\">._(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> f = </SPAN>\n    <SPAN style=\"color:#0468D7\">EnumLike</SPAN>\n    <SPAN style=\"color:#222222\">._(</SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> g = </SPAN>\n    <SPAN style=\"color:#0468D7\">EnumLike</SPAN>\n    <SPAN style=\"color:#222222\">._(</SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> bad</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">EnumLike</SPAN>\n    <SPAN style=\"color:#222222\"> e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  // Missing case.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  switch</SPAN>\n    <SPAN style=\"color:#222222\">(e) { </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    case</SPAN>\n    <SPAN style=\"color:#0468D7\"> EnumLike</SPAN>\n    <SPAN style=\"color:#222222\">.e :</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">      print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'e'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    case</SPAN>\n    <SPAN style=\"color:#0468D7\"> EnumLike</SPAN>\n    <SPAN style=\"color:#222222\">.f :</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">      print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'f'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> EnumLike</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> i;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> EnumLike</SPAN>\n    <SPAN style=\"color:#222222\">._(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.i);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> e = </SPAN>\n    <SPAN style=\"color:#0468D7\">EnumLike</SPAN>\n    <SPAN style=\"color:#222222\">._(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> f = </SPAN>\n    <SPAN style=\"color:#0468D7\">EnumLike</SPAN>\n    <SPAN style=\"color:#222222\">._(</SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> g = </SPAN>\n    <SPAN style=\"color:#0468D7\">EnumLike</SPAN>\n    <SPAN style=\"color:#222222\">._(</SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> ok</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">EnumLike</SPAN>\n    <SPAN style=\"color:#222222\"> e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  // All cases covered.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  switch</SPAN>\n    <SPAN style=\"color:#222222\">(e) { </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    case</SPAN>\n    <SPAN style=\"color:#0468D7\"> EnumLike</SPAN>\n    <SPAN style=\"color:#222222\">.e :</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">      print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'e'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    case</SPAN>\n    <SPAN style=\"color:#0468D7\"> EnumLike</SPAN>\n    <SPAN style=\"color:#222222\">.f :</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">      print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'f'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    case</SPAN>\n    <SPAN style=\"color:#0468D7\"> EnumLike</SPAN>\n    <SPAN style=\"color:#222222\">.g :</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">      print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'g'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "file_names",
        "name": "File names",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   name source files using \n  <CODE>lowercase_with_underscores</CODE>\n  .\n</P>\n<CODE>lowercase_with_underscores</CODE>\n<P>Some file systems are not case-sensitive, so many projects require filenames to be all lowercase. Using a separating character allows names to still be readable in that form. Using underscores as the separator ensures that the name is still a valid Dart identifier, which may be helpful if the language later supports symbolic imports.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>SliderMenu.dart</CODE>\n<CODE>filesystem.dart</CODE>\n<CODE>file-system.dart</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>slider_menu.dart</CODE>\n<CODE>file_system.dart</CODE>\n<P>\n  Files without a strict \n  <CODE>.dart</CODE>\n   extension are ignored. For example:\n</P>\n<CODE>.dart</CODE>\n<P>\n  <STRONG>OK:</STRONG>\n</P>\n<CODE>file-system.g.dart</CODE>\n<CODE>SliderMenu.css.dart</CODE>\n<P>\n  The lint \n  <CODE>library_names</CODE>\n   can be used to enforce the same kind of naming on the library.\n</P>\n<CODE>library_names</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "flutter_style_todos",
        "name": "Flutter style todos",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use Flutter TODO format.\n</P>\n<P>\n  From the \n  <A href=\"https://github.com/flutter/flutter/wiki/Style-guide-for-Flutter-repo#comments\">Flutter docs</A>\n  :\n</P>\n<P>TODOs should include the string TODO in all caps, followed by the GitHub username of the person with the best context about the problem referenced by the TODO in parenthesis. A TODO is not a commitment that the person referenced will fix the problem, it is intended to be the person with enough context to explain the problem. Thus, when you create a TODO, it is almost always your username that is given.</P>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// TODO(username): message.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// TODO(username): message, https://URL-to-issue.</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "hash_and_equals",
        "name": "Hash and equals",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   override \n  <CODE>hashCode</CODE>\n   if overriding \n  <CODE>==</CODE>\n   and prefer overriding \n  <CODE>==</CODE>\n   if overriding \n  <CODE>hashCode</CODE>\n  .\n</P>\n<CODE>hashCode</CODE>\n<CODE>==</CODE>\n<CODE>==</CODE>\n<CODE>hashCode</CODE>\n<P>\n  Every object in Dart has a \n  <CODE>hashCode</CODE>\n  . Both the \n  <CODE>==</CODE>\n   operator and the \n  <CODE>hashCode</CODE>\n   property of objects must be consistent in order for a common hash map implementation to function properly. Thus, when overriding \n  <CODE>==</CODE>\n  , the \n  <CODE>hashCode</CODE>\n   should also be overridden to maintain consistency. Similarly, if \n  <CODE>hashCode</CODE>\n   is overridden, \n  <CODE>==</CODE>\n   should be also.\n</P>\n<CODE>hashCode</CODE>\n<CODE>==</CODE>\n<CODE>hashCode</CODE>\n<CODE>==</CODE>\n<CODE>hashCode</CODE>\n<CODE>hashCode</CODE>\n<CODE>==</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Bad</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Bad</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.value);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#D43324\"> operator</SPAN>\n    <SPAN style=\"color:#222222\"> ==(</SPAN>\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#222222\"> other) =&gt; other is </SPAN>\n    <SPAN style=\"color:#0468D7\">Bad</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; other.value == value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Better</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Better</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.value);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#D43324\"> operator</SPAN>\n    <SPAN style=\"color:#222222\"> ==(</SPAN>\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#222222\"> other) =&gt;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      other is </SPAN>\n    <SPAN style=\"color:#0468D7\">Better</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      other.runtimeType == runtimeType &amp;&amp;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      other.value == value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> hashCode =&gt; value.hashCode;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "implementation_imports",
        "name": "Implementation imports",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  From the the \n  <A href=\"https://dart.dev/tools/pub/package-layout#implementation-files\">pub package layout doc</A>\n  :\n</P>\n<P>\n  <STRONG>DON'T</STRONG>\n   import implementation files from another package.\n</P>\n<P>\n  The libraries inside \n  <CODE>lib</CODE>\n   are publicly visible: other packages are free to import them. But much of a package's code is internal implementation libraries that should only be imported and used by the package itself. Those go inside a subdirectory of \n  <CODE>lib</CODE>\n   called \n  <CODE>src</CODE>\n  . You can create subdirectories in there if it helps you organize things.\n</P>\n<CODE>lib</CODE>\n<CODE>lib</CODE>\n<CODE>src</CODE>\n<P>\n  You are free to import libraries that live in \n  <CODE>lib/src</CODE>\n   from within other Dart code in the same package (like other libraries in \n  <CODE>lib</CODE>\n  , scripts in \n  <CODE>bin</CODE>\n  , and tests) but you should never import from another package's \n  <CODE>lib/src</CODE>\n   directory. Those files are not part of the package's public API, and they might change in ways that could break your code.\n</P>\n<CODE>lib/src</CODE>\n<CODE>lib</CODE>\n<CODE>bin</CODE>\n<CODE>lib/src</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// In 'road_runner'</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:acme/src/internals.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "implicit_call_tearoffs",
        "name": "Implicit call tearoffs",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   Explicitly tear off \n  <CODE>.call</CODE>\n   methods from objects when assigning to a Function type. There is less magic with an explicit tear off. Future language versions may remove the implicit call tear off.\n</P>\n<CODE>.call</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Callable</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> call</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> callIt</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#0468D7\"> Function</SPAN>\n    <SPAN style=\"color:#222222\">() f) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  f</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">callIt</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Callable</SPAN>\n    <SPAN style=\"color:#222222\">());</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Callable</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> call</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> callIt</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#0468D7\"> Function</SPAN>\n    <SPAN style=\"color:#222222\">() f) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  f</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">callIt</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Callable</SPAN>\n    <SPAN style=\"color:#222222\">().call);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "implicit_reopen",
        "name": "Implicit reopen",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  Using an \n  <CODE>interface</CODE>\n  , \n  <CODE>base</CODE>\n  , \n  <CODE>final</CODE>\n  , or \n  <CODE>sealed</CODE>\n   modifier on a class, or a \n  <CODE>base</CODE>\n   modifier on a mixin, authors can control whether classes and mixins allow being implemented, extended, and/or mixed in from outside of the library where they're defined. In some cases, it's possible for an author to inadvertently relax these controls and implicitly \"reopen\" a class. (A similar reopening cannot occur with a mixin.)\n</P>\n<CODE>interface</CODE>\n<CODE>base</CODE>\n<CODE>final</CODE>\n<CODE>sealed</CODE>\n<CODE>base</CODE>\n<P>\n  This lint guards against unintentionally reopening a class by requiring such cases to be made explicit with the \n  <A href=\"https://pub.dev/documentation/meta/latest/meta/reopen-constant.html\">\n    <CODE>@reopen</CODE>\n  </A>\n   annotation in \n  <CODE>package:meta</CODE>\n  .\n</P>\n<CODE>@reopen</CODE>\n<CODE>package:meta</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">interface</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> I</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> I</SPAN>\n    <SPAN style=\"color:#222222\"> {} </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">interface</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> I</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> I</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:meta/meta.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">interface</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> I</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@reopen</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> I</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invalid_case_patterns",
        "name": "Invalid case patterns",
        "severity": "MAJOR",
        "description": "<SECTION><P>Some case expressions that are valid in Dart 2.19 and below will become an error or have changed semantics when a library is upgraded to 3.0. This lint flags those expressions in order to ease migration to Dart 3.0.</P>\n<P>Some valid switch cases in 2.19 will become compile errors in Dart 3.0:</P>\n<CODE>identical()</CODE>\n<CODE>!</CODE>\n<CODE>-</CODE>\n<CODE>~</CODE>\n<CODE>-</CODE>\n<CODE>!=</CODE>\n<CODE>==</CODE>\n<CODE>&amp;</CODE>\n<CODE>|</CODE>\n<CODE>^</CODE>\n<CODE>~/</CODE>\n<CODE>&gt;&gt;</CODE>\n<CODE>&gt;&gt;&gt;</CODE>\n<CODE>&lt;&lt;</CODE>\n<CODE>+</CODE>\n<CODE>-</CODE>\n<CODE>*</CODE>\n<CODE>/</CODE>\n<CODE>%</CODE>\n<CODE>&lt;</CODE>\n<CODE>&lt;=</CODE>\n<CODE>&gt;</CODE>\n<CODE>&gt;=</CODE>\n<CODE>??</CODE>\n<CODE>?:</CODE>\n<CODE>.length</CODE>\n<CODE>is</CODE>\n<CODE>is!</CODE>\n<P>Examples of all of them:</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">switch</SPAN>\n    <SPAN style=\"color:#222222\"> (obj) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">}: </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Set literal.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">): </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Parenthesized expression.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#6200EE\"> identical</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">): </SPAN>\n    <SPAN style=\"color:#6E6E70\">// `identical()` call.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#222222\"> -pi: </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Unary operator.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 1</SPAN>\n    <SPAN style=\"color:#222222\"> + </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Binary operator.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> true</SPAN>\n    <SPAN style=\"color:#222222\"> ? </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\"> : </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Conditional operator.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 'hi'</SPAN>\n    <SPAN style=\"color:#222222\">.length: </SPAN>\n    <SPAN style=\"color:#6E6E70\">// .length call.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#222222\"> i is </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#6E6E70\">// is expression.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>Some valid switch cases in 2.19 are also syntactically valid patterns, but the pattern matching behavior may be different from the current constant equality behavior. They are:</P>\n<P>\n  <STRONG>List and map literals.</STRONG>\n   A list or map literal can appear as a constant in a case:\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">switch</SPAN>\n    <SPAN style=\"color:#222222\"> (obj) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#222222\"> [</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">]: ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n    <SPAN style=\"color:#11796D\">'k'</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#11796D\">'v'</SPAN>\n    <SPAN style=\"color:#222222\">}: ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>Currently, the case will only match if the incoming value has the same identity as the constant. So:</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  switch</SPAN>\n    <SPAN style=\"color:#222222\"> (list) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    case</SPAN>\n    <SPAN style=\"color:#222222\"> [</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">]: </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Matched'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#D43324\">break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    default</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Did not match'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#D43324\">break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> [</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">]); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Prints \"Matched\".</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  test</SPAN>\n    <SPAN style=\"color:#222222\">([</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">]); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Prints \"Did not match\".</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>With patterns, a list or map literal becomes a list or map pattern. The pattern destructures the incoming object and matches if the subpatterns all match. In other words, list and map pattern match using something more like deep equality.</P>\n<P>With Dart 3.0, the above program prints \"Matched\" twice.</P>\n<P>\n  <STRONG>Constant constructor calls.</STRONG>\n   Similar to collections, you can construct a constant instance of a class in a case:\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> y;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.x, </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.y});</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Point</SPAN>\n    <SPAN style=\"color:#222222\"> p) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  switch</SPAN>\n    <SPAN style=\"color:#222222\"> (p) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    case</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\">(x: </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, y: </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">): </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Matched'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#D43324\">break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    default</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Did not match'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#D43324\">break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">)); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Prints \"Matched\".</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Point</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">)); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Prints \"Did not match\".</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  Again, like collections, the case currently only matches if the incoming value has the same identity. With patterns, the \n  <CODE>Point(...)</CODE>\n   syntax becomes an object pattern that destructures the incoming point, calls the \n  <CODE>x</CODE>\n   and \n  <CODE>y</CODE>\n   getters on it and then matches the results of those against the corresponding subpatterns.\n</P>\n<CODE>Point(...)</CODE>\n<CODE>x</CODE>\n<CODE>y</CODE>\n<P>In this example, it will print \"Matched\" twice.</P>\n<P>Note that object patterns only support named fields. So any constant constructor in a case today that has positional arguments will become a compile-time error when parsed as a pattern. A constant constructor call with no arguments is a valid object pattern and only does a type test:</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Thing</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Thing</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Thing</SPAN>\n    <SPAN style=\"color:#222222\"> t) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  switch</SPAN>\n    <SPAN style=\"color:#222222\"> (t) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    case</SPAN>\n    <SPAN style=\"color:#0468D7\"> Thing</SPAN>\n    <SPAN style=\"color:#222222\">(): </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Matched'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#D43324\">break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    default</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Did not match'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#D43324\">break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Thing</SPAN>\n    <SPAN style=\"color:#222222\">()); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Prints \"Matched\".</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Thing</SPAN>\n    <SPAN style=\"color:#222222\">()); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Prints \"Did not match\".</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>When interpreted as a pattern, this prints \"Matched\" twice.</P>\n<P>\n  <STRONG>Wildcards.</STRONG>\n   Today, you can have a constant named \n  <CODE>_</CODE>\n  :\n</P>\n<CODE>_</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> n) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#222222\"> _ = </SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  switch</SPAN>\n    <SPAN style=\"color:#222222\"> (n) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    case</SPAN>\n    <SPAN style=\"color:#222222\"> _: </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Matched'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#D43324\">break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    default</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Did not match'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#D43324\">break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Prints \"Matched\".</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Prints \"Did not match\".</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  With patterns, the identifier \n  <CODE>_</CODE>\n   is treated as a pattern that matches all values, so this prints \"Matched\" twice.\n</P>\n<CODE>_</CODE>\n<P>\n  <STRONG>Logic operators.</STRONG>\n   The logic operators \n  <CODE>&amp;&amp;</CODE>\n   and \n  <CODE>||</CODE>\n   are valid constant expressions and also valid patterns. As a constant expression, they simply evaluate the expression to a boolean and match if the incoming value is equal to that boolean value. So:\n</P>\n<CODE>&amp;&amp;</CODE>\n<CODE>||</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\"> b) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  switch</SPAN>\n    <SPAN style=\"color:#222222\"> (b) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    case</SPAN>\n    <SPAN style=\"color:#11796D\"> true</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; </SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Matched'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#D43324\">break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    default</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Did not match'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#D43324\">break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Prints \"Matched\".</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Prints \"Did not match\".</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>With Dart 3.0, these become patterns. The above example prints \"Did not match\" twice because no boolean value can be both true and false.</P>\n<P>Many of invalid cases can be mechanically changed to something that is valid both in Dart today and valid and means the same in Dart 3.0.</P>\n<P>\n  <STRONG>Parenthesized expressions:</STRONG>\n   Provided the inner expression is one that's not broken in Dart 3.0, just discard the parentheses.\n</P>\n<P>\n  <STRONG>List literals, map literals, set literals, and constant constructor calls:</STRONG>\n   Put \n  <CODE>const</CODE>\n   before the literal or call. This turns it into a constant pattern which preserves the current behavior:\n</P>\n<CODE>const</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">case</SPAN>\n    <SPAN style=\"color:#222222\"> [</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">]:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">case</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n    <SPAN style=\"color:#11796D\">'k'</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#11796D\">'v'</SPAN>\n    <SPAN style=\"color:#222222\">}:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">case</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">}:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">case</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">):</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">case</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> [</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">]:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">case</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n    <SPAN style=\"color:#11796D\">'k'</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#11796D\">'v'</SPAN>\n    <SPAN style=\"color:#222222\">}:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">case</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">}:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">case</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">):</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>Wildcards:</STRONG>\n   Rename the constant from \n  <CODE>_</CODE>\n   to something else. Since the name is private, this can be done locally in the library without affecting other code.\n</P>\n<CODE>_</CODE>\n<P>\n  <STRONG>Everything else:</STRONG>\n   For any other invalid expression, you have to hoist the expression out into a new named constant. For example, if you have code like this:\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">switch</SPAN>\n    <SPAN style=\"color:#222222\"> (n) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 1</SPAN>\n    <SPAN style=\"color:#222222\"> + </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">: ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>It can be fixed by changing it to:</P>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> three = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\"> + </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">switch</SPAN>\n    <SPAN style=\"color:#222222\"> (n) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\"> case</SPAN>\n    <SPAN style=\"color:#222222\"> three: ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invalid_runtime_check_with_js_interop_types",
        "name": "Invalid runtime check with js interop types",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   use \n  <CODE>is</CODE>\n   checks where the type is a JS interop type.\n</P>\n<CODE>is</CODE>\n<P>\n  <STRONG>DON'T</STRONG>\n   use \n  <CODE>is</CODE>\n   checks where the type is a generic Dart type that has JS interop type arguments.\n</P>\n<CODE>is</CODE>\n<P>\n  <STRONG>DON'T</STRONG>\n   use \n  <CODE>is</CODE>\n   checks with a JS interop value.\n</P>\n<CODE>is</CODE>\n<P>\n  <CODE>dart:js_interop</CODE>\n   types have runtime types that are different based on whether you are compiling to JS or to Wasm. Therefore, runtime type checks may result in different behavior. Runtime checks also do not necessarily check that a JS interop value is a particular JavaScript type.\n</P>\n<CODE>dart:js_interop</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">extension type</SPAN>\n    <SPAN style=\"color:#0468D7\"> HTMLElement</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">JSObject</SPAN>\n    <SPAN style=\"color:#222222\"> o) {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">extension type</SPAN>\n    <SPAN style=\"color:#0468D7\"> HTMLDivElement</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">JSObject</SPAN>\n    <SPAN style=\"color:#222222\"> o) </SPAN>\n    <SPAN style=\"color:#D43324\">implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> HTMLElement</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> compute</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">JSAny</SPAN>\n    <SPAN style=\"color:#222222\"> a, </SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\"> b, </SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">JSObject</SPAN>\n    <SPAN style=\"color:#222222\">&gt; lo, </SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">&gt; ls, </SPAN>\n    <SPAN style=\"color:#0468D7\">JSObject</SPAN>\n    <SPAN style=\"color:#222222\"> o,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">    HTMLElement</SPAN>\n    <SPAN style=\"color:#222222\"> e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  a is </SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, checking that a JS value is a Dart type</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  b is </SPAN>\n    <SPAN style=\"color:#0468D7\">JSBoolean</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, checking that a Dart value is a JS type</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  a is </SPAN>\n    <SPAN style=\"color:#0468D7\">JSString</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, checking that a JS value is a different JS interop</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">                 // type</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  o is </SPAN>\n    <SPAN style=\"color:#0468D7\">JSNumber</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, checking that a JS value is a different JS interop</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">                 // type</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  lo is </SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">&gt;; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, JS interop type argument and Dart type argument</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">                      // are incompatible</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ls is </SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">JSString</SPAN>\n    <SPAN style=\"color:#222222\">&gt;; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, Dart type argument and JS interop type argument</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">                        // are incompatible</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  lo is </SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">JSArray</SPAN>\n    <SPAN style=\"color:#222222\">&gt;; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, comparing JS interop type argument with</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">                       // different JS interop type argument</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  lo is </SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">JSNumber</SPAN>\n    <SPAN style=\"color:#222222\">&gt;; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, comparing JS interop type argument with</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">                        // different JS interop type argument</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  o is </SPAN>\n    <SPAN style=\"color:#0468D7\">HTMLElement</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, true because both are JSObjects but doesn't check</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">                    // that it's a JS HTMLElement</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  e is </SPAN>\n    <SPAN style=\"color:#0468D7\">HTMLDivElement</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, true because both are JSObjects but doesn't</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">                       // check that it's a JS HTMLDivElement</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  Prefer using JS interop helpers like \n  <CODE>isA</CODE>\n   from \n  <CODE>dart:js_interop</CODE>\n   to check the underlying type of JS interop values.\n</P>\n<CODE>isA</CODE>\n<CODE>dart:js_interop</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">extension type</SPAN>\n    <SPAN style=\"color:#0468D7\"> HTMLElement</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">JSObject</SPAN>\n    <SPAN style=\"color:#222222\"> o) </SPAN>\n    <SPAN style=\"color:#D43324\">implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> JSObject</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">extension type</SPAN>\n    <SPAN style=\"color:#0468D7\"> HTMLDivElement</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">JSObject</SPAN>\n    <SPAN style=\"color:#222222\"> o) </SPAN>\n    <SPAN style=\"color:#D43324\">implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> HTMLElement</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> compute</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">JSAny</SPAN>\n    <SPAN style=\"color:#222222\"> a, </SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">JSAny</SPAN>\n    <SPAN style=\"color:#222222\">&gt; l, </SPAN>\n    <SPAN style=\"color:#0468D7\">JSObject</SPAN>\n    <SPAN style=\"color:#222222\"> o, </SPAN>\n    <SPAN style=\"color:#0468D7\">HTMLElement</SPAN>\n    <SPAN style=\"color:#222222\"> e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  a.isA&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">JSString</SPAN>\n    <SPAN style=\"color:#222222\">&gt;; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK, uses JS interop to check it is a JS string</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  l[</SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">].isA&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">JSString</SPAN>\n    <SPAN style=\"color:#222222\">&gt;; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK, uses JS interop to check it is a JS string</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  o.</SPAN>\n    <SPAN style=\"color:#6200EE\">isA</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">HTMLElement</SPAN>\n    <SPAN style=\"color:#222222\">&gt;(); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK, uses JS interop to check `o` is an HTMLElement</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  e.</SPAN>\n    <SPAN style=\"color:#6200EE\">isA</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">HTMLDivElement</SPAN>\n    <SPAN style=\"color:#222222\">&gt;(); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK, uses JS interop to check `e` is an</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">                           // HTMLDivElement</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>DON'T</STRONG>\n   use \n  <CODE>as</CODE>\n   to cast a JS interop value to an unrelated Dart type or an unrelated Dart value to a JS interop type.\n</P>\n<CODE>as</CODE>\n<P>\n  <STRONG>DON'T</STRONG>\n   use \n  <CODE>as</CODE>\n   to cast a JS interop value to a JS interop type represented by an incompatible \n  <CODE>dart:js_interop</CODE>\n   type.\n</P>\n<CODE>as</CODE>\n<CODE>dart:js_interop</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">extension type</SPAN>\n    <SPAN style=\"color:#0468D7\"> Window</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">JSObject</SPAN>\n    <SPAN style=\"color:#222222\"> o) {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> compute</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> s, </SPAN>\n    <SPAN style=\"color:#0468D7\">JSBoolean</SPAN>\n    <SPAN style=\"color:#222222\"> b, </SPAN>\n    <SPAN style=\"color:#0468D7\">Window</SPAN>\n    <SPAN style=\"color:#222222\"> w, </SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">&gt; l,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">    List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">JSObject</SPAN>\n    <SPAN style=\"color:#222222\">&gt; lo) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  s </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> JSString</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, casting Dart type to JS interop type</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  b </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> bool</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, casting JS interop type to Dart type</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  b </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> JSNumber</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, JSBoolean and JSNumber are incompatible</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  b </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> Window</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, JSBoolean and JSObject are incompatible</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  w </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> JSBoolean</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, JSObject and JSBoolean are incompatible</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  l </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">JSString</SPAN>\n    <SPAN style=\"color:#222222\">&gt;; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, casting Dart value with Dart type argument to</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">                       // Dart type with JS interop type argument</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  lo </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">&gt;; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, casting Dart value with JS interop type argument</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">                      // to Dart type with Dart type argument</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  lo </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">JSBoolean</SPAN>\n    <SPAN style=\"color:#222222\">&gt;; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT, casting Dart value with JS interop type</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">                         // argument to Dart type with incompatible JS interop</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">                         // type argument</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  Prefer using \n  <CODE>dart:js_interop</CODE>\n   conversion methods to convert a JS interop value to a Dart value and vice versa.\n</P>\n<CODE>dart:js_interop</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">extension type</SPAN>\n    <SPAN style=\"color:#0468D7\"> Window</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">JSObject</SPAN>\n    <SPAN style=\"color:#222222\"> o) {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">extension type</SPAN>\n    <SPAN style=\"color:#0468D7\"> Document</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">JSObject</SPAN>\n    <SPAN style=\"color:#222222\"> o) {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> compute</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> s, </SPAN>\n    <SPAN style=\"color:#0468D7\">JSBoolean</SPAN>\n    <SPAN style=\"color:#222222\"> b, </SPAN>\n    <SPAN style=\"color:#0468D7\">Window</SPAN>\n    <SPAN style=\"color:#222222\"> w, </SPAN>\n    <SPAN style=\"color:#0468D7\">JSArray</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">JSString</SPAN>\n    <SPAN style=\"color:#222222\">&gt; a,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">    List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">&gt; ls, </SPAN>\n    <SPAN style=\"color:#0468D7\">JSObject</SPAN>\n    <SPAN style=\"color:#222222\"> o, </SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">JSAny</SPAN>\n    <SPAN style=\"color:#222222\">&gt; la) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  s.toJS; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK, converts the Dart type to a JS type</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  b.toDart; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK, converts the JS type to a Dart type</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  a.toDart; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK, converts the JS type to a Dart type</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  w </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> Document</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK, but no runtime check that `w` is a JS Document</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ls.</SPAN>\n    <SPAN style=\"color:#6200EE\">map</SPAN>\n    <SPAN style=\"color:#222222\">((e) =&gt; e.toJS).</SPAN>\n    <SPAN style=\"color:#6200EE\">toList</SPAN>\n    <SPAN style=\"color:#222222\">(); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK, converts the Dart types to JS types</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  o </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> JSArray</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">JSString</SPAN>\n    <SPAN style=\"color:#222222\">&gt;; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK, JSObject and JSArray are compatible</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  la </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">JSString</SPAN>\n    <SPAN style=\"color:#222222\">&gt;; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK, JSAny and JSString are compatible</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  (o </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> Object</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> JSObject</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK, Object is a supertype of JSAny</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invariant_booleans",
        "name": "Invariant booleans",
        "severity": "MAJOR",
        "description": "<SECTION><P>NOTE: This rule is removed in Dart 3.0.0; it is no longer functional.</P>\n<P>\n  <STRONG>DON'T</STRONG>\n   test for conditions that can be inferred at compile time or test the same condition twice.\n</P>\n<P>\n  Conditional statements using a condition which cannot be anything but \n  <CODE>false</CODE>\n   have the effect of making blocks of code non-functional. If the condition cannot evaluate to anything but \n  <CODE>true</CODE>\n  , the conditional statement is completely redundant, and makes the code less readable. It is quite likely that the code does not match the programmer's intent. Either the condition should be removed or it should be updated so that it does not always evaluate to \n  <CODE>true</CODE>\n   or \n  <CODE>false</CODE>\n   and does not perform redundant tests. This rule will hint to the test conflicting with the linted one.\n</P>\n<CODE>false</CODE>\n<CODE>true</CODE>\n<CODE>true</CODE>\n<CODE>false</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// foo can't be both equal and not equal to bar in the same expression</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\">(foo == bar &amp;&amp; something &amp;&amp; foo != bar) {...}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> compute</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> foo) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (foo == </SPAN>\n    <SPAN style=\"color:#11796D\">4</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    doSomething</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">    // we know foo is equal to 4 at this point, so the next condition is always false</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    if</SPAN>\n    <SPAN style=\"color:#222222\"> (foo &gt; </SPAN>\n    <SPAN style=\"color:#11796D\">4</SPAN>\n    <SPAN style=\"color:#222222\">) {...}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> compute</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\"> foo) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (foo) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  doSomething</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  // foo is always false here</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (foo){...}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> nestedOK</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (foo == bar) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    foo = baz;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    if</SPAN>\n    <SPAN style=\"color:#222222\"> (foo != bar) {...}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> nestedOk2</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (foo == bar) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  foo = baz;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (foo == bar) {...} </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> nestedOk5</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (foo != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    if</SPAN>\n    <SPAN style=\"color:#222222\"> (bar != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      return</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (bar != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">) {...} </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": false
    },
    {
        "key": "iterable_contains_unrelated_type",
        "name": "Iterable contains unrelated type",
        "severity": "MAJOR",
        "description": "<SECTION><P>NOTE: This rule is removed in Dart 3.3.0; it is no longer functional.</P>\n<P>\n  <STRONG>DON'T</STRONG>\n   invoke \n  <CODE>contains</CODE>\n   on \n  <CODE>Iterable</CODE>\n   with an instance of different type than the parameter type.\n</P>\n<CODE>contains</CODE>\n<CODE>Iterable</CODE>\n<P>\n  Doing this will invoke \n  <CODE>==</CODE>\n   on its elements and most likely will return \n  <CODE>false</CODE>\n  .\n</P>\n<CODE>==</CODE>\n<CODE>false</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'1'</SPAN>\n    <SPAN style=\"color:#222222\">)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction3</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'1'</SPAN>\n    <SPAN style=\"color:#222222\">)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction3'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction8</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">DerivedClass2</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">DerivedClass2</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  DerivedClass3</SPAN>\n    <SPAN style=\"color:#222222\"> instance;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(instance)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction8'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> SomeIterable</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">E</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#D43324\">implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> Iterable</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">E</SPAN>\n    <SPAN style=\"color:#222222\">&gt; {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyClass</SPAN>\n    <SPAN style=\"color:#D43324\"> implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> SomeIterable</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#6200EE\"> badMethod</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> thing) =&gt; </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(thing); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction10</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> list = [];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction10'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction1</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction1'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction4</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction4'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction5</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">ClassBase</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">ClassBase</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  DerivedClass1</SPAN>\n    <SPAN style=\"color:#222222\"> instance;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(instance)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction5'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> DerivedClass1</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction6</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Mixin</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Mixin</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  DerivedClass2</SPAN>\n    <SPAN style=\"color:#222222\"> instance;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(instance)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction6'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Mixin</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> DerivedClass2</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#D43324\"> with</SPAN>\n    <SPAN style=\"color:#0468D7\"> Mixin</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction7</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Mixin</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Mixin</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  DerivedClass3</SPAN>\n    <SPAN style=\"color:#222222\"> instance;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(instance)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction7'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Mixin</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> DerivedClass3</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#D43324\"> implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> Mixin</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "BUG",
        "debt": "1min",
        "active": false
    },
    {
        "key": "join_return_with_assignment",
        "name": "Join return with assignment",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   join return statement with assignment when possible.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  B</SPAN>\n    <SPAN style=\"color:#222222\"> _lazyInstance;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> instance {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    _lazyInstance ??= </SPAN>\n    <SPAN style=\"color:#0468D7\">B</SPAN>\n    <SPAN style=\"color:#222222\">(); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#222222\"> _lazyInstance;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  B</SPAN>\n    <SPAN style=\"color:#222222\"> _lazyInstance;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> instance =&gt; _lazyInstance ??= </SPAN>\n    <SPAN style=\"color:#0468D7\">B</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "leading_newlines_in_multiline_strings",
        "name": "Leading newlines in multiline strings",
        "severity": "MINOR",
        "description": "<SECTION><P>Multiline strings are easier to read when they start with a newline (a newline starting a multiline string is ignored).</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> s1 = </SPAN>\n    <SPAN style=\"color:#11796D\">'''{</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">  \"a\": 1,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">  \"b\": 2</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">}'''</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> s1 = </SPAN>\n    <SPAN style=\"color:#11796D\">'''</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">{</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">  \"a\": 1,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">  \"b\": 2</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">}'''</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> s2 = </SPAN>\n    <SPAN style=\"color:#11796D\">'''This one-liner multiline string is ok. It usually allows to escape both ' and \" in the string.'''</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "library_annotations",
        "name": "Library annotations",
        "severity": "MINOR",
        "description": "<SECTION><P>Attach library annotations to library directives, rather than some other library-level element.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@TestOn</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'browser'</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:test/test.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> main</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@TestOn</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'browser'</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:test/test.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> main</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>NOTE:</STRONG>\n   An unnamed library, like \n  <CODE>library;</CODE>\n   above, is only supported in Dart 2.19 and later. Code which might run in earlier versions of Dart will need to provide a name in the \n  <CODE>library</CODE>\n   directive.\n</P>\n<CODE>library;</CODE>\n<CODE>library</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "library_names",
        "name": "Library names",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   name libraries using \n  <CODE>lowercase_with_underscores</CODE>\n  .\n</P>\n<CODE>lowercase_with_underscores</CODE>\n<P>Some file systems are not case-sensitive, so many projects require filenames to be all lowercase. Using a separating character allows names to still be readable in that form. Using underscores as the separator ensures that the name is still a valid Dart identifier, which may be helpful if the language later supports symbolic imports.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\"> peg-parser;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\"> peg_parser;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  The lint \n  <CODE>file_names</CODE>\n   can be used to enforce the same kind of naming on the file.\n</P>\n<CODE>file_names</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "library_prefixes",
        "name": "Library prefixes",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use \n  <CODE>lowercase_with_underscores</CODE>\n   when specifying a library prefix.\n</P>\n<CODE>lowercase_with_underscores</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'dart:math'</SPAN>\n    <SPAN style=\"color:#D43324\"> as</SPAN>\n    <SPAN style=\"color:#222222\"> Math;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'dart:json'</SPAN>\n    <SPAN style=\"color:#D43324\"> as</SPAN>\n    <SPAN style=\"color:#222222\"> JSON;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:js/js.dart'</SPAN>\n    <SPAN style=\"color:#D43324\"> as</SPAN>\n    <SPAN style=\"color:#222222\"> JS;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:javascript_utils/javascript_utils.dart'</SPAN>\n    <SPAN style=\"color:#D43324\"> as</SPAN>\n    <SPAN style=\"color:#222222\"> jsUtils;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'dart:math'</SPAN>\n    <SPAN style=\"color:#D43324\"> as</SPAN>\n    <SPAN style=\"color:#222222\"> math;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'dart:json'</SPAN>\n    <SPAN style=\"color:#D43324\"> as</SPAN>\n    <SPAN style=\"color:#222222\"> json;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:js/js.dart'</SPAN>\n    <SPAN style=\"color:#D43324\"> as</SPAN>\n    <SPAN style=\"color:#222222\"> js;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:javascript_utils/javascript_utils.dart'</SPAN>\n    <SPAN style=\"color:#D43324\"> as</SPAN>\n    <SPAN style=\"color:#222222\"> js_utils;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "library_private_types_in_public_api",
        "name": "Library private types in public api",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   using library private types in public APIs.\n</P>\n<P>For the purposes of this lint, a public API is considered to be any top-level or member declaration unless the declaration is library private or contained in a declaration that's library private. The following uses of types are checked:</P>\n<CODE>typedef F = _Private Function();</CODE>\n<CODE>on</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">_Private</SPAN>\n    <SPAN style=\"color:#222222\"> p) { ... }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> _Private</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> s) { ... }</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "15min",
        "active": true
    },
    {
        "key": "lines_longer_than_80_chars",
        "name": "Lines longer than 80 chars",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   lines longer than 80 characters\n</P>\n<P>Readability studies show that long lines of text are harder to read because your eye has to travel farther when moving to the beginning of the next line. This is why newspapers and magazines use multiple columns of text.</P>\n<P>\n  If you really find yourself wanting lines longer than 80 characters, our experience is that your code is likely too verbose and could be a little more compact. The main offender is usually \n  <CODE>VeryLongCamelCaseClassNames</CODE>\n  . Ask yourself, \u201cDoes each word in that type name tell me something critical or prevent a name collision?\u201d If not, consider omitting it.\n</P>\n<CODE>VeryLongCamelCaseClassNames</CODE>\n<P>\n  Note that \n  <CODE>dart format</CODE>\n   does 99% of this for you, but the last 1% is you. It does not split long string literals to fit in 80 columns, so you have to do that manually.\n</P>\n<CODE>dart format</CODE>\n<P>We make an exception for URIs and file paths. When those occur in comments or strings (usually in imports and exports), they may remain on a single line even if they go over the line limit. This makes it easier to search source files for a given path.</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "list_remove_unrelated_type",
        "name": "List remove unrelated type",
        "severity": "MAJOR",
        "description": "<SECTION><P>NOTE: This rule is removed in Dart 3.3.0; it is no longer functional.</P>\n<P>\n  <STRONG>DON'T</STRONG>\n   invoke \n  <CODE>remove</CODE>\n   on \n  <CODE>List</CODE>\n   with an instance of different type than the parameter type.\n</P>\n<CODE>remove</CODE>\n<CODE>List</CODE>\n<P>\n  Doing this will invoke \n  <CODE>==</CODE>\n   on its elements and most likely will return \n  <CODE>false</CODE>\n  .\n</P>\n<CODE>==</CODE>\n<CODE>false</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">remove</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'1'</SPAN>\n    <SPAN style=\"color:#222222\">)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction3</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">remove</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'1'</SPAN>\n    <SPAN style=\"color:#222222\">)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction3'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction8</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">DerivedClass2</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">DerivedClass2</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  DerivedClass3</SPAN>\n    <SPAN style=\"color:#222222\"> instance;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">remove</SPAN>\n    <SPAN style=\"color:#222222\">(instance)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction8'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> SomeList</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">E</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#D43324\">implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">E</SPAN>\n    <SPAN style=\"color:#222222\">&gt; {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyClass</SPAN>\n    <SPAN style=\"color:#D43324\"> implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> SomeList</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#6200EE\"> badMethod</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> thing) =&gt; </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">remove</SPAN>\n    <SPAN style=\"color:#222222\">(thing); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction10</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> list = [];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">remove</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction10'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction1</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">remove</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction1'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction4</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">remove</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction4'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction5</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">ClassBase</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">ClassBase</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  DerivedClass1</SPAN>\n    <SPAN style=\"color:#222222\"> instance;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">remove</SPAN>\n    <SPAN style=\"color:#222222\">(instance)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction5'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> DerivedClass1</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction6</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Mixin</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Mixin</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  DerivedClass2</SPAN>\n    <SPAN style=\"color:#222222\"> instance;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">remove</SPAN>\n    <SPAN style=\"color:#222222\">(instance)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction6'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Mixin</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> DerivedClass2</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#D43324\"> with</SPAN>\n    <SPAN style=\"color:#0468D7\"> Mixin</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction7</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Mixin</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Mixin</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  DerivedClass3</SPAN>\n    <SPAN style=\"color:#222222\"> instance;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (list.</SPAN>\n    <SPAN style=\"color:#6200EE\">remove</SPAN>\n    <SPAN style=\"color:#222222\">(instance)) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction7'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Mixin</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> DerivedClass3</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#D43324\"> implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> Mixin</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "BUG",
        "debt": "1min",
        "active": false
    },
    {
        "key": "literal_only_boolean_expressions",
        "name": "Literal only boolean expressions",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   test for conditions composed only by literals, since the value can be inferred at compile time.\n</P>\n<P>\n  Conditional statements using a condition which cannot be anything but FALSE have the effect of making blocks of code non-functional. If the condition cannot evaluate to anything but \n  <CODE>true</CODE>\n  , the conditional statement is completely redundant, and makes the code less readable. It is quite likely that the code does not match the programmer's intent. Either the condition should be removed or it should be updated so that it does not always evaluate to \n  <CODE>true</CODE>\n   or \n  <CODE>false</CODE>\n  .\n</P>\n<CODE>true</CODE>\n<CODE>true</CODE>\n<CODE>false</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> bad</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">) {} </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> bad</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\"> != </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">) {} </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> bad</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\"> != </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">) {} </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> bad</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\"> &lt; </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">) {} </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> bad</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; </SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n    <SPAN style=\"color:#222222\">) {} </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> bad</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\"> != </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">) {} </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> bad</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\"> != </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\"> || </SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\"> &lt; </SPAN>\n    <SPAN style=\"color:#11796D\">4</SPAN>\n    <SPAN style=\"color:#222222\">) {} </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> bad</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\"> != </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\"> || </SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\"> &lt; </SPAN>\n    <SPAN style=\"color:#11796D\">4</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">) {} </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>NOTE:</STRONG>\n   that an exception is made for the common \n  <CODE>while (true) { }</CODE>\n   idiom, which is often reasonably preferred to the equivalent \n  <CODE>for (;;)</CODE>\n  .\n</P>\n<CODE>while (true) { }</CODE>\n<CODE>for (;;)</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> good</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  while</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">    // Do stuff.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "matching_super_parameters",
        "name": "Matching super parameters",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use super parameter names that match their corresponding super constructor's parameter names.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Rectangle</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> width;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> height;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\"/>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Rectangle</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.width, </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.height);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> ColoredRectangle</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> Rectangle</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> Color</SPAN>\n    <SPAN style=\"color:#222222\"> color;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\"/>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  ColoredRectangle</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    this</SPAN>\n    <SPAN style=\"color:#222222\">.color,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    super</SPAN>\n    <SPAN style=\"color:#222222\">.height, </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Bad, actually corresponds to the `width` parameter.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    super</SPAN>\n    <SPAN style=\"color:#222222\">.width, </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Bad, actually corresponds to the `height` parameter.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ); </SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Rectangle</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> width;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> height;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\"/>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Rectangle</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.width, </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.height);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> ColoredRectangle</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> Rectangle</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> Color</SPAN>\n    <SPAN style=\"color:#222222\"> color;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\"/>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  ColoredRectangle</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    this</SPAN>\n    <SPAN style=\"color:#222222\">.color,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    super</SPAN>\n    <SPAN style=\"color:#222222\">.width,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    super</SPAN>\n    <SPAN style=\"color:#222222\">.height, </SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ); </SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "missing_code_block_language_in_doc_comment",
        "name": "Missing code block language in doc comment",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   specify the language used in the code block of a doc comment.\n</P>\n<P>\n  To enable proper syntax highlighting of Markdown code blocks, \n  <A href=\"https://dart.dev/tools/dart-doc\">\n    <CODE>dart doc</CODE>\n  </A>\n   strongly recommends code blocks to specify the language used after the initial code fence.\n</P>\n<CODE>dart doc</CODE>\n<P>\n  See \n  <A href=\"https://github.com/highlightjs/highlight.js/blob/main/SUPPORTED_LANGUAGES.md\">highlight.js</A>\n   for the list of languages supported by \n  <CODE>dart doc</CODE>\n  . To disable syntax highlighting or if no language is suitable, you can specify \n  <CODE>none</CODE>\n   as the language.\n</P>\n<CODE>dart doc</CODE>\n<CODE>none</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// ```</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">///</SPAN>\n    <SPAN style=\"color:#222222\"> void main() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">///</SPAN>\n    <SPAN style=\"color:#6E6E70\"> ```</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// ```dart</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">///</SPAN>\n    <SPAN style=\"color:#222222\"> void main() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">///</SPAN>\n    <SPAN style=\"color:#6E6E70\"> ```</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "missing_whitespace_between_adjacent_strings",
        "name": "Missing whitespace between adjacent strings",
        "severity": "MINOR",
        "description": "<SECTION><P>Add a trailing whitespace to prevent missing whitespace between adjacent strings.</P>\n<P>With long text split across adjacent strings it's easy to forget a whitespace between strings.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> s =</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">  'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed'</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">  'do eiusmod tempor incididunt ut labore et dolore magna'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> s =</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">  'Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed '</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">  'do eiusmod tempor incididunt ut labore et dolore magna'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "no_adjacent_strings_in_list",
        "name": "No adjacent strings in list",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   use adjacent strings in a list.\n</P>\n<P>This can indicate a forgotten comma.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">  'a'</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">  'b'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">  'c'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">];</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">&gt; list = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">  'a'</SPAN>\n    <SPAN style=\"color:#222222\"> +</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">  'b'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">  'c'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">];</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "no_default_cases",
        "name": "No default cases",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  Switches on enums and enum-like classes should not use a \n  <CODE>default</CODE>\n   clause.\n</P>\n<CODE>default</CODE>\n<P>Enum-like classes are defined as concrete (non-abstract) classes that have:</P>\n<P>\n  <STRONG>DO</STRONG>\n   define default behavior outside switch statements.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  switch</SPAN>\n    <SPAN style=\"color:#222222\"> (testEnum) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    case</SPAN>\n    <SPAN style=\"color:#0468D7\"> TestEnum</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      return</SPAN>\n    <SPAN style=\"color:#11796D\"> '123'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    case</SPAN>\n    <SPAN style=\"color:#0468D7\"> TestEnum</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#0468D7\">B</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      return</SPAN>\n    <SPAN style=\"color:#11796D\"> 'abc'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    default</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      return</SPAN>\n    <SPAN style=\"color:#11796D\"> null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  switch</SPAN>\n    <SPAN style=\"color:#222222\"> (testEnum) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    case</SPAN>\n    <SPAN style=\"color:#0468D7\"> TestEnum</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      return</SPAN>\n    <SPAN style=\"color:#11796D\"> '123'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    case</SPAN>\n    <SPAN style=\"color:#0468D7\"> TestEnum</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#0468D7\">B</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      return</SPAN>\n    <SPAN style=\"color:#11796D\"> 'abc'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  // Default here.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#11796D\"> null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "no_duplicate_case_values",
        "name": "No duplicate case values",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   use more than one case with same value.\n</P>\n<P>This is usually a typo or changed value of constant.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">switch</SPAN>\n    <SPAN style=\"color:#222222\"> (v) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 1</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 2</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 2</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">switch</SPAN>\n    <SPAN style=\"color:#222222\"> (v) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 2</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>NOTE: this lint only reports duplicate cases in libraries opted in to Dart 2.19 and below. In Dart 3.0 and after, duplicate cases are reported as dead code by the analyzer.</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "no_leading_underscores_for_library_prefixes",
        "name": "No leading underscores for library prefixes",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   use a leading underscore for library prefixes. There is no concept of \"private\" for library prefixes. When one of those has a name that starts with an underscore, it sends a confusing signal to the reader. To avoid that, don't use leading underscores in those names.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'dart:core'</SPAN>\n    <SPAN style=\"color:#D43324\"> as</SPAN>\n    <SPAN style=\"color:#222222\"> _core;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'dart:core'</SPAN>\n    <SPAN style=\"color:#D43324\"> as</SPAN>\n    <SPAN style=\"color:#222222\"> core;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "no_leading_underscores_for_local_identifiers",
        "name": "No leading underscores for local identifiers",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   use a leading underscore for identifiers that aren't private. Dart uses a leading underscore in an identifier to mark members and top-level declarations as private. This trains users to associate a leading underscore with one of those kinds of declarations. They see \n  <CODE>_</CODE>\n   and think \"private\". There is no concept of \"private\" for local variables or parameters. When one of those has a name that starts with an underscore, it sends a confusing signal to the reader. To avoid that, don't use leading underscores in those names.\n</P>\n<CODE>_</CODE>\n<P>\n  <STRONG>EXCEPTION:</STRONG>\n  : An unused parameter can be named \n  <CODE>_</CODE>\n  , \n  <CODE>__</CODE>\n  , \n  <CODE>___</CODE>\n  , etc. This is common practice in callbacks where you are passed a value but you don't need to use it. Giving it a name that consists solely of underscores is the idiomatic way to indicate that the value isn't used.\n</P>\n<CODE>_</CODE>\n<CODE>__</CODE>\n<CODE>___</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> _name) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> _size = _name.length;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> name) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> size = name.length;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>OK:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">[</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">].</SPAN>\n    <SPAN style=\"color:#6200EE\">map</SPAN>\n    <SPAN style=\"color:#222222\">((_) =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Hello'</SPAN>\n    <SPAN style=\"color:#222222\">));</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "no_literal_bool_comparisons",
        "name": "No literal bool comparisons",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/usage#dont-use-true-or-false-in-equality-operations\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>DON'T</STRONG>\n   use \n  <CODE>true</CODE>\n   or \n  <CODE>false</CODE>\n   in equality operations.\n</P>\n<CODE>true</CODE>\n<CODE>false</CODE>\n<P>\n  This lint applies only if the expression is of a non-nullable \n  <CODE>bool</CODE>\n   type.\n</P>\n<CODE>bool</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (someBool == </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'true!'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">while</SPAN>\n    <SPAN style=\"color:#222222\"> (someBool == </SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'still false!'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (someBool) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'true!'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">while</SPAN>\n    <SPAN style=\"color:#222222\"> (!someBool) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'still false!'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "no_logic_in_create_state",
        "name": "No logic in create state",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   put any logic in \n  <CODE>createState()</CODE>\n  .\n</P>\n<CODE>createState()</CODE>\n<P>\n  Implementations of \n  <CODE>createState()</CODE>\n   should return a new instance of a State object and do nothing more. Since state access is preferred via the \n  <CODE>widget</CODE>\n   field, passing data to \n  <CODE>State</CODE>\n   objects using custom constructor parameters should also be avoided and so further, the State constructor is required to be passed no arguments.\n</P>\n<CODE>createState()</CODE>\n<CODE>widget</CODE>\n<CODE>State</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">MyState</SPAN>\n    <SPAN style=\"color:#222222\"> global;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyStateful</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> StatefulWidget</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  MyState</SPAN>\n    <SPAN style=\"color:#6200EE\"> createState</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    global = </SPAN>\n    <SPAN style=\"color:#0468D7\">MyState</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#222222\"> global;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  } </SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyStateful</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> StatefulWidget</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  MyState</SPAN>\n    <SPAN style=\"color:#6200EE\"> createState</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#0468D7\">MyState</SPAN>\n    <SPAN style=\"color:#222222\">()..field = </SPAN>\n    <SPAN style=\"color:#11796D\">42</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyStateful</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> StatefulWidget</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  MyState</SPAN>\n    <SPAN style=\"color:#6200EE\"> createState</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#0468D7\">MyState</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">42</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyStateful</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> StatefulWidget</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  MyState</SPAN>\n    <SPAN style=\"color:#6200EE\"> createState</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyState</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "no_runtimeType_toString",
        "name": "No runtimeType toString",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  Calling \n  <CODE>toString</CODE>\n   on a runtime type is a non-trivial operation that can negatively impact performance. It's better to avoid it.\n</P>\n<CODE>toString</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  String</SPAN>\n    <SPAN style=\"color:#6200EE\"> toString</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#11796D\">$</SPAN>\n    <SPAN style=\"color:#222222\">runtimeType</SPAN>\n    <SPAN style=\"color:#11796D\">()'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  String</SPAN>\n    <SPAN style=\"color:#6200EE\"> toString</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">'A()'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>This lint has some exceptions where performance is not a problem or where real type information is more important than performance:</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "no_self_assignments",
        "name": "No self assignments",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   assign a variable to itself. Usually this is a mistake.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  C</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    x = x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  C</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> x) : x = x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  C</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    this</SPAN>\n    <SPAN style=\"color:#222222\">.x = x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> _x = </SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> x =&gt; _x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  set</SPAN>\n    <SPAN style=\"color:#6200EE\"> x</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    _x = x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    _customUpdateLogic</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> _customUpdateLogic</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'updated'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> example</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    x = x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> _x = </SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> x =&gt; _x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  set</SPAN>\n    <SPAN style=\"color:#6200EE\"> x</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    _x = x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    _customUpdateLogic</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> _customUpdateLogic</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'updated'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> example</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    _customUpdateLogic</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> x = </SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> update</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">C</SPAN>\n    <SPAN style=\"color:#222222\"> other) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    this</SPAN>\n    <SPAN style=\"color:#222222\">.x = </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> x = </SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> update</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">C</SPAN>\n    <SPAN style=\"color:#222222\"> other) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    this</SPAN>\n    <SPAN style=\"color:#222222\">.x = other.x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "no_wildcard_variable_uses",
        "name": "No wildcard variable uses",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   use wildcard parameters or variables.\n</P>\n<P>\n  Wildcard parameters and local variables (e.g. underscore-only names like \n  <CODE>_</CODE>\n  , \n  <CODE>__</CODE>\n  , \n  <CODE>___</CODE>\n  , etc.) will become non-binding in a future version of the Dart language. Any existing code that uses wildcard parameters or variables will break. In anticipation of this change, and to make adoption easier, this lint disallows wildcard and variable parameter uses.\n</P>\n<CODE>_</CODE>\n<CODE>__</CODE>\n<CODE>___</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> _ = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(_); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> __) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(__); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT multiple underscores too</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> _ </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> [</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">]) count++;</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> [a, _, b, _] = [</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">4</SPAN>\n    <SPAN style=\"color:#222222\">];</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "non_constant_identifier_names",
        "name": "Non constant identifier names",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   name non-constant identifiers using lowerCamelCase.\n</P>\n<P>Class members, top-level definitions, variables, parameters, named parameters and named constructors should capitalize the first letter of each word except the first word, and use no separators.</P>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> item;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">HttpRequest</SPAN>\n    <SPAN style=\"color:#222222\"> httpRequest;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">align</SPAN>\n    <SPAN style=\"color:#222222\">(clearItems) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  // ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "noop_primitive_operations",
        "name": "Noop primitive operations",
        "severity": "MAJOR",
        "description": "<SECTION><P>Some operations on primitive types are idempotent and can be removed.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">doubleValue.</SPAN>\n    <SPAN style=\"color:#6200EE\">toDouble</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">intValue.</SPAN>\n    <SPAN style=\"color:#6200EE\">toInt</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">intValue.</SPAN>\n    <SPAN style=\"color:#6200EE\">round</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">intValue.</SPAN>\n    <SPAN style=\"color:#6200EE\">ceil</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">intValue.</SPAN>\n    <SPAN style=\"color:#6200EE\">floor</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">intValue.</SPAN>\n    <SPAN style=\"color:#6200EE\">truncate</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">string.</SPAN>\n    <SPAN style=\"color:#6200EE\">toString</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">string = </SPAN>\n    <SPAN style=\"color:#11796D\">'hello</SPAN>\n    <SPAN style=\"color:#222222\">\\n</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    ''</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'world'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">'string with </SPAN>\n    <SPAN style=\"color:#11796D\">${</SPAN>\n    <SPAN style=\"color:#222222\">x</SPAN>\n    <SPAN style=\"color:#11796D\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">toString</SPAN>\n    <SPAN style=\"color:#11796D\">()}</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>Note that the empty string literals at the beginning or end of a string are allowed, as they are typically used to format the string literal across multiple lines:</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">string = </SPAN>\n    <SPAN style=\"color:#11796D\">''</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'hello</SPAN>\n    <SPAN style=\"color:#222222\">\\n</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'world</SPAN>\n    <SPAN style=\"color:#222222\">\\n</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">string = </SPAN>\n    <SPAN style=\"color:#11796D\">'hello</SPAN>\n    <SPAN style=\"color:#222222\">\\n</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'world</SPAN>\n    <SPAN style=\"color:#222222\">\\n</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    ''</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "null_check_on_nullable_type_parameter",
        "name": "Null check on nullable type parameter",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   use \n  <CODE>null</CODE>\n   check on a potentially nullable type parameter.\n</P>\n<CODE>null</CODE>\n<P>\n  Given a generic type parameter \n  <CODE>T</CODE>\n   which has a nullable bound (e.g., the default bound of \n  <CODE>Object?</CODE>\n  ), it is very easy to introduce erroneous \n  <CODE>null</CODE>\n   checks when working with a variable of type \n  <CODE>T?</CODE>\n  . Specifically, it is not uncommon to have \n  <CODE>T? x;</CODE>\n   and want to assert that \n  <CODE>x</CODE>\n   has been set to a valid value of type \n  <CODE>T</CODE>\n  . A common mistake is to do so using \n  <CODE>x!</CODE>\n  . This is almost always incorrect, since if \n  <CODE>T</CODE>\n   is a nullable type, \n  <CODE>x</CODE>\n   may validly hold \n  <CODE>null</CODE>\n   as a value of type \n  <CODE>T</CODE>\n  .\n</P>\n<CODE>T</CODE>\n<CODE>Object?</CODE>\n<CODE>null</CODE>\n<CODE>T?</CODE>\n<CODE>T? x;</CODE>\n<CODE>x</CODE>\n<CODE>T</CODE>\n<CODE>x!</CODE>\n<CODE>T</CODE>\n<CODE>x</CODE>\n<CODE>null</CODE>\n<CODE>T</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#6200EE\"> run</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt;(</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#6200EE\"> callback</SPAN>\n    <SPAN style=\"color:#222222\">()) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  T</SPAN>\n    <SPAN style=\"color:#222222\">? result;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  (() { result = </SPAN>\n    <SPAN style=\"color:#6200EE\">callback</SPAN>\n    <SPAN style=\"color:#222222\">(); })();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> result!;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#6200EE\"> run</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt;(</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#6200EE\"> callback</SPAN>\n    <SPAN style=\"color:#222222\">()) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  T</SPAN>\n    <SPAN style=\"color:#222222\">? result;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  (() { result = </SPAN>\n    <SPAN style=\"color:#6200EE\">callback</SPAN>\n    <SPAN style=\"color:#222222\">(); })();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> result </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> T</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "null_closures",
        "name": "Null closures",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   pass \n  <CODE>null</CODE>\n   as an argument where a closure is expected.\n</P>\n<CODE>null</CODE>\n<P>\n  Often a closure that is passed to a method will only be called conditionally, so that tests and \"happy path\" production calls do not reveal that \n  <CODE>null</CODE>\n   will result in an exception being thrown.\n</P>\n<CODE>null</CODE>\n<P>This rule only catches null literals being passed where closures are expected in the following locations:</P>\n<CODE>dart:async</CODE>\n<CODE>Future</CODE>\n<CODE>Future.microtask</CODE>\n<CODE>Future.sync</CODE>\n<CODE>Timer</CODE>\n<CODE>Timer.periodic</CODE>\n<CODE>dart:core</CODE>\n<CODE>List.generate</CODE>\n<CODE>dart:async</CODE>\n<CODE>scheduleMicrotask</CODE>\n<CODE>Future.doWhile</CODE>\n<CODE>Future.forEach</CODE>\n<CODE>Future.wait</CODE>\n<CODE>cleanup</CODE>\n<CODE>Timer.run</CODE>\n<CODE>dart:async</CODE>\n<CODE>Future.then</CODE>\n<CODE>Future.complete</CODE>\n<CODE>dart:collection</CODE>\n<CODE>Queue.removeWhere</CODE>\n<CODE>Iterable.firstWhere</CODE>\n<CODE>orElse</CODE>\n<CODE>Iterable.forEach</CODE>\n<CODE>Iterable.fold</CODE>\n<CODE>Iterable.lastWhere</CODE>\n<CODE>orElse</CODE>\n<CODE>Iterable.map</CODE>\n<CODE>Iterable.reduce</CODE>\n<CODE>Iterable.singleWhere</CODE>\n<CODE>orElse</CODE>\n<CODE>Iterable.skipWhile</CODE>\n<CODE>Iterable.takeWhile</CODE>\n<CODE>Iterable.where</CODE>\n<CODE>List.removeWhere</CODE>\n<CODE>List.retainWhere</CODE>\n<CODE>String.replaceAllMapped</CODE>\n<CODE>String.replaceFirstMapped</CODE>\n<CODE>String.splitMapJoin</CODE>\n<CODE>onMatch</CODE>\n<CODE>onNonMatch</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">[</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">].</SPAN>\n    <SPAN style=\"color:#6200EE\">firstWhere</SPAN>\n    <SPAN style=\"color:#222222\">((e) =&gt; e.isOdd, orElse: </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">[</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">].</SPAN>\n    <SPAN style=\"color:#6200EE\">firstWhere</SPAN>\n    <SPAN style=\"color:#222222\">((e) =&gt; e.isOdd, orElse: () =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "omit_local_variable_types",
        "name": "Omit local variable types",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   redundantly type annotate initialized local variables.\n</P>\n<P>\n  Local variables, especially in modern code where functions tend to be small, have very little scope. Omitting the type focuses the reader's attention on the more important \n  <EM>name</EM>\n   of the variable and its initialized value.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt;&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">possibleDesserts</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Set</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt; pantry) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt;&gt; desserts = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt;&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#0468D7\"> List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt; recipe </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> cookbook) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    if</SPAN>\n    <SPAN style=\"color:#222222\"> (pantry.</SPAN>\n    <SPAN style=\"color:#6200EE\">containsAll</SPAN>\n    <SPAN style=\"color:#222222\">(recipe)) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      desserts.</SPAN>\n    <SPAN style=\"color:#6200EE\">add</SPAN>\n    <SPAN style=\"color:#222222\">(recipe);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> desserts;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt;&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">possibleDesserts</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Set</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt; pantry) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> desserts = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt;&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> recipe </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> cookbook) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    if</SPAN>\n    <SPAN style=\"color:#222222\"> (pantry.</SPAN>\n    <SPAN style=\"color:#6200EE\">containsAll</SPAN>\n    <SPAN style=\"color:#222222\">(recipe)) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      desserts.</SPAN>\n    <SPAN style=\"color:#6200EE\">add</SPAN>\n    <SPAN style=\"color:#222222\">(recipe);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> desserts;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>Sometimes the inferred type is not the type you want the variable to have. For example, you may intend to assign values of other types later. In that case, annotate the variable with the type you want.</P>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> build</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">BuildContext</SPAN>\n    <SPAN style=\"color:#222222\"> context) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Widget</SPAN>\n    <SPAN style=\"color:#222222\"> result = </SPAN>\n    <SPAN style=\"color:#0468D7\">Text</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'You won!'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (applyPadding) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    result = </SPAN>\n    <SPAN style=\"color:#0468D7\">Padding</SPAN>\n    <SPAN style=\"color:#222222\">(padding: </SPAN>\n    <SPAN style=\"color:#0468D7\">EdgeInsets</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">all</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">8.0</SPAN>\n    <SPAN style=\"color:#222222\">), child: result);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> result;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "omit_obvious_local_variable_types",
        "name": "Omit obvious local variable types",
        "severity": "MINOR",
        "description": "<SECTION><P>Don't type annotate initialized local variables when the type is obvious.</P>\n<P>\n  Local variables, especially in modern code where functions tend to be small, have very little scope. Omitting the type focuses the reader's attention on the more important \n  <EM>name</EM>\n   of the variable and its initialized value. Hence, local variable type annotations that are obvious should be omitted.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt;&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">possibleDesserts</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Set</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt; pantry) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt;&gt; desserts = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt;&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt; recipe </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> cookbook) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    if</SPAN>\n    <SPAN style=\"color:#222222\"> (pantry.</SPAN>\n    <SPAN style=\"color:#6200EE\">containsAll</SPAN>\n    <SPAN style=\"color:#222222\">(recipe)) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      desserts.</SPAN>\n    <SPAN style=\"color:#6200EE\">add</SPAN>\n    <SPAN style=\"color:#222222\">(recipe);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> desserts;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt;&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">possibleDesserts</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Set</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt; pantry) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> desserts = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt;&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Ingredient</SPAN>\n    <SPAN style=\"color:#222222\">&gt; recipe </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> cookbook) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    if</SPAN>\n    <SPAN style=\"color:#222222\"> (pantry.</SPAN>\n    <SPAN style=\"color:#6200EE\">containsAll</SPAN>\n    <SPAN style=\"color:#222222\">(recipe)) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      desserts.</SPAN>\n    <SPAN style=\"color:#6200EE\">add</SPAN>\n    <SPAN style=\"color:#222222\">(recipe);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> desserts;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>Sometimes the inferred type is not the type you want the variable to have. For example, you may intend to assign values of other types later. You may also wish to write a type annotation explicitly because the type of the initializing expression is non-obvious and it will be helpful for future readers of the code to document this type. Or you may wish to commit to a specific type such that future updates of dependencies (in nearby code, in imports, anywhere) will not silently change the type of that variable, thus introducing compile-time errors or run-time bugs in locations where this variable is used. In those cases, go ahead and annotate the variable with the type you want.</P>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> build</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">BuildContext</SPAN>\n    <SPAN style=\"color:#222222\"> context) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Widget</SPAN>\n    <SPAN style=\"color:#222222\"> result = </SPAN>\n    <SPAN style=\"color:#6200EE\">someGenericFunction</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">42</SPAN>\n    <SPAN style=\"color:#222222\">) ?? </SPAN>\n    <SPAN style=\"color:#0468D7\">Text</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'You won!'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (applyPadding) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    result = </SPAN>\n    <SPAN style=\"color:#0468D7\">Padding</SPAN>\n    <SPAN style=\"color:#222222\">(padding: </SPAN>\n    <SPAN style=\"color:#0468D7\">EdgeInsets</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">all</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">8.0</SPAN>\n    <SPAN style=\"color:#222222\">), child: result);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> result;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>This rule is experimental.</STRONG>\n   It is being evaluated, and it may be changed or removed. Feedback on its behavior is welcome! The main issue is here: https://github.com/dart-lang/linter/issues/3480.\n</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "one_member_abstracts",
        "name": "One member abstracts",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/design#avoid-defining-a-one-member-abstract-class-when-a-simple-function-will-do\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>AVOID</STRONG>\n   defining a one-member abstract class when a simple function will do.\n</P>\n<P>\n  Unlike Java, Dart has first-class functions, closures, and a nice light syntax for using them. If all you need is something like a callback, just use a function. If you're defining a class and it only has a single abstract member with a meaningless name like \n  <CODE>call</CODE>\n   or \n  <CODE>invoke</CODE>\n  , there is a good chance you just want a function.\n</P>\n<CODE>call</CODE>\n<CODE>invoke</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Predicate</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#6200EE\"> test</SPAN>\n    <SPAN style=\"color:#222222\">(item);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">typedef</SPAN>\n    <SPAN style=\"color:#0468D7\"> Predicate</SPAN>\n    <SPAN style=\"color:#222222\"> = </SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#0468D7\"> Function</SPAN>\n    <SPAN style=\"color:#222222\">(item);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "only_throw_errors",
        "name": "Only throw errors",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   throw only instances of classes that extend \n  <CODE>dart.core.Error</CODE>\n   or \n  <CODE>dart.core.Exception</CODE>\n  .\n</P>\n<CODE>dart.core.Error</CODE>\n<CODE>dart.core.Exception</CODE>\n<P>\n  Throwing instances that do not extend \n  <CODE>Error</CODE>\n   or \n  <CODE>Exception</CODE>\n   is a bad practice; doing this is usually a hack for something that should be implemented more thoroughly.\n</P>\n<CODE>Error</CODE>\n<CODE>Exception</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> throwString</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  throw</SPAN>\n    <SPAN style=\"color:#11796D\"> 'hello world!'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> throwArgumentError</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Error</SPAN>\n    <SPAN style=\"color:#222222\"> error = </SPAN>\n    <SPAN style=\"color:#0468D7\">ArgumentError</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'oh!'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  throw</SPAN>\n    <SPAN style=\"color:#222222\"> error; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "overridden_fields",
        "name": "Overridden fields",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   override fields.\n</P>\n<P>Overriding fields is almost always done unintentionally. Regardless, it is a bad practice to do so.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Base</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Object</SPAN>\n    <SPAN style=\"color:#222222\"> field = </SPAN>\n    <SPAN style=\"color:#11796D\">'lorem'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Object</SPAN>\n    <SPAN style=\"color:#222222\"> something = </SPAN>\n    <SPAN style=\"color:#11796D\">'change'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Bad1</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> Base</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> field = </SPAN>\n    <SPAN style=\"color:#11796D\">'ipsum'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Bad2</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> Base</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Object</SPAN>\n    <SPAN style=\"color:#222222\"> something = </SPAN>\n    <SPAN style=\"color:#11796D\">'done'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Base</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Object</SPAN>\n    <SPAN style=\"color:#222222\"> field = </SPAN>\n    <SPAN style=\"color:#11796D\">'lorem'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Object</SPAN>\n    <SPAN style=\"color:#222222\"> something = </SPAN>\n    <SPAN style=\"color:#11796D\">'change'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Ok</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> Base</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Object</SPAN>\n    <SPAN style=\"color:#222222\"> newField; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> Object</SPAN>\n    <SPAN style=\"color:#222222\"> newFinal = </SPAN>\n    <SPAN style=\"color:#11796D\">'ignore'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> BaseLoggingHandler</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Base</SPAN>\n    <SPAN style=\"color:#222222\"> transformer;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> LogPrintHandler</SPAN>\n    <SPAN style=\"color:#D43324\"> implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> BaseLoggingHandler</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Derived</SPAN>\n    <SPAN style=\"color:#222222\"> transformer; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "package_api_docs",
        "name": "Package api docs",
        "severity": "INFO",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   provide doc comments for all public APIs.\n</P>\n<P>\n  As described in the \n  <A href=\"https://dart.dev/tools/pub/package-layout#implementation-files\">pub package layout doc</A>\n  , public APIs consist in everything in your package's \n  <CODE>lib</CODE>\n   folder, minus implementation files in \n  <CODE>lib/src</CODE>\n  , adding elements explicitly exported with an \n  <CODE>export</CODE>\n   directive.\n</P>\n<CODE>lib</CODE>\n<CODE>lib/src</CODE>\n<CODE>export</CODE>\n<P>\n  For example, given \n  <CODE>lib/foo.dart</CODE>\n  :\n</P>\n<CODE>lib/foo.dart</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">export</SPAN>\n    <SPAN style=\"color:#11796D\"> 'src/bar.dart'</SPAN>\n    <SPAN style=\"color:#D43324\"> show</SPAN>\n    <SPAN style=\"color:#222222\"> Bar;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">export</SPAN>\n    <SPAN style=\"color:#11796D\"> 'src/baz.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Foo</SPAN>\n    <SPAN style=\"color:#222222\"> { }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> _Foo</SPAN>\n    <SPAN style=\"color:#222222\"> { }</SPAN>\n  </SPAN>\n</CODE>\n<P>its API includes:</P>\n<CODE>Foo</CODE>\n<CODE>_Foo</CODE>\n<CODE>Bar</CODE>\n<CODE>src/baz.dart</CODE>\n<P>\n  All public API members should be documented with \n  <CODE>///</CODE>\n   doc-style comments.\n</P>\n<CODE>///</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Bar</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> bar</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// A Foo.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Foo</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  /// Start foo-ing.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> start</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">_start</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  _start</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  Advice for writing good doc comments can be found in the \n  <A href=\"https://dart.dev/effective-dart/documentation\">Doc Writing Guidelines</A>\n  .\n</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "10min",
        "active": true
    },
    {
        "key": "package_names",
        "name": "Package names",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From the \n  <A href=\"https://dart.dev/tools/pub/pubspec\">Pubspec format description</A>\n  :\n</P>\n<P>\n  <STRONG>DO</STRONG>\n   use \n  <CODE>lowercase_with_underscores</CODE>\n   for package names.\n</P>\n<CODE>lowercase_with_underscores</CODE>\n<P>\n  Package names should be all lowercase, with underscores to separate words, \n  <CODE>just_like_this</CODE>\n  . Use only basic Latin letters and Arabic digits: [a-z0-9_]. Also, make sure the name is a valid Dart identifier -- that it doesn't start with digits and isn't a reserved word.\n</P>\n<CODE>just_like_this</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "package_prefixed_library_names",
        "name": "Package prefixed library names",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   prefix library names with the package name and a dot-separated path.\n</P>\n<P>This guideline helps avoid the warnings you get when two libraries have the same name. Here are the rules we recommend:</P>\n<CODE>lib</CODE>\n<P>\n  For example, say the package name is \n  <CODE>my_package</CODE>\n  . Here are the library names for various files in the package:\n</P>\n<CODE>my_package</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// In lib/my_package.dart</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\"> my_package;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// In lib/other.dart</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\"> my_package.other;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// In lib/foo/bar.dart</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\"> my_package.foo.bar;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// In example/foo/bar.dart</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\"> my_package.example.foo.bar;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// In lib/src/private.dart</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\"> my_package.src.private;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "parameter_assignments",
        "name": "Parameter assignments",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   assign new values to parameters of methods or functions.\n</P>\n<P>\n  Assigning new values to parameters is generally a bad practice unless an operator such as \n  <CODE>??=</CODE>\n   is used. Otherwise, arbitrarily reassigning parameters is usually a mistake.\n</P>\n<CODE>??=</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> badFunction</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> parameter) { </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  parameter = </SPAN>\n    <SPAN style=\"color:#11796D\">4</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> badFunction</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#D43324\"> required</SPAN>\n    <SPAN style=\"color:#222222\">, {</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> optional: </SPAN>\n    <SPAN style=\"color:#11796D\">42</SPAN>\n    <SPAN style=\"color:#222222\">}) { </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  optional ??= </SPAN>\n    <SPAN style=\"color:#11796D\">8</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> badFunctionPositional</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#D43324\"> required</SPAN>\n    <SPAN style=\"color:#222222\">, [</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> optional = </SPAN>\n    <SPAN style=\"color:#11796D\">42</SPAN>\n    <SPAN style=\"color:#222222\">]) { </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  optional ??= </SPAN>\n    <SPAN style=\"color:#11796D\">8</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> badMethod</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> parameter) { </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    parameter = </SPAN>\n    <SPAN style=\"color:#11796D\">4</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> ok</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> parameter) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(parameter);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> actuallyGood</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#D43324\"> required</SPAN>\n    <SPAN style=\"color:#222222\">, {</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> optional}) { </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  optional ??= ...;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> actuallyGoodPositional</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#D43324\"> required</SPAN>\n    <SPAN style=\"color:#222222\">, [</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> optional]) { </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  optional ??= ...;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> ok</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> parameter) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(parameter);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_adjacent_string_concatenation",
        "name": "Prefer adjacent string concatenation",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use adjacent strings to concatenate string literals.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">raiseAlarm</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'ERROR: Parts of the spaceship are on fire. Other '</SPAN>\n    <SPAN style=\"color:#222222\"> +</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'parts are overrun by martians. Unclear which are which.'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">raiseAlarm</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'ERROR: Parts of the spaceship are on fire. Other '</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'parts are overrun by martians. Unclear which are which.'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_asserts_in_initializer_lists",
        "name": "Prefer asserts in initializer lists",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   put asserts in initializer lists.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> a) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    assert</SPAN>\n    <SPAN style=\"color:#222222\">(a != </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> a) : </SPAN>\n    <SPAN style=\"color:#D43324\">assert</SPAN>\n    <SPAN style=\"color:#222222\">(a != </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_asserts_with_message",
        "name": "Prefer asserts with message",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  When assertions fail it's not always simple to understand why. Adding a message to the \n  <CODE>assert</CODE>\n   helps the developer to understand why the AssertionError occurs.\n</P>\n<CODE>assert</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(a) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  assert</SPAN>\n    <SPAN style=\"color:#222222\">(a != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">(a) : </SPAN>\n    <SPAN style=\"color:#D43324\">assert</SPAN>\n    <SPAN style=\"color:#222222\">(a != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(a) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  assert</SPAN>\n    <SPAN style=\"color:#222222\">(a != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'a must not be null'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">(a) : </SPAN>\n    <SPAN style=\"color:#D43324\">assert</SPAN>\n    <SPAN style=\"color:#222222\">(a != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'a must not be null'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_bool_in_asserts",
        "name": "Prefer bool in asserts",
        "severity": "MINOR",
        "description": "<SECTION><P>NOTE: This rule is removed in Dart 3.0.0; it is no longer functional.</P>\n<P>\n  <STRONG>DO</STRONG>\n   use a boolean for assert conditions.\n</P>\n<P>Not using booleans in assert conditions can lead to code where it isn't clear what the intention of the assert statement is.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">assert</SPAN>\n    <SPAN style=\"color:#222222\">(() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  f</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#11796D\"> true</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">});</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">assert</SPAN>\n    <SPAN style=\"color:#222222\">(() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  f</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#11796D\"> true</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}());</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": false
    },
    {
        "key": "prefer_collection_literals",
        "name": "Prefer collection literals",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use collection literals when possible.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> addresses = </SPAN>\n    <SPAN style=\"color:#0468D7\">Map</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">&gt;();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> uniqueNames = </SPAN>\n    <SPAN style=\"color:#0468D7\">Set</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">&gt;();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> ids = </SPAN>\n    <SPAN style=\"color:#0468D7\">LinkedHashSet</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> coordinates = </SPAN>\n    <SPAN style=\"color:#0468D7\">LinkedHashMap</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;();</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> addresses = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">&gt;{};</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> uniqueNames = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">&gt;{};</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> ids = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;{};</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> coordinates = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;{};</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>EXCEPTIONS:</STRONG>\n</P>\n<P>\n  When a \n  <CODE>LinkedHashSet</CODE>\n   or \n  <CODE>LinkedHashMap</CODE>\n   is expected, a collection literal is not preferred (or allowed).\n</P>\n<CODE>LinkedHashSet</CODE>\n<CODE>LinkedHashMap</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  LinkedHashSet</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; linkedHashSet =  </SPAN>\n    <SPAN style=\"color:#0468D7\">LinkedHashSet</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">from</SPAN>\n    <SPAN style=\"color:#222222\">([</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">]); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  LinkedHashMap</SPAN>\n    <SPAN style=\"color:#222222\"> linkedHashMap = </SPAN>\n    <SPAN style=\"color:#0468D7\">LinkedHashMap</SPAN>\n    <SPAN style=\"color:#222222\">(); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\"/>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  printSet</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">LinkedHashSet</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;()); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  printHashSet</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">LinkedHashSet</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;()); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  printMap</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">LinkedHashMap</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;()); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  printHashMap</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">LinkedHashMap</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;()); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> printSet</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Set</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; ids) =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#11796D\">$</SPAN>\n    <SPAN style=\"color:#222222\">ids</SPAN>\n    <SPAN style=\"color:#11796D\">!'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> printHashSet</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">LinkedHashSet</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; ids) =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">printSet</SPAN>\n    <SPAN style=\"color:#222222\">(ids);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> printMap</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Map</SPAN>\n    <SPAN style=\"color:#222222\"> map) =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#11796D\">$</SPAN>\n    <SPAN style=\"color:#222222\">map</SPAN>\n    <SPAN style=\"color:#11796D\">!'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> printHashMap</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">LinkedHashMap</SPAN>\n    <SPAN style=\"color:#222222\"> map) =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">printMap</SPAN>\n    <SPAN style=\"color:#222222\">(map);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_conditional_assignment",
        "name": "Prefer conditional assignment",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   using \n  <CODE>??=</CODE>\n   over testing for \n  <CODE>null</CODE>\n  .\n</P>\n<CODE>??=</CODE>\n<CODE>null</CODE>\n<P>\n  As Dart has the \n  <CODE>??=</CODE>\n   operator, it is advisable to use it where applicable to improve the brevity of your code.\n</P>\n<CODE>??=</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> fullName {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (_fullName == </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    _fullName = </SPAN>\n    <SPAN style=\"color:#6200EE\">getFullUserName</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> _fullName;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> fullName {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> _fullName ??= </SPAN>\n    <SPAN style=\"color:#6200EE\">getFullUserName</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_const_constructors",
        "name": "Prefer const constructors",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   using \n  <CODE>const</CODE>\n   for instantiating constant constructors.\n</P>\n<CODE>const</CODE>\n<P>If a constructor can be invoked as const to produce a canonicalized instance, it's preferable to do so.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> accessA</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\"> a = </SPAN>\n    <SPAN style=\"color:#D43324\">new</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> accessA</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\"> a = </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.x);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#6200EE\"> foo</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> x) =&gt; </SPAN>\n    <SPAN style=\"color:#D43324\">new</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">(x);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_const_constructors_in_immutables",
        "name": "Prefer const constructors in immutables",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   declaring \n  <CODE>const</CODE>\n   constructors on \n  <CODE>@immutable</CODE>\n   classes.\n</P>\n<CODE>const</CODE>\n<CODE>@immutable</CODE>\n<P>\n  If a class is immutable, it is usually a good idea to make its constructor a \n  <CODE>const</CODE>\n   constructor.\n</P>\n<CODE>const</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@immutable</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> a;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.a);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@immutable</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> a;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.a);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_const_declarations",
        "name": "Prefer const declarations",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   using \n  <CODE>const</CODE>\n   for constant-valued declarations.\n</P>\n<CODE>const</CODE>\n<P>Constant declarations are more hot-reload friendly and allow values to be used in other constant expressions.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> o = </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> final</SPAN>\n    <SPAN style=\"color:#222222\"> o = </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> o = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> o = &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_const_literals_to_create_immutables",
        "name": "Prefer const literals to create immutables",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   using \n  <CODE>const</CODE>\n   for instantiating list, map and set literals used as parameters in immutable class instantiations.\n</P>\n<CODE>const</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@immutable</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.v);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> v;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\"> a1 = </SPAN>\n    <SPAN style=\"color:#D43324\">new</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">([</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">]);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\"> a2 = </SPAN>\n    <SPAN style=\"color:#D43324\">new</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">({});</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\"> a1 = </SPAN>\n    <SPAN style=\"color:#D43324\">new</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> [</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">]);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\"> a2 = </SPAN>\n    <SPAN style=\"color:#D43324\">new</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> {});</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_constructors_over_static_methods",
        "name": "Prefer constructors over static methods",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   defining constructors instead of static methods to create instances.\n</P>\n<P>In most cases, it makes more sense to use a named constructor rather than a static method because it makes instantiation clearer.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  num</SPAN>\n    <SPAN style=\"color:#222222\"> x, y;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Point</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.x, </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.y);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#6200EE\"> polar</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#222222\"> theta, </SPAN>\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#222222\"> radius) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\">(radius * math.</SPAN>\n    <SPAN style=\"color:#6200EE\">cos</SPAN>\n    <SPAN style=\"color:#222222\">(theta),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">        radius * math.</SPAN>\n    <SPAN style=\"color:#6200EE\">sin</SPAN>\n    <SPAN style=\"color:#222222\">(theta));</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  num</SPAN>\n    <SPAN style=\"color:#222222\"> x, y;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Point</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.x, </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.y);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Point</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">polar</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#222222\"> theta, </SPAN>\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#222222\"> radius)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      : x = radius * math.</SPAN>\n    <SPAN style=\"color:#6200EE\">cos</SPAN>\n    <SPAN style=\"color:#222222\">(theta),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">        y = radius * math.</SPAN>\n    <SPAN style=\"color:#6200EE\">sin</SPAN>\n    <SPAN style=\"color:#222222\">(theta);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "prefer_contains",
        "name": "Prefer contains",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   use \n  <CODE>indexOf</CODE>\n   to see if a collection contains an element.\n</P>\n<CODE>indexOf</CODE>\n<P>\n  Calling \n  <CODE>indexOf</CODE>\n   to see if a collection contains something is difficult to read and may have poor performance.\n</P>\n<CODE>indexOf</CODE>\n<P>\n  Instead, prefer \n  <CODE>contains</CODE>\n  .\n</P>\n<CODE>contains</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (lunchBox.</SPAN>\n    <SPAN style=\"color:#6200EE\">indexOf</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'sandwich'</SPAN>\n    <SPAN style=\"color:#222222\">) == -</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#11796D\"> 'so hungry...'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (!lunchBox.</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'sandwich'</SPAN>\n    <SPAN style=\"color:#222222\">)) </SPAN>\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#11796D\"> 'so hungry...'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_double_quotes",
        "name": "Prefer double quotes",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use double quotes where they wouldn't require additional escapes.\n</P>\n<P>That means strings with a double quote may use apostrophes so that the double quote isn't escaped (note: we don't lint the other way around, ie, a double quoted string with an escaped double quote is not flagged).</P>\n<P>It's also rare, but possible, to have strings within string interpolations. In this case, it's much more readable to use a single quote somewhere. So single quotes are allowed either within, or containing, an interpolated string literal. Arguably strings within string interpolations should be its own type of lint.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">useStrings</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'should be double quote'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    r'should be double quote'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    r'''should be double quotes'''</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">useStrings</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    \"should be double quote\"</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    r\"should be double quote\"</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    r\"\"\"should be double quotes\"\"\"</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'ok with \" inside'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'nested </SPAN>\n    <SPAN style=\"color:#11796D\">${</SPAN>\n    <SPAN style=\"color:#222222\">a</SPAN>\n    <SPAN style=\"color:#11796D\"> ? </SPAN>\n    <SPAN style=\"color:#11796D\">\"strings\"</SPAN>\n    <SPAN style=\"color:#11796D\"> : </SPAN>\n    <SPAN style=\"color:#11796D\">\"can\"</SPAN>\n    <SPAN style=\"color:#11796D\">}</SPAN>\n    <SPAN style=\"color:#11796D\"> be wrapped by a double quote'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    \"and nested </SPAN>\n    <SPAN style=\"color:#11796D\">${</SPAN>\n    <SPAN style=\"color:#222222\">a</SPAN>\n    <SPAN style=\"color:#11796D\"> ? </SPAN>\n    <SPAN style=\"color:#11796D\">'strings'</SPAN>\n    <SPAN style=\"color:#11796D\"> : </SPAN>\n    <SPAN style=\"color:#11796D\">'can be double quoted themselves'</SPAN>\n    <SPAN style=\"color:#11796D\">}</SPAN>\n    <SPAN style=\"color:#11796D\">\"</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_equal_for_default_values",
        "name": "Prefer equal for default values",
        "severity": "MINOR",
        "description": "<SECTION><P>NOTE: This rule is removed in Dart 3.0; it is no longer functional.</P>\n<P>\n  <STRONG>DO</STRONG>\n   use \n  <CODE>=</CODE>\n   to separate a named parameter from its default value.\n</P>\n<CODE>=</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">({a: </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">})</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">({a = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">})</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": false
    },
    {
        "key": "prefer_expression_function_bodies",
        "name": "Prefer expression function bodies",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>CONSIDER</STRONG>\n   using =&gt; for short members whose body is a single return statement.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">get</SPAN>\n    <SPAN style=\"color:#222222\"> width {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> right - left;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#6200EE\"> ready</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#222222\"> time) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> minTime == </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\"> || minTime &lt;= time;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">containsValue</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> value) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#6200EE\"> getValues</SPAN>\n    <SPAN style=\"color:#222222\">().</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(value);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">get</SPAN>\n    <SPAN style=\"color:#222222\"> width =&gt; right - left;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#6200EE\"> ready</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#222222\"> time) =&gt; minTime == </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\"> || minTime &lt;= time;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">containsValue</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> value) =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">getValues</SPAN>\n    <SPAN style=\"color:#222222\">().</SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(value);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_final_fields",
        "name": "Prefer final fields",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/design#prefer-making-fields-and-top-level-variables-final\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>DO</STRONG>\n   prefer declaring private fields as \n  <CODE>final</CODE>\n   if they are not reassigned later in the library.\n</P>\n<CODE>final</CODE>\n<P>\n  Declaring fields as \n  <CODE>final</CODE>\n   when possible is a good practice because it helps avoid accidental reassignments and allows the compiler to do optimizations.\n</P>\n<CODE>final</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> BadImmutable</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> _label = </SPAN>\n    <SPAN style=\"color:#11796D\">'hola mundo! BadImmutable'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> label = </SPAN>\n    <SPAN style=\"color:#11796D\">'hola mundo! BadImmutable'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> MultipleMutable</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> _label = </SPAN>\n    <SPAN style=\"color:#11796D\">'hola mundo! GoodMutable'</SPAN>\n    <SPAN style=\"color:#222222\">, _offender = </SPAN>\n    <SPAN style=\"color:#11796D\">'mumble mumble!'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> _someOther; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  MultipleMutable</SPAN>\n    <SPAN style=\"color:#222222\">() : _someOther = </SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  MultipleMutable</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">._someOther);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> changeLabel</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    _label= </SPAN>\n    <SPAN style=\"color:#11796D\">'hello world! GoodMutable'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> GoodImmutable</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> label = </SPAN>\n    <SPAN style=\"color:#11796D\">'hola mundo! BadImmutable'</SPAN>\n    <SPAN style=\"color:#222222\">, bla = </SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> _label = </SPAN>\n    <SPAN style=\"color:#11796D\">'hola mundo! BadImmutable'</SPAN>\n    <SPAN style=\"color:#222222\">, _bla = </SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> GoodMutable</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> _label = </SPAN>\n    <SPAN style=\"color:#11796D\">'hola mundo! GoodMutable'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> changeLabel</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    _label = </SPAN>\n    <SPAN style=\"color:#11796D\">'hello world! GoodMutable'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> AssignedInAllConstructors</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> _label; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  AssignedInAllConstructors</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">._label);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  AssignedInAllConstructors</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">withDefault</SPAN>\n    <SPAN style=\"color:#222222\">() : _label = </SPAN>\n    <SPAN style=\"color:#11796D\">'Hello'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> NotAssignedInAllConstructors</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> _label; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  NotAssignedInAllConstructors</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  NotAssignedInAllConstructors</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">withDefault</SPAN>\n    <SPAN style=\"color:#222222\">() : _label = </SPAN>\n    <SPAN style=\"color:#11796D\">'Hello'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_final_in_for_each",
        "name": "Prefer final in for each",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   prefer declaring for-each loop variables as final if they are not reassigned later in the code.\n</P>\n<P>Declaring for-each loop variables as final when possible is a good practice because it helps avoid accidental reassignments and allows the compiler to do optimizations.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> element </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> elements) { </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Element: </SPAN>\n    <SPAN style=\"color:#11796D\">$</SPAN>\n    <SPAN style=\"color:#222222\">element</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> element </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> elements) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Element: </SPAN>\n    <SPAN style=\"color:#11796D\">$</SPAN>\n    <SPAN style=\"color:#222222\">element</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> element </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> elements) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  element = element + element;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Element: </SPAN>\n    <SPAN style=\"color:#11796D\">$</SPAN>\n    <SPAN style=\"color:#222222\">element</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_final_locals",
        "name": "Prefer final locals",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   prefer declaring variables as final if they are not reassigned later in the code.\n</P>\n<P>Declaring variables as final when possible is a good practice because it helps avoid accidental reassignments and allows the compiler to do optimizations.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> badMethod</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> label = </SPAN>\n    <SPAN style=\"color:#11796D\">'hola mundo! badMethod'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(label);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> goodMethod</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> label = </SPAN>\n    <SPAN style=\"color:#11796D\">'hola mundo! goodMethod'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(label);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> mutableCase</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> label = </SPAN>\n    <SPAN style=\"color:#11796D\">'hola mundo! mutableCase'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(label);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  label = </SPAN>\n    <SPAN style=\"color:#11796D\">'hello world'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(label);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_final_parameters",
        "name": "Prefer final parameters",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   prefer declaring parameters as final if they are not reassigned in the function body.\n</P>\n<P>Declaring parameters as final when possible is a good practice because it helps avoid accidental reassignments.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> badParameter</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> label) { </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(label);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> goodParameter</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#0468D7\"> String</SPAN>\n    <SPAN style=\"color:#222222\"> label) { </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(label);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> badExpression</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> value) =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(value); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> goodExpression</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> value) =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(value); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">[</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">4</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">6</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">8</SPAN>\n    <SPAN style=\"color:#222222\">].</SPAN>\n    <SPAN style=\"color:#6200EE\">forEach</SPAN>\n    <SPAN style=\"color:#222222\">((value) =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(value + </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">)); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">[</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">4</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">6</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">8</SPAN>\n    <SPAN style=\"color:#222222\">].</SPAN>\n    <SPAN style=\"color:#6200EE\">forEach</SPAN>\n    <SPAN style=\"color:#222222\">((</SPAN>\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> value) =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(value + </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">)); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> mutableParameter</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> label) { </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(label);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  label = </SPAN>\n    <SPAN style=\"color:#11796D\">'Hello Linter!'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(label);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_for_elements_to_map_fromIterable",
        "name": "Prefer for elements to map fromIterable",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  When building maps from iterables, it is preferable to use \n  <CODE>for</CODE>\n   elements.\n</P>\n<CODE>for</CODE>\n<P>Using 'for' elements brings several benefits including:</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Map</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#0468D7\">WidgetBuilder</SPAN>\n    <SPAN style=\"color:#222222\">&gt;.</SPAN>\n    <SPAN style=\"color:#6200EE\">fromIterable</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  kAllGalleryDemos,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  key: (demo) =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#11796D\">${</SPAN>\n    <SPAN style=\"color:#222222\">demo</SPAN>\n    <SPAN style=\"color:#11796D\">.</SPAN>\n    <SPAN style=\"color:#222222\">routeName</SPAN>\n    <SPAN style=\"color:#11796D\">}</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  value: (demo) =&gt; demo.buildRoute,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> demo </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> kAllGalleryDemos)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    '</SPAN>\n    <SPAN style=\"color:#11796D\">${</SPAN>\n    <SPAN style=\"color:#222222\">demo</SPAN>\n    <SPAN style=\"color:#11796D\">.</SPAN>\n    <SPAN style=\"color:#222222\">routeName</SPAN>\n    <SPAN style=\"color:#11796D\">}</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">: demo.buildRoute,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">};</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// Map&lt;int, Student&gt; is not required, type is inferred automatically.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> pizzaRecipients = {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...studentLeaders,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> student </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> classG)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    if</SPAN>\n    <SPAN style=\"color:#222222\"> (student.isPassing) student.id: student,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">};</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "prefer_foreach",
        "name": "Prefer foreach",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use \n  <CODE>forEach</CODE>\n   if you are only going to apply a function or a method to all the elements of an iterable.\n</P>\n<CODE>forEach</CODE>\n<P>\n  Using \n  <CODE>forEach</CODE>\n   when you are only going to apply a function or method to all elements of an iterable is a good practice because it makes your code more terse.\n</P>\n<CODE>forEach</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> key </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> map.keys.</SPAN>\n    <SPAN style=\"color:#6200EE\">toList</SPAN>\n    <SPAN style=\"color:#222222\">()) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  map.</SPAN>\n    <SPAN style=\"color:#6200EE\">remove</SPAN>\n    <SPAN style=\"color:#222222\">(key);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">map.keys.</SPAN>\n    <SPAN style=\"color:#6200EE\">toList</SPAN>\n    <SPAN style=\"color:#222222\">().</SPAN>\n    <SPAN style=\"color:#6200EE\">forEach</SPAN>\n    <SPAN style=\"color:#222222\">(map.remove);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>NOTE:</STRONG>\n   Replacing a for each statement with a forEach call may change the behavior in the case where there are side-effects on the iterable itself.\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> v </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> myList) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  foo</SPAN>\n    <SPAN style=\"color:#222222\">().</SPAN>\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(v); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// This code invokes foo() many times.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">myList.</SPAN>\n    <SPAN style=\"color:#6200EE\">forEach</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#6200EE\">foo</SPAN>\n    <SPAN style=\"color:#222222\">().f); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// But this one invokes foo() just once.</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_function_declarations_over_variables",
        "name": "Prefer function declarations over variables",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/usage#do-use-a-function-declaration-to-bind-a-function-to-a-name\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>DO</STRONG>\n   use a function declaration to bind a function to a name.\n</P>\n<P>As Dart allows local function declarations, it is a good practice to use them in the place of function literals.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> localFunction = () {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  };</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  localFunction</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_generic_function_type_aliases",
        "name": "Prefer generic function type aliases",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   generic function type aliases.\n</P>\n<P>\n  With the introduction of generic functions, function type aliases (\n  <CODE>typedef void F()</CODE>\n  ) couldn't express all of the possible kinds of parameterization that users might want to express. Generic function type aliases (\n  <CODE>typedef F = void Function()</CODE>\n  ) fixed that issue.\n</P>\n<CODE>typedef void F()</CODE>\n<CODE>typedef F = void Function()</CODE>\n<P>For consistency and readability reasons, it's better to only use one syntax and thus prefer generic function type aliases.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">typedef</SPAN>\n    <SPAN style=\"color:#D43324\"> void</SPAN>\n    <SPAN style=\"color:#0468D7\"> F</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">typedef</SPAN>\n    <SPAN style=\"color:#0468D7\"> F</SPAN>\n    <SPAN style=\"color:#222222\"> = </SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#0468D7\"> Function</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "prefer_if_elements_to_conditional_expressions",
        "name": "Prefer if elements to conditional expressions",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  When building collections, it is preferable to use \n  <CODE>if</CODE>\n   elements rather than conditionals.\n</P>\n<CODE>if</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> list = [</SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'b'</SPAN>\n    <SPAN style=\"color:#222222\">, condition ? </SPAN>\n    <SPAN style=\"color:#11796D\">'c'</SPAN>\n    <SPAN style=\"color:#222222\"> : </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">].</SPAN>\n    <SPAN style=\"color:#6200EE\">where</SPAN>\n    <SPAN style=\"color:#222222\">((e) =&gt; e != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">).</SPAN>\n    <SPAN style=\"color:#6200EE\">toList</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> list = [</SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'b'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (condition) </SPAN>\n    <SPAN style=\"color:#11796D\">'c'</SPAN>\n    <SPAN style=\"color:#222222\">];</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_if_null_operators",
        "name": "Prefer if null operators",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   using \n  <CODE>??</CODE>\n   operators instead of \n  <CODE>null</CODE>\n   checks and conditional expressions.\n</P>\n<CODE>??</CODE>\n<CODE>null</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">v = a == </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\"> ? b : a;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">v = a ?? b;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_initializing_formals",
        "name": "Prefer initializing formals",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use initializing formals when possible.\n</P>\n<P>Using initializing formals when possible makes your code more terse.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  num</SPAN>\n    <SPAN style=\"color:#222222\"> x, y;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Point</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#222222\"> x, </SPAN>\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#222222\"> y) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    this</SPAN>\n    <SPAN style=\"color:#222222\">.x = x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    this</SPAN>\n    <SPAN style=\"color:#222222\">.y = y;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  num</SPAN>\n    <SPAN style=\"color:#222222\"> x, y;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Point</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.x, </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.y);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  num</SPAN>\n    <SPAN style=\"color:#222222\"> x, y;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Point</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#222222\"> x, </SPAN>\n    <SPAN style=\"color:#0468D7\">num</SPAN>\n    <SPAN style=\"color:#222222\"> y}) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    this</SPAN>\n    <SPAN style=\"color:#222222\">.x = x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    this</SPAN>\n    <SPAN style=\"color:#222222\">.y = y;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  num</SPAN>\n    <SPAN style=\"color:#222222\"> x, y;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Point</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.x, </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.y});</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>NOTE:</STRONG>\n   This rule will not generate a lint for named parameters unless the parameter name and the field name are the same. The reason for this is that resolving such a lint would require either renaming the field or renaming the parameter, and both of those actions would potentially be a breaking change. For example, the following will not generate a lint:\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#222222\"> isEnabled;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Point</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\"> enabled}) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    this</SPAN>\n    <SPAN style=\"color:#222222\">.isEnabled = enabled; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>NOTE:</STRONG>\n   Also note that it is possible to enforce a type that is stricter than the initialized field with an initializing formal parameter. In the following example the unnamed \n  <CODE>Bid</CODE>\n   constructor requires a non-null \n  <CODE>int</CODE>\n   despite \n  <CODE>amount</CODE>\n   being declared nullable (\n  <CODE>int?</CODE>\n  ).\n</P>\n<CODE>Bid</CODE>\n<CODE>int</CODE>\n<CODE>amount</CODE>\n<CODE>int?</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Bid</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\"> final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\">? amount;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\"> Bid</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#D43324\"> this</SPAN>\n    <SPAN style=\"color:#222222\">.amount);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\"> Bid</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">pass</SPAN>\n    <SPAN style=\"color:#222222\">() : amount = </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_inlined_adds",
        "name": "Prefer inlined adds",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  Declare elements in list literals inline, rather than using \n  <CODE>add</CODE>\n   and \n  <CODE>addAll</CODE>\n   methods where possible.\n</P>\n<CODE>add</CODE>\n<CODE>addAll</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> l = [</SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">]..</SPAN>\n    <SPAN style=\"color:#6200EE\">add</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'b'</SPAN>\n    <SPAN style=\"color:#222222\">)..</SPAN>\n    <SPAN style=\"color:#6200EE\">add</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'c'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> l2 = [</SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">]..</SPAN>\n    <SPAN style=\"color:#6200EE\">addAll</SPAN>\n    <SPAN style=\"color:#222222\">([</SPAN>\n    <SPAN style=\"color:#11796D\">'b'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'c'</SPAN>\n    <SPAN style=\"color:#222222\">]);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> l = [</SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'b'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'c'</SPAN>\n    <SPAN style=\"color:#222222\">];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> l2 = [</SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'b'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'c'</SPAN>\n    <SPAN style=\"color:#222222\">];</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_int_literals",
        "name": "Prefer int literals",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use int literals rather than the corresponding double literal.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> double</SPAN>\n    <SPAN style=\"color:#222222\"> myDouble = </SPAN>\n    <SPAN style=\"color:#11796D\">8.0</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> anotherDouble = myDouble + </SPAN>\n    <SPAN style=\"color:#11796D\">7.0e2</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  someMethod</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">6.0</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> double</SPAN>\n    <SPAN style=\"color:#222222\"> myDouble = </SPAN>\n    <SPAN style=\"color:#11796D\">8</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> anotherDouble = myDouble + </SPAN>\n    <SPAN style=\"color:#11796D\">700</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  someMethod</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">6</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_interpolation_to_compose_strings",
        "name": "Prefer interpolation to compose strings",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   using interpolation to compose strings and values.\n</P>\n<P>Using interpolation when composing strings and values is usually easier to write and read than concatenation.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">'Hello, '</SPAN>\n    <SPAN style=\"color:#222222\"> + person.name + </SPAN>\n    <SPAN style=\"color:#11796D\">' from '</SPAN>\n    <SPAN style=\"color:#222222\"> + person.city + </SPAN>\n    <SPAN style=\"color:#11796D\">'.'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">'Hello, </SPAN>\n    <SPAN style=\"color:#11796D\">${</SPAN>\n    <SPAN style=\"color:#222222\">person</SPAN>\n    <SPAN style=\"color:#11796D\">.</SPAN>\n    <SPAN style=\"color:#222222\">name</SPAN>\n    <SPAN style=\"color:#11796D\">}</SPAN>\n    <SPAN style=\"color:#11796D\"> from </SPAN>\n    <SPAN style=\"color:#11796D\">${</SPAN>\n    <SPAN style=\"color:#222222\">person</SPAN>\n    <SPAN style=\"color:#11796D\">.</SPAN>\n    <SPAN style=\"color:#222222\">city</SPAN>\n    <SPAN style=\"color:#11796D\">}</SPAN>\n    <SPAN style=\"color:#11796D\">.'</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_is_empty",
        "name": "Prefer is empty",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   use \n  <CODE>length</CODE>\n   to see if a collection is empty.\n</P>\n<CODE>length</CODE>\n<P>\n  The \n  <CODE>Iterable</CODE>\n   contract does not require that a collection know its length or be able to provide it in constant time. Calling \n  <CODE>length</CODE>\n   just to see if the collection contains anything can be painfully slow.\n</P>\n<CODE>Iterable</CODE>\n<CODE>length</CODE>\n<P>\n  Instead, there are faster and more readable getters: \n  <CODE>isEmpty</CODE>\n   and \n  <CODE>isNotEmpty</CODE>\n  . Use the one that doesn't require you to negate the result.\n</P>\n<CODE>isEmpty</CODE>\n<CODE>isNotEmpty</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (lunchBox.length == </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#11796D\"> 'so hungry...'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (words.length != </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#222222\"> words.</SPAN>\n    <SPAN style=\"color:#6200EE\">join</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">' '</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (lunchBox.isEmpty) </SPAN>\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#11796D\"> 'so hungry...'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (words.isNotEmpty) </SPAN>\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#222222\"> words.</SPAN>\n    <SPAN style=\"color:#6200EE\">join</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">' '</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_is_not_empty",
        "name": "Prefer is not empty",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n  <CODE>x.isNotEmpty</CODE>\n   to \n  <CODE>!x.isEmpty</CODE>\n   for \n  <CODE>Iterable</CODE>\n   and \n  <CODE>Map</CODE>\n   instances.\n</P>\n<CODE>x.isNotEmpty</CODE>\n<CODE>!x.isEmpty</CODE>\n<CODE>Iterable</CODE>\n<CODE>Map</CODE>\n<P>\n  When testing whether an iterable or map is empty, prefer \n  <CODE>isNotEmpty</CODE>\n   over \n  <CODE>!isEmpty</CODE>\n   to improve code readability.\n</P>\n<CODE>isNotEmpty</CODE>\n<CODE>!isEmpty</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (!sources.isEmpty) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  process</SPAN>\n    <SPAN style=\"color:#222222\">(sources);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (todo.isNotEmpty) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  sendResults</SPAN>\n    <SPAN style=\"color:#222222\">(request, todo.isEmpty);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_is_not_operator",
        "name": "Prefer is not operator",
        "severity": "MINOR",
        "description": "<SECTION><P>When checking if an object is not of a specified type, it is preferable to use the 'is!' operator.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (!(foo is </SPAN>\n    <SPAN style=\"color:#0468D7\">Foo</SPAN>\n    <SPAN style=\"color:#222222\">)) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (foo is! </SPAN>\n    <SPAN style=\"color:#0468D7\">Foo</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_iterable_whereType",
        "name": "Prefer iterable whereType",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n  <CODE>iterable.whereType&lt;T&gt;()</CODE>\n   over \n  <CODE>iterable.where((e) =&gt; e is T)</CODE>\n  .\n</P>\n<CODE>iterable.whereType&lt;T&gt;()</CODE>\n<CODE>iterable.where((e) =&gt; e is T)</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">iterable.</SPAN>\n    <SPAN style=\"color:#6200EE\">where</SPAN>\n    <SPAN style=\"color:#222222\">((e) =&gt; e is </SPAN>\n    <SPAN style=\"color:#0468D7\">MyClass</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">iterable.</SPAN>\n    <SPAN style=\"color:#6200EE\">whereType</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">MyClass</SPAN>\n    <SPAN style=\"color:#222222\">&gt;();</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_mixin",
        "name": "Prefer mixin",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  Dart 2.1 introduced a new syntax for mixins that provides a safe way for a mixin to invoke inherited members using \n  <CODE>super</CODE>\n  . The new style of mixins should always be used for types that are to be mixed in. As a result, this lint will flag any uses of a class in a \n  <CODE>with</CODE>\n   clause.\n</P>\n<CODE>super</CODE>\n<CODE>with</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> Object</SPAN>\n    <SPAN style=\"color:#D43324\"> with</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>OK:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">mixin</SPAN>\n    <SPAN style=\"color:#0468D7\"> M</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#D43324\"> with</SPAN>\n    <SPAN style=\"color:#0468D7\"> M</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "prefer_null_aware_method_calls",
        "name": "Prefer null aware method calls",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  Instead of checking nullability of a function/method \n  <CODE>f</CODE>\n   before calling it, you can use \n  <CODE>f?.call()</CODE>\n  .\n</P>\n<CODE>f</CODE>\n<CODE>f?.call()</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (f != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">!();</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">f?.</SPAN>\n    <SPAN style=\"color:#6200EE\">call</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_null_aware_operators",
        "name": "Prefer null aware operators",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   using \n  <CODE>null</CODE>\n  -aware operators instead of \n  <CODE>null</CODE>\n   checks in conditional expressions.\n</P>\n<CODE>null</CODE>\n<CODE>null</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">v = a == </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\"> ? </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\"> : a.b;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">v = a?.b;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_relative_imports",
        "name": "Prefer relative imports",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   relative imports for files in \n  <CODE>lib/</CODE>\n  .\n</P>\n<CODE>lib/</CODE>\n<P>\n  When mixing relative and absolute imports it's possible to create confusion where the same member gets imported in two different ways. One way to avoid that is to ensure you consistently use relative imports for files within the \n  <CODE>lib/</CODE>\n   directory.\n</P>\n<CODE>lib/</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'package:my_package/bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">import</SPAN>\n    <SPAN style=\"color:#11796D\"> 'bar.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_single_quotes",
        "name": "Prefer single quotes",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use single quotes where they wouldn't require additional escapes.\n</P>\n<P>That means strings with an apostrophe may use double quotes so that the apostrophe isn't escaped (note: we don't lint the other way around, ie, a single quoted string with an escaped apostrophe is not flagged).</P>\n<P>It's also rare, but possible, to have strings within string interpolations. In this case, it's much more readable to use a double quote somewhere. So double quotes are allowed either within, or containing, an interpolated string literal. Arguably strings within string interpolations should be its own type of lint.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">useStrings</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    \"should be single quote\"</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    r\"should be single quote\"</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    r\"\"\"should be single quotes\"\"\"</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">useStrings</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'should be single quote'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    r'should be single quote'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    r'''should be single quotes'''</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    \"here's ok\"</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    \"nested </SPAN>\n    <SPAN style=\"color:#11796D\">${</SPAN>\n    <SPAN style=\"color:#222222\">a</SPAN>\n    <SPAN style=\"color:#11796D\"> ? </SPAN>\n    <SPAN style=\"color:#11796D\">'strings'</SPAN>\n    <SPAN style=\"color:#11796D\"> : </SPAN>\n    <SPAN style=\"color:#11796D\">'can'</SPAN>\n    <SPAN style=\"color:#11796D\">}</SPAN>\n    <SPAN style=\"color:#11796D\"> be wrapped by a double quote\"</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'and nested </SPAN>\n    <SPAN style=\"color:#11796D\">${</SPAN>\n    <SPAN style=\"color:#222222\">a</SPAN>\n    <SPAN style=\"color:#11796D\"> ? </SPAN>\n    <SPAN style=\"color:#11796D\">\"strings\"</SPAN>\n    <SPAN style=\"color:#11796D\"> : </SPAN>\n    <SPAN style=\"color:#11796D\">\"can be double quoted themselves\"</SPAN>\n    <SPAN style=\"color:#11796D\">}</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_spread_collections",
        "name": "Prefer spread collections",
        "severity": "MINOR",
        "description": "<SECTION><P>Use spread collections when possible.</P>\n<P>Collection literals are excellent when you want to create a new collection out of individual items. But, when existing items are already stored in another collection, spread collection syntax leads to simpler code.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> build</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">BuildContext</SPAN>\n    <SPAN style=\"color:#222222\"> context) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#0468D7\"> CupertinoPageScaffold</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    child: </SPAN>\n    <SPAN style=\"color:#0468D7\">ListView</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      children: [</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">        Tab2Header</SPAN>\n    <SPAN style=\"color:#222222\">(),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      ]..</SPAN>\n    <SPAN style=\"color:#6200EE\">addAll</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#6200EE\">buildTab2Conversation</SPAN>\n    <SPAN style=\"color:#222222\">()),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> ints = [</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">([</SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">]..</SPAN>\n    <SPAN style=\"color:#6200EE\">addAll</SPAN>\n    <SPAN style=\"color:#222222\">(ints.</SPAN>\n    <SPAN style=\"color:#6200EE\">map</SPAN>\n    <SPAN style=\"color:#222222\">((i) =&gt; i.</SPAN>\n    <SPAN style=\"color:#6200EE\">toString</SPAN>\n    <SPAN style=\"color:#222222\">()))..</SPAN>\n    <SPAN style=\"color:#6200EE\">addAll</SPAN>\n    <SPAN style=\"color:#222222\">([</SPAN>\n    <SPAN style=\"color:#11796D\">'c'</SPAN>\n    <SPAN style=\"color:#222222\">]));</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> things;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> l = [</SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">]..</SPAN>\n    <SPAN style=\"color:#6200EE\">addAll</SPAN>\n    <SPAN style=\"color:#222222\">(things ?? </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> []);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> build</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">BuildContext</SPAN>\n    <SPAN style=\"color:#222222\"> context) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#0468D7\"> CupertinoPageScaffold</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    child: </SPAN>\n    <SPAN style=\"color:#0468D7\">ListView</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      children: [</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">        Tab2Header</SPAN>\n    <SPAN style=\"color:#222222\">(),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">        ...</SPAN>\n    <SPAN style=\"color:#6200EE\">buildTab2Conversation</SPAN>\n    <SPAN style=\"color:#222222\">(),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      ],</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> ints = [</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">([</SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">, ...ints.</SPAN>\n    <SPAN style=\"color:#6200EE\">map</SPAN>\n    <SPAN style=\"color:#222222\">((i) =&gt; i.</SPAN>\n    <SPAN style=\"color:#6200EE\">toString</SPAN>\n    <SPAN style=\"color:#222222\">()), </SPAN>\n    <SPAN style=\"color:#11796D\">'c'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> things;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> l = [</SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">, ...?things];</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_typing_uninitialized_variables",
        "name": "Prefer typing uninitialized variables",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   specifying a type annotation for uninitialized variables and fields.\n</P>\n<P>Forgoing type annotations for uninitialized variables is a bad practice because you may accidentally assign them to a type that you didn't originally intend to.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> BadClass</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> var</SPAN>\n    <SPAN style=\"color:#222222\"> bar; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> foo; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> method</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    var</SPAN>\n    <SPAN style=\"color:#222222\"> bar; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    bar = </SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(bar);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> aFunction</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> bar; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  bar = </SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> GoodClass</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> var</SPAN>\n    <SPAN style=\"color:#222222\"> bar = </SPAN>\n    <SPAN style=\"color:#11796D\">7</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> foo = </SPAN>\n    <SPAN style=\"color:#11796D\">42</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> baz; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> method</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">    int</SPAN>\n    <SPAN style=\"color:#222222\"> baz;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    var</SPAN>\n    <SPAN style=\"color:#222222\"> bar = </SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "prefer_void_to_null",
        "name": "Prefer void to null",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   use the type Null where void would work.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Null</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Null</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Stream</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Null</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Null</SPAN>\n    <SPAN style=\"color:#222222\"> x) {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Stream</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\"> x) {}</SPAN>\n  </SPAN>\n</CODE>\n<P>Some exceptions include formulating special function types:</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Null</SPAN>\n    <SPAN style=\"color:#0468D7\"> Function</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Null</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#0468D7\">Null</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>and for making empty literals which are safe to pass into read-only locations for any type of map or list:</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Null</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#0468D7\">Null</SPAN>\n    <SPAN style=\"color:#222222\">&gt;{};</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "provide_deprecation_message",
        "name": "Provide deprecation message",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   specify a deprecation message (with migration instructions and/or a removal schedule) in the \n  <CODE>Deprecated</CODE>\n   constructor.\n</P>\n<CODE>Deprecated</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@deprecated</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> oldFunction</SPAN>\n    <SPAN style=\"color:#222222\">(arg1, arg2) {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@Deprecated</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">\"\"\"</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">[oldFunction] is being deprecated in favor of [newFunction] (with slightly</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">different parameters; see [newFunction] for more information). [oldFunction]</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">will be removed on or after the 4.0.0 release.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">\"\"\"</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> oldFunction</SPAN>\n    <SPAN style=\"color:#222222\">(arg1, arg2) {}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "public_member_api_docs",
        "name": "Public member api docs",
        "severity": "INFO",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   document all public members.\n</P>\n<P>\n  All non-overriding public members should be documented with \n  <CODE>///</CODE>\n   doc-style comments.\n</P>\n<CODE>///</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Bad</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> meh</SPAN>\n    <SPAN style=\"color:#222222\">() { }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// A good thing.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Good</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  /// Start doing your thing.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> start</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">_start</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  _start</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  In case a public member overrides a member it is up to the declaring member to provide documentation. For example, in the following, \n  <CODE>Sub</CODE>\n   needn't document \n  <CODE>init</CODE>\n   (though it certainly may, if there's need).\n</P>\n<CODE>Sub</CODE>\n<CODE>init</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// Base of all things.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Base</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  /// Initialize the base.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> init</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// A sub base.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Sub</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> Base</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> init</SPAN>\n    <SPAN style=\"color:#222222\">() { ... }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  Note that consistent with \n  <CODE>dart doc</CODE>\n  , an exception to the rule is made when documented getters have corresponding undocumented setters. In this case the setters inherit the docs from the getters.\n</P>\n<CODE>dart doc</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "10min",
        "active": true
    },
    {
        "key": "recursive_getters",
        "name": "Recursive getters",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   create recursive getters.\n</P>\n<P>Recursive getters are getters which return themselves as a value. This is usually a typo.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> field =&gt; field; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> otherField {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> otherField; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> field =&gt; _field;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "BUG",
        "debt": "1min",
        "active": true
    },
    {
        "key": "require_trailing_commas",
        "name": "Require trailing commas",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use trailing commas for all multi-line parameter lists and argument lists. A parameter list or argument list that fits on one line, including the opening parenthesis and closing parenthesis, does not require a trailing comma.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> run</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  method</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'does not fit on one line'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">      'test test test test test test test test test test test'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> run</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  method</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'does not fit on one line'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">    'test test test test test test test test test test test'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>EXCEPTION:</STRONG>\n   If the final argument in an argument list is positional (vs named) and is either a function literal with curly braces, a map literal, a set literal, or a list literal, then a trailing comma is not required. This exception only applies if the final argument does not fit entirely on one line.\n</P>\n<P>\n  <STRONG>NOTE:</STRONG>\n   This lint rule assumes that code has been formatted with \n  <CODE>dart format</CODE>\n   and may produce false positives on unformatted code.\n</P>\n<CODE>dart format</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "secure_pubspec_urls",
        "name": "Secure pubspec urls",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   Use secure urls in \n  <CODE>pubspec.yaml</CODE>\n  .\n</P>\n<CODE>pubspec.yaml</CODE>\n<P>\n  Use \n  <CODE>https</CODE>\n   instead of \n  <CODE>http</CODE>\n   or \n  <CODE>git:</CODE>\n  .\n</P>\n<CODE>https</CODE>\n<CODE>http</CODE>\n<CODE>git:</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">repository</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#11796D\">http://github.com/dart-lang/example</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">git</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  url</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#11796D\">git://github.com/dart-lang/example/example.git</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">repository</SPAN>\n    <SPAN style=\"color:#222222\">: </SPAN>\n    <SPAN style=\"color:#11796D\">https://github.com/dart-lang/example</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "sized_box_for_whitespace",
        "name": "Sized box for whitespace",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  Use \n  <CODE>SizedBox</CODE>\n   to add whitespace to a layout.\n</P>\n<CODE>SizedBox</CODE>\n<P>\n  A \n  <CODE>Container</CODE>\n   is a heavier Widget than a \n  <CODE>SizedBox</CODE>\n  , and as bonus, \n  <CODE>SizedBox</CODE>\n   has a \n  <CODE>const</CODE>\n   constructor.\n</P>\n<CODE>Container</CODE>\n<CODE>SizedBox</CODE>\n<CODE>SizedBox</CODE>\n<CODE>const</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> buildRow</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#0468D7\"> Row</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    children: &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      const</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyLogo</SPAN>\n    <SPAN style=\"color:#222222\">(),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">      Container</SPAN>\n    <SPAN style=\"color:#222222\">(width: </SPAN>\n    <SPAN style=\"color:#11796D\">4</SPAN>\n    <SPAN style=\"color:#222222\">),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Expanded</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">        child: </SPAN>\n    <SPAN style=\"color:#0468D7\">Text</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'...'</SPAN>\n    <SPAN style=\"color:#222222\">),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ],</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> buildRow</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#0468D7\"> Row</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    children: </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">      MyLogo</SPAN>\n    <SPAN style=\"color:#222222\">(),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">      SizedBox</SPAN>\n    <SPAN style=\"color:#222222\">(width: </SPAN>\n    <SPAN style=\"color:#11796D\">4</SPAN>\n    <SPAN style=\"color:#222222\">),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">      Expanded</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">        child: </SPAN>\n    <SPAN style=\"color:#0468D7\">Text</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'...'</SPAN>\n    <SPAN style=\"color:#222222\">),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ],</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "sized_box_shrink_expand",
        "name": "Sized box shrink expand",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  Use \n  <CODE>SizedBox.shrink(...)</CODE>\n   and \n  <CODE>SizedBox.expand(...)</CODE>\n   constructors appropriately.\n</P>\n<CODE>SizedBox.shrink(...)</CODE>\n<CODE>SizedBox.expand(...)</CODE>\n<P>\n  Either the \n  <CODE>SizedBox.shrink(...)</CODE>\n   or \n  <CODE>SizedBox.expand(...)</CODE>\n   constructor should be used instead of the more general \n  <CODE>SizedBox(...)</CODE>\n   constructor when one of the named constructors capture the intent of the code more succinctly.\n</P>\n<CODE>SizedBox.shrink(...)</CODE>\n<CODE>SizedBox.expand(...)</CODE>\n<CODE>SizedBox(...)</CODE>\n<P>\n  <STRONG>Examples</STRONG>\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> buildLogo</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#0468D7\"> SizedBox</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    height: </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    width: </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    child: </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyLogo</SPAN>\n    <SPAN style=\"color:#222222\">(),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> buildLogo</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#0468D7\"> SizedBox</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    height: </SPAN>\n    <SPAN style=\"color:#0468D7\">double</SPAN>\n    <SPAN style=\"color:#222222\">.infinity,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    width: </SPAN>\n    <SPAN style=\"color:#0468D7\">double</SPAN>\n    <SPAN style=\"color:#222222\">.infinity,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    child: </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyLogo</SPAN>\n    <SPAN style=\"color:#222222\">(),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> buildLogo</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#0468D7\"> SizedBox</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">shrink</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    child: </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyLogo</SPAN>\n    <SPAN style=\"color:#222222\">(),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> buildLogo</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#0468D7\"> SizedBox</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">expand</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    child: </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyLogo</SPAN>\n    <SPAN style=\"color:#222222\">(),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "slash_for_doc_comments",
        "name": "Slash for doc comments",
        "severity": "INFO",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/documentation#do-use--doc-comments-to-document-members-and-types\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>DO</STRONG>\n   use \n  <CODE>///</CODE>\n   for documentation comments.\n</P>\n<CODE>///</CODE>\n<P>\n  Although Dart supports two syntaxes of doc comments (\n  <CODE>///</CODE>\n   and \n  <CODE>/**</CODE>\n  ), we prefer using \n  <CODE>///</CODE>\n   for doc comments.\n</P>\n<CODE>///</CODE>\n<CODE>/**</CODE>\n<CODE>///</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// Parses a set of option strings. For each option:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">///</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// * If it is </SPAN>\n    <SPAN style=\"color:#222222\">`null`</SPAN>\n    <SPAN style=\"color:#6E6E70\">, then it is ignored.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// * If it is a string, then </SPAN>\n    <SPAN style=\"color:#222222\">[validate]</SPAN>\n    <SPAN style=\"color:#6E6E70\"> is called on it.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// * If it is any other type, it is *not* validated.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> parse</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\"> options) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  // ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>Within a doc comment, you can use markdown for formatting.</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "sort_child_properties_last",
        "name": "Sort child properties last",
        "severity": "MAJOR",
        "description": "<SECTION><P>Sort child properties last in widget instance creations. This improves readability and plays nicest with UI as Code visualization in IDEs with UI as Code Guides in editors (such as IntelliJ) where Properties in the correct order appear clearly associated with the constructor call and separated from the children.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#0468D7\"> Scaffold</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  appBar: </SPAN>\n    <SPAN style=\"color:#0468D7\">AppBar</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    title: </SPAN>\n    <SPAN style=\"color:#0468D7\">Text</SPAN>\n    <SPAN style=\"color:#222222\">(widget.title),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  body: </SPAN>\n    <SPAN style=\"color:#0468D7\">Center</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    child: </SPAN>\n    <SPAN style=\"color:#0468D7\">Column</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      children: &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">        Text</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">          'You have pushed the button this many times:'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">         ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">        Text</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">          '</SPAN>\n    <SPAN style=\"color:#11796D\">$</SPAN>\n    <SPAN style=\"color:#222222\">_counter</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">          style: </SPAN>\n    <SPAN style=\"color:#0468D7\">Theme</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">of</SPAN>\n    <SPAN style=\"color:#222222\">(context).textTheme.display1,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">         ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      ],</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      mainAxisAlignment: </SPAN>\n    <SPAN style=\"color:#0468D7\">MainAxisAlignment</SPAN>\n    <SPAN style=\"color:#222222\">.center,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    widthFactor: </SPAN>\n    <SPAN style=\"color:#11796D\">0.5</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  floatingActionButton: </SPAN>\n    <SPAN style=\"color:#0468D7\">FloatingActionButton</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    child: </SPAN>\n    <SPAN style=\"color:#0468D7\">Icon</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Icons</SPAN>\n    <SPAN style=\"color:#222222\">.add),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    onPressed: _incrementCounter,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    tooltip: </SPAN>\n    <SPAN style=\"color:#11796D\">'Increment'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#0468D7\"> Scaffold</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  appBar: </SPAN>\n    <SPAN style=\"color:#0468D7\">AppBar</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    title: </SPAN>\n    <SPAN style=\"color:#0468D7\">Text</SPAN>\n    <SPAN style=\"color:#222222\">(widget.title),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  body: </SPAN>\n    <SPAN style=\"color:#0468D7\">Center</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    widthFactor: </SPAN>\n    <SPAN style=\"color:#11796D\">0.5</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    child: </SPAN>\n    <SPAN style=\"color:#0468D7\">Column</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      mainAxisAlignment: </SPAN>\n    <SPAN style=\"color:#0468D7\">MainAxisAlignment</SPAN>\n    <SPAN style=\"color:#222222\">.center,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      children: &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">        Text</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">          'You have pushed the button this many times:'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">         ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">        Text</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">          '</SPAN>\n    <SPAN style=\"color:#11796D\">$</SPAN>\n    <SPAN style=\"color:#222222\">_counter</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">          style: </SPAN>\n    <SPAN style=\"color:#0468D7\">Theme</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">of</SPAN>\n    <SPAN style=\"color:#222222\">(context).textTheme.display1,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">         ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      ],</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  floatingActionButton: </SPAN>\n    <SPAN style=\"color:#0468D7\">FloatingActionButton</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    onPressed: _incrementCounter,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    tooltip: </SPAN>\n    <SPAN style=\"color:#11796D\">'Increment'</SPAN>\n    <SPAN style=\"color:#222222\">,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    child: </SPAN>\n    <SPAN style=\"color:#0468D7\">Icon</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Icons</SPAN>\n    <SPAN style=\"color:#222222\">.add),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  Exception: It's allowed to have parameter with a function expression after the \n  <CODE>child</CODE>\n   property.\n</P>\n<CODE>child</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "sort_constructors_first",
        "name": "Sort constructors first",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   sort constructor declarations before other members.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Visitor</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  double</SPAN>\n    <SPAN style=\"color:#222222\"> value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  visitSomething</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Something</SPAN>\n    <SPAN style=\"color:#222222\"> s);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Visitor</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Animation</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt; {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Animation</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.value);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  double</SPAN>\n    <SPAN style=\"color:#222222\"> value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> addListener</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">VoidCallback</SPAN>\n    <SPAN style=\"color:#222222\"> listener);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "sort_pub_dependencies",
        "name": "Sort pub dependencies",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   sort pub dependencies alphabetically (A to Z) in \n  <CODE>pubspec.yaml</CODE>\n  .\n</P>\n<CODE>pubspec.yaml</CODE>\n<P>Sorting list of pub dependencies makes maintenance easier.</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "sort_unnamed_constructors_first",
        "name": "Sort unnamed constructors first",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   sort unnamed constructor declarations first, before named ones.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> _PriorityItem</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  factory</SPAN>\n    <SPAN style=\"color:#0468D7\"> _PriorityItem</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">forName</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\"> isStatic, </SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> name, </SPAN>\n    <SPAN style=\"color:#0468D7\">_MemberKind</SPAN>\n    <SPAN style=\"color:#222222\"> kind) =&gt; ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  _PriorityItem</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.isStatic, </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.kind, </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.isPrivate);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> CancelableFuture</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#D43324\">implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt;  {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  factory</SPAN>\n    <SPAN style=\"color:#0468D7\"> CancelableFuture</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#6200EE\">computation</SPAN>\n    <SPAN style=\"color:#222222\">()) =&gt; ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  factory</SPAN>\n    <SPAN style=\"color:#0468D7\"> CancelableFuture</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">delayed</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Duration</SPAN>\n    <SPAN style=\"color:#222222\"> duration, [</SPAN>\n    <SPAN style=\"color:#6200EE\">computation</SPAN>\n    <SPAN style=\"color:#222222\">()]) =&gt; ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "super_goes_last",
        "name": "Super goes last",
        "severity": "MAJOR",
        "description": "<SECTION><P>NOTE: This rule is removed in Dart 3.0.0; it is no longer functional.</P>\n<P>\n  <STRONG>DO</STRONG>\n   place the \n  <CODE>super</CODE>\n   call last in a constructor initialization list.\n</P>\n<CODE>super</CODE>\n<P>\n  Field initializers are evaluated in the order that they appear in the constructor initialization list. If you place a \n  <CODE>super()</CODE>\n   call in the middle of an initializer list, the superclass's initializers will be evaluated right then before evaluating the rest of the subclass's initializers.\n</P>\n<CODE>super()</CODE>\n<P>\n  What it doesn't mean is that the superclass's constructor body will be executed then. That always happens after all initializers are run regardless of where \n  <CODE>super</CODE>\n   appears. It's vanishingly rare that the order of initializers matters, so the placement of \n  <CODE>super</CODE>\n   in the list almost never matters either.\n</P>\n<CODE>super</CODE>\n<CODE>super</CODE>\n<P>Getting in the habit of placing it last improves consistency, visually reinforces when the superclass's constructor body is run, and may help performance.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">View</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Style</SPAN>\n    <SPAN style=\"color:#222222\"> style, </SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\"> children)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    : </SPAN>\n    <SPAN style=\"color:#D43324\">super</SPAN>\n    <SPAN style=\"color:#222222\">(style),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      _children = children {</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">View</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Style</SPAN>\n    <SPAN style=\"color:#222222\"> style, </SPAN>\n    <SPAN style=\"color:#0468D7\">List</SPAN>\n    <SPAN style=\"color:#222222\"> children)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    : _children = children,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      super</SPAN>\n    <SPAN style=\"color:#222222\">(style) {</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": false
    },
    {
        "key": "test_types_in_equals",
        "name": "Test types in equals",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   test type of argument in \n  <CODE>operator ==(Object other)</CODE>\n  .\n</P>\n<CODE>operator ==(Object other)</CODE>\n<P>Not testing the type might result in runtime type errors which will be unexpected for consumers of your class.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Field</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Bad</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> Field</SPAN>\n    <SPAN style=\"color:#222222\"> someField;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Bad</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.someField);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#D43324\"> operator</SPAN>\n    <SPAN style=\"color:#222222\"> ==(</SPAN>\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#222222\"> other) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">    Bad</SPAN>\n    <SPAN style=\"color:#222222\"> otherBad = other </SPAN>\n    <SPAN style=\"color:#D43324\">as</SPAN>\n    <SPAN style=\"color:#0468D7\"> Bad</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">    bool</SPAN>\n    <SPAN style=\"color:#222222\"> areEqual = otherBad != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp; otherBad.someField == someField;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#222222\"> areEqual;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> hashCode {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#222222\"> someField.hashCode;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Field</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Good</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> Field</SPAN>\n    <SPAN style=\"color:#222222\"> someField;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Good</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.someField);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  bool</SPAN>\n    <SPAN style=\"color:#D43324\"> operator</SPAN>\n    <SPAN style=\"color:#222222\"> ==(</SPAN>\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#222222\"> other) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    if</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#6200EE\">identical</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">, other)) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      return</SPAN>\n    <SPAN style=\"color:#11796D\"> true</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#222222\"> other is </SPAN>\n    <SPAN style=\"color:#0468D7\">Good</SPAN>\n    <SPAN style=\"color:#222222\"> &amp;&amp;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">        this</SPAN>\n    <SPAN style=\"color:#222222\">.someField == other.someField;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#D43324\"> get</SPAN>\n    <SPAN style=\"color:#222222\"> hashCode {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#222222\"> someField.hashCode;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "throw_in_finally",
        "name": "Throw in finally",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   throwing exceptions in \n  <CODE>finally</CODE>\n   blocks.\n</P>\n<CODE>finally</CODE>\n<P>\n  Throwing exceptions in \n  <CODE>finally</CODE>\n   blocks will inevitably cause unexpected behavior that is hard to debug.\n</P>\n<CODE>finally</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> BadThrow</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  double</SPAN>\n    <SPAN style=\"color:#6200EE\"> nonCompliantMethod</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">      print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'hello world! </SPAN>\n    <SPAN style=\"color:#11796D\">${1 / 0}</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    } </SPAN>\n    <SPAN style=\"color:#D43324\">catch</SPAN>\n    <SPAN style=\"color:#222222\"> (e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">      print</SPAN>\n    <SPAN style=\"color:#222222\">(e);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    } </SPAN>\n    <SPAN style=\"color:#D43324\">finally</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">      throw</SPAN>\n    <SPAN style=\"color:#11796D\"> 'Find the hidden error :P'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Ok</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  double</SPAN>\n    <SPAN style=\"color:#6200EE\"> compliantMethod</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    var</SPAN>\n    <SPAN style=\"color:#222222\"> i = </SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      i = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\"> / </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    } </SPAN>\n    <SPAN style=\"color:#D43324\">catch</SPAN>\n    <SPAN style=\"color:#222222\"> (e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">      print</SPAN>\n    <SPAN style=\"color:#222222\">(e); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#222222\"> i;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "tighten_type_of_initializing_formals",
        "name": "Tighten type of initializing formals",
        "severity": "MAJOR",
        "description": "<SECTION><P>Tighten the type of an initializing formal if a non-null assert exists. This allows the type system to catch problems rather than have them only be caught at run-time.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">c1</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.p) : </SPAN>\n    <SPAN style=\"color:#D43324\">assert</SPAN>\n    <SPAN style=\"color:#222222\">(p != </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">c2</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.p);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> String</SPAN>\n    <SPAN style=\"color:#222222\">? p;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">c1</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#D43324\"> this</SPAN>\n    <SPAN style=\"color:#222222\">.p);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">c2</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.p);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> String</SPAN>\n    <SPAN style=\"color:#222222\">? p;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  String</SPAN>\n    <SPAN style=\"color:#222222\">? b;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  B</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.b);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> C</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  B</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#D43324\"> super</SPAN>\n    <SPAN style=\"color:#222222\">.b);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "type_annotate_public_apis",
        "name": "Type annotate public apis",
        "severity": "INFO",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/design#do-type-annotate-fields-and-top-level-variables-if-the-type-isnt-obvious\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>PREFER</STRONG>\n   type annotating public APIs.\n</P>\n<P>Type annotations are important documentation for how a library should be used. Annotating the parameter and return types of public methods and functions helps users understand what the API expects and what it provides.</P>\n<P>\n  Note that if a public API accepts a range of values that Dart's type system cannot express, then it is acceptable to leave that untyped. In that case, the implicit \n  <CODE>dynamic</CODE>\n   is the correct type for the API.\n</P>\n<CODE>dynamic</CODE>\n<P>\n  For code internal to a library (either private, or things like nested functions) annotate where you feel it helps, but don't feel that you \n  <EM>must</EM>\n   provide them.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">install</SPAN>\n    <SPAN style=\"color:#222222\">(id, destination) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  // ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  Here, it's unclear what \n  <CODE>id</CODE>\n   is. A string? And what is \n  <CODE>destination</CODE>\n  ? A string or a \n  <CODE>File</CODE>\n   object? Is this method synchronous or asynchronous?\n</P>\n<CODE>id</CODE>\n<CODE>destination</CODE>\n<CODE>File</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">install</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">PackageId</SPAN>\n    <SPAN style=\"color:#222222\"> id, </SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> destination) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">  // ...</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>With types, all of this is clarified.</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "type_init_formals",
        "name": "Type init formals",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/design#dont-type-annotate-initializing-formals\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>DON'T</STRONG>\n   type annotate initializing formals.\n</P>\n<P>\n  If a constructor parameter is using \n  <CODE>this.x</CODE>\n   to initialize a field, then the type of the parameter is understood to be the same type as the field. If a a constructor parameter is using \n  <CODE>super.x</CODE>\n   to forward to a super constructor, then the type of the parameter is understood to be the same as the super constructor parameter.\n</P>\n<CODE>this.x</CODE>\n<CODE>super.x</CODE>\n<P>Type annotating an initializing formal with a different type than that of the field is OK.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> x, y;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Point</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#D43324\"> this</SPAN>\n    <SPAN style=\"color:#222222\">.x, </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#D43324\"> this</SPAN>\n    <SPAN style=\"color:#222222\">.y);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Point</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> x, y;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Point</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.x, </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.y);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> a;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.a);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  B</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#D43324\"> super</SPAN>\n    <SPAN style=\"color:#222222\">.a);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> a;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.a);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  B</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">super</SPAN>\n    <SPAN style=\"color:#222222\">.a);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "type_literal_in_constant_pattern",
        "name": "Type literal in constant pattern",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  If you meant to test if the object has type \n  <CODE>Foo</CODE>\n  , instead write \n  <CODE>Foo _</CODE>\n  .\n</P>\n<CODE>Foo</CODE>\n<CODE>Foo _</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#222222\">? x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (x </SPAN>\n    <SPAN style=\"color:#D43324\">case</SPAN>\n    <SPAN style=\"color:#0468D7\"> num</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'int or double'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#222222\">? x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (x </SPAN>\n    <SPAN style=\"color:#D43324\">case</SPAN>\n    <SPAN style=\"color:#0468D7\"> num</SPAN>\n    <SPAN style=\"color:#222222\"> _) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'int or double'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  If you do mean to test that the matched value (which you expect to have the type \n  <CODE>Type</CODE>\n  ) is equal to the type literal \n  <CODE>Foo</CODE>\n  , then this lint can be silenced using \n  <CODE>const (Foo)</CODE>\n  .\n</P>\n<CODE>Type</CODE>\n<CODE>Foo</CODE>\n<CODE>const (Foo)</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#222222\">? x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (x </SPAN>\n    <SPAN style=\"color:#D43324\">case</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'int'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Object</SPAN>\n    <SPAN style=\"color:#222222\">? x) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (x </SPAN>\n    <SPAN style=\"color:#D43324\">case</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">)) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'int'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unawaited_futures",
        "name": "Unawaited futures",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   await functions that return a \n  <CODE>Future</CODE>\n   inside of an async function body.\n</P>\n<CODE>Future</CODE>\n<P>\n  It's easy to forget await in async methods as naming conventions usually don't tell us if a method is sync or async (except for some in \n  <CODE>dart:io</CODE>\n  ).\n</P>\n<CODE>dart:io</CODE>\n<P>\n  When you really \n  <EM>do</EM>\n   want to start a fire-and-forget \n  <CODE>Future</CODE>\n  , the recommended way is to use \n  <CODE>unawaited</CODE>\n   from \n  <CODE>dart:async</CODE>\n  . The \n  <CODE>// ignore</CODE>\n   and \n  <CODE>// ignore_for_file</CODE>\n   comments also work.\n</P>\n<CODE>Future</CODE>\n<CODE>unawaited</CODE>\n<CODE>dart:async</CODE>\n<CODE>// ignore</CODE>\n<CODE>// ignore_for_file</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> main</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  doSomething</SPAN>\n    <SPAN style=\"color:#222222\">(); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Likely a bug.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#6200EE\"> doSomething</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; ...;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> main</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  await</SPAN>\n    <SPAN style=\"color:#6200EE\"> doSomething</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  unawaited</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#6200EE\">doSomething</SPAN>\n    <SPAN style=\"color:#222222\">()); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Explicitly-ignored fire-and-forget.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "unintended_html_in_doc_comment",
        "name": "Unintended html in doc comment",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   reference only in-scope identifiers in doc comments.\n</P>\n<P>When a developer writes a reference with angle brackets within a doc comment, the angle brackets are interpreted as HTML. The text within pairs of opening and closing angle brackets generally get swallowed by the browser, and will not be displayed.</P>\n<P>\n  You can use a code block or code span to wrap the text containing angle brackets. You can also replace \n  <CODE>&lt;</CODE>\n   with \n  <CODE>&amp;lt;</CODE>\n   and \n  <CODE>&gt;</CODE>\n   with \n  <CODE>&amp;gt;</CODE>\n  .\n</P>\n<CODE>&lt;</CODE>\n<CODE>&amp;lt;</CODE>\n<CODE>&gt;</CODE>\n<CODE>&amp;gt;</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// Text List&lt;int&gt;.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// Text </SPAN>\n    <SPAN style=\"color:#222222\">[List&lt;int&gt;]</SPAN>\n    <SPAN style=\"color:#6E6E70\">.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// &lt;assignment&gt; -&gt; &lt;variable&gt; = &lt;expression&gt;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// Text </SPAN>\n    <SPAN style=\"color:#222222\">`List&lt;int&gt;`</SPAN>\n    <SPAN style=\"color:#6E6E70\">.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// </SPAN>\n    <SPAN style=\"color:#222222\">`&lt;assignment&gt; -&gt; &lt;variable&gt; = &lt;expression&gt;`</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// &lt;http://foo.bar.baz&gt;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_await_in_return",
        "name": "Unnecessary await in return",
        "severity": "MINOR",
        "description": "<SECTION><P>Avoid returning an awaited expression when the expression type is assignable to the function's return type.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; future;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">f1</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> =&gt; </SPAN>\n    <SPAN style=\"color:#D43324\">await</SPAN>\n    <SPAN style=\"color:#222222\"> future;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">f2</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#D43324\"> await</SPAN>\n    <SPAN style=\"color:#222222\"> future;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; future;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">f1</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; future;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Future</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">f2</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> future;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_brace_in_string_interps",
        "name": "Unnecessary brace in string interps",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   using braces in interpolation when not needed.\n</P>\n<P>\n  If you're just interpolating a simple identifier, and it's not immediately followed by more alphanumeric text, the \n  <CODE>{}</CODE>\n   can and should be omitted.\n</P>\n<CODE>{}</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">\"Hi, </SPAN>\n    <SPAN style=\"color:#11796D\">${</SPAN>\n    <SPAN style=\"color:#222222\">name</SPAN>\n    <SPAN style=\"color:#11796D\">}</SPAN>\n    <SPAN style=\"color:#11796D\">!\"</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">\"Hi, </SPAN>\n    <SPAN style=\"color:#11796D\">$</SPAN>\n    <SPAN style=\"color:#222222\">name</SPAN>\n    <SPAN style=\"color:#11796D\">!\"</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_breaks",
        "name": "Unnecessary breaks",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  Only use a \n  <CODE>break</CODE>\n   in a non-empty switch case statement if you need to break before the end of the case body. Dart does not support fallthrough execution for non-empty cases, so \n  <CODE>break</CODE>\n  s at the end of non-empty switch case statements are unnecessary.\n</P>\n<CODE>break</CODE>\n<CODE>break</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">switch</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 1</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">\"one\"</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 2</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">\"two\"</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">switch</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 1</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">\"one\"</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 2</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">\"two\"</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">switch</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 1</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 2</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">\"one or two\"</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">switch</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 1</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    break</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  case</SPAN>\n    <SPAN style=\"color:#11796D\"> 2</SPAN>\n    <SPAN style=\"color:#222222\">:</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">\"just two\"</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  NOTE: This lint only reports unnecessary breaks in libraries with a \n  <A href=\"https://dart.dev/guides/language/evolution#language-versioning\">language version</A>\n   of 3.0 or greater. Explicit breaks are still required in Dart 2.19 and below.\n</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_const",
        "name": "Unnecessary const",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   repeating \n  <CODE>const</CODE>\n   keyword in a \n  <CODE>const</CODE>\n   context.\n</P>\n<CODE>const</CODE>\n<CODE>const</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> { </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">(); }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">(){</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#222222\"> a = </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> b = </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> [</SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">()];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> { </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">(); }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">(){</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#222222\"> a = </SPAN>\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> b = </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#222222\"> [</SPAN>\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\">()];</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_constructor_name",
        "name": "Unnecessary constructor name",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   using the default unnamed Constructor over \n  <CODE>.new</CODE>\n  .\n</P>\n<CODE>.new</CODE>\n<P>\n  Given a class \n  <CODE>C</CODE>\n  , the named unnamed constructor \n  <CODE>C.new</CODE>\n   refers to the same constructor as the unnamed \n  <CODE>C</CODE>\n  . As such it adds nothing but visual noise to invocations and should be avoided (unless being used to identify a constructor tear-off).\n</P>\n<CODE>C</CODE>\n<CODE>C.new</CODE>\n<CODE>C</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#D43324\">new</SPAN>\n    <SPAN style=\"color:#222222\">(); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> a = </SPAN>\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#D43324\">new</SPAN>\n    <SPAN style=\"color:#222222\">(); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">ok</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> a = </SPAN>\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> aa = </SPAN>\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">ok</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> makeA = </SPAN>\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#D43324\">new</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_final",
        "name": "Unnecessary final",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  Use \n  <CODE>var</CODE>\n  , not \n  <CODE>final</CODE>\n  , when declaring local variables.\n</P>\n<CODE>var</CODE>\n<CODE>final</CODE>\n<P>\n  Per \n  <A href=\"https://dart.dev/effective-dart/usage#do-follow-a-consistent-rule-for-var-and-final-on-local-variables\">Effective Dart</A>\n  , there are two styles in wide use. This rule enforces the \n  <CODE>var</CODE>\n   style. For the alternative style that prefers \n  <CODE>final</CODE>\n  , enable \n  <CODE>prefer_final_locals</CODE>\n   and \n  <CODE>prefer_final_in_for_each</CODE>\n   instead.\n</P>\n<CODE>var</CODE>\n<CODE>final</CODE>\n<CODE>prefer_final_locals</CODE>\n<CODE>prefer_final_in_for_each</CODE>\n<P>\n  For fields, \n  <CODE>final</CODE>\n   is always recommended; see the rule \n  <CODE>prefer_final_fields</CODE>\n  .\n</P>\n<CODE>final</CODE>\n<CODE>prefer_final_fields</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> badMethod</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> label = </SPAN>\n    <SPAN style=\"color:#11796D\">'Final or var?'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#222222\"> char </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> [</SPAN>\n    <SPAN style=\"color:#11796D\">'v'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'r'</SPAN>\n    <SPAN style=\"color:#222222\">]) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(char);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> goodMethod</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> label = </SPAN>\n    <SPAN style=\"color:#11796D\">'Final or var?'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> char </SPAN>\n    <SPAN style=\"color:#D43324\">in</SPAN>\n    <SPAN style=\"color:#222222\"> [</SPAN>\n    <SPAN style=\"color:#11796D\">'v'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'r'</SPAN>\n    <SPAN style=\"color:#222222\">]) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    print</SPAN>\n    <SPAN style=\"color:#222222\">(char);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "unnecessary_getters_setters",
        "name": "Unnecessary getters setters",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/usage#dont-wrap-a-field-in-a-getter-and-setter-unnecessarily\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>AVOID</STRONG>\n   wrapping fields in getters and setters just to be \"safe\".\n</P>\n<P>In Java and C#, it's common to hide all fields behind getters and setters (or properties in C#), even if the implementation just forwards to the field. That way, if you ever need to do more work in those members, you can do it without needing to touch the callsites. This is because calling a getter method is different than accessing a field in Java, and accessing a property isn't binary-compatible with accessing a raw field in C#.</P>\n<P>Dart doesn't have this limitation. Fields and getters/setters are completely indistinguishable. You can expose a field in a class and later wrap it in a getter and setter without having to touch any code that uses that field.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Box</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> _contents;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  get</SPAN>\n    <SPAN style=\"color:#222222\"> contents =&gt; _contents;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  set</SPAN>\n    <SPAN style=\"color:#6200EE\"> contents</SPAN>\n    <SPAN style=\"color:#222222\">(value) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    _contents = value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Box</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> contents;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_lambdas",
        "name": "Unnecessary lambdas",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   create a lambda when a tear-off will do.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">names.</SPAN>\n    <SPAN style=\"color:#6200EE\">forEach</SPAN>\n    <SPAN style=\"color:#222222\">((name) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  print</SPAN>\n    <SPAN style=\"color:#222222\">(name);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">});</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">names.</SPAN>\n    <SPAN style=\"color:#6200EE\">forEach</SPAN>\n    <SPAN style=\"color:#222222\">(print);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "unnecessary_late",
        "name": "Unnecessary late",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   not specify the \n  <CODE>late</CODE>\n   modifier for top-level and static variables when the declaration contains an initializer.\n</P>\n<CODE>late</CODE>\n<P>\n  Top-level and static variables with initializers are already evaluated lazily as if they are marked \n  <CODE>late</CODE>\n  .\n</P>\n<CODE>late</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">late</SPAN>\n    <SPAN style=\"color:#0468D7\"> String</SPAN>\n    <SPAN style=\"color:#222222\"> badTopLevel = </SPAN>\n    <SPAN style=\"color:#11796D\">''</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> goodTopLevel = </SPAN>\n    <SPAN style=\"color:#11796D\">''</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> BadExample</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> late</SPAN>\n    <SPAN style=\"color:#0468D7\"> String</SPAN>\n    <SPAN style=\"color:#222222\"> badStatic = </SPAN>\n    <SPAN style=\"color:#11796D\">''</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> GoodExample</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  late</SPAN>\n    <SPAN style=\"color:#0468D7\"> String</SPAN>\n    <SPAN style=\"color:#222222\"> goodStatic;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_library_directive",
        "name": "Unnecessary library directive",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use library directives if you want to document a library and/or annotate a library.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// This library does important things</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">@TestOn</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'js'</SPAN>\n    <SPAN style=\"color:#222222\">)</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>NOTE: Due to limitations with this lint, libraries with parts will not be flagged for unnecessary library directives.</P>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_library_name",
        "name": "Unnecessary library name",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   have a library name in a \n  <CODE>library</CODE>\n   declaration.\n</P>\n<CODE>library</CODE>\n<P>Library names are not necessary.</P>\n<P>\n  A library does not need a library declaration, but one can be added to attach library documentation and library metadata to. A declaration of \n  <CODE>library;</CODE>\n   is sufficient for those uses.\n</P>\n<CODE>library;</CODE>\n<P>\n  The only \n  <EM>use</EM>\n   of a library name is for a \n  <CODE>part</CODE>\n   file to refer back to its owning library, but part files should prefer to use a string URI to refer back to the library file, not a library name.\n</P>\n<CODE>part</CODE>\n<P>\n  If a library name is added to a library declaration, it introduces the risk of name \n  <EM>conflicts</EM>\n  . It's a compile-time error if two libraries in the same program have the same library name. To avoid that, library names tend to be long, including the package name and path, just to avoid accidental name clashes. That makes such library names hard to read, and not even useful as documentation.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// This library has a long name.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\"> magnificator.src.helper.bananas;</SPAN>\n  </SPAN>\n</CODE>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\"> utils; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Not as verbose, but risks conflicts.</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">/// This library is awesome.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">library</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">part</SPAN>\n    <SPAN style=\"color:#11796D\"> \"apart.dart\"</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// contains: `part of \"good_library.dart\";`</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "unnecessary_new",
        "name": "Unnecessary new",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   new keyword to create instances.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> { </SPAN>\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\">(); }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">(){</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> a = </SPAN>\n    <SPAN style=\"color:#D43324\">new</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> { </SPAN>\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\">(); }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">(){</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> a = </SPAN>\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_null_aware_assignments",
        "name": "Unnecessary null aware assignments",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n  <CODE>null</CODE>\n   in \n  <CODE>null</CODE>\n  -aware assignment.\n</P>\n<CODE>null</CODE>\n<CODE>null</CODE>\n<P>\n  Using \n  <CODE>null</CODE>\n   on the right-hand side of a \n  <CODE>null</CODE>\n  -aware assignment effectively makes the assignment redundant.\n</P>\n<CODE>null</CODE>\n<CODE>null</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">x ??= </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> x;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">x ??= </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_null_aware_operator_on_extension_on_nullable",
        "name": "Unnecessary null aware operator on extension on nullable",
        "severity": "MINOR",
        "description": "<SECTION><P>Avoid null aware operators for members defined in an extension on a nullable type.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">extension</SPAN>\n    <SPAN style=\"color:#0468D7\"> E</SPAN>\n    <SPAN style=\"color:#D43324\"> on</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\">? {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#6200EE\"> m</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">? i) =&gt; i?.</SPAN>\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">extension</SPAN>\n    <SPAN style=\"color:#0468D7\"> E</SPAN>\n    <SPAN style=\"color:#D43324\"> on</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\">? {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#6200EE\"> m</SPAN>\n    <SPAN style=\"color:#222222\">() =&gt; </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">? i) =&gt; i.</SPAN>\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_null_checks",
        "name": "Unnecessary null checks",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   apply a \n  <CODE>null</CODE>\n   check where a nullable value is accepted.\n</P>\n<CODE>null</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">? i) {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\">? j;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  f</SPAN>\n    <SPAN style=\"color:#222222\">(j!);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">f</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">? i) {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\">? j;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  f</SPAN>\n    <SPAN style=\"color:#222222\">(j);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_null_in_if_null_operators",
        "name": "Unnecessary null in if null operators",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   using \n  <CODE>null</CODE>\n   as an operand in \n  <CODE>??</CODE>\n   operators.\n</P>\n<CODE>null</CODE>\n<CODE>??</CODE>\n<P>\n  Using \n  <CODE>null</CODE>\n   in an \n  <CODE>if null</CODE>\n   operator is redundant, regardless of which side \n  <CODE>null</CODE>\n   is used on.\n</P>\n<CODE>null</CODE>\n<CODE>if null</CODE>\n<CODE>null</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> x = a ?? </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> y = </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\"> ?? </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> x = a ?? </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_nullable_for_final_variable_declarations",
        "name": "Unnecessary nullable for final variable declarations",
        "severity": "MINOR",
        "description": "<SECTION><P>Use a non-nullable type for a final variable initialized with a non-nullable value.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\">? i = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> i = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_overrides",
        "name": "Unnecessary overrides",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   override a method to do a super method invocation with same parameters.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> foo</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    super</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">foo</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  @override</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> foo</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">    doSomethingElse</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>It's valid to override a member in the following cases:</P>\n<CODE>covariant</CODE>\n<CODE>@override</CODE>\n<CODE>@protected</CODE>\n<P>\n  <CODE>noSuchMethod</CODE>\n   is a special method and is not checked by this rule.\n</P>\n<CODE>noSuchMethod</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "unnecessary_parenthesis",
        "name": "Unnecessary parenthesis",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   using parentheses when not needed.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">a = (b);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">a = b;</SPAN>\n  </SPAN>\n</CODE>\n<P>Parentheses are considered unnecessary if they do not change the meaning of the code and they do not improve the readability of the code. The goal is not to force all developers to maintain the expression precedence table in their heads, which is why the second condition is included. Examples of this condition include:</P>\n<CODE>a.b = (c..d)</CODE>\n<CODE>!await foo</CODE>\n<CODE>!(await foo)</CODE>\n<CODE>(a &amp;&amp; b) || c &amp;&amp; d</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_raw_strings",
        "name": "Unnecessary raw strings",
        "severity": "MINOR",
        "description": "<SECTION><P>Use raw string only when needed.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> s1 = </SPAN>\n    <SPAN style=\"color:#11796D\">r'a'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> s1 = </SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> s2 = </SPAN>\n    <SPAN style=\"color:#11796D\">r'$a'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> s3 = </SPAN>\n    <SPAN style=\"color:#11796D\">r'\\a'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_statements",
        "name": "Unnecessary statements",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n   using unnecessary statements.\n</P>\n<P>Statements which have no clear effect are usually unnecessary, or should be broken up.</P>\n<P>For example,</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">myvar;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">list.clear;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\"> + </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">methodOne</SPAN>\n    <SPAN style=\"color:#222222\">() + </SPAN>\n    <SPAN style=\"color:#6200EE\">methodTwo</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">foo ? bar : baz;</SPAN>\n  </SPAN>\n</CODE>\n<P>Though the added methods have a clear effect, the addition itself does not unless there is some magical overload of the + operator.</P>\n<P>Usually code like this indicates an incomplete thought, and is a bug.</P>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">some.</SPAN>\n    <SPAN style=\"color:#6200EE\">method</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> SomeClass</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">methodOne</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">methodTwo</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">foo ? </SPAN>\n    <SPAN style=\"color:#6200EE\">bar</SPAN>\n    <SPAN style=\"color:#222222\">() : </SPAN>\n    <SPAN style=\"color:#6200EE\">baz</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#222222\"> myvar;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_string_escapes",
        "name": "Unnecessary string escapes",
        "severity": "MINOR",
        "description": "<SECTION><P>Remove unnecessary backslashes in strings.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">'this string contains 2 </SPAN>\n    <SPAN style=\"color:#222222\">\\\"</SPAN>\n    <SPAN style=\"color:#11796D\">double quotes</SPAN>\n    <SPAN style=\"color:#222222\">\\\"</SPAN>\n    <SPAN style=\"color:#11796D\"> '</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">\"this string contains 2 </SPAN>\n    <SPAN style=\"color:#222222\">\\'</SPAN>\n    <SPAN style=\"color:#11796D\">single quotes</SPAN>\n    <SPAN style=\"color:#222222\">\\'</SPAN>\n    <SPAN style=\"color:#11796D\"> \"</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">'this string contains 2 \"double quotes\" '</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#11796D\">\"this string contains 2 'single quotes' \"</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_string_interpolations",
        "name": "Unnecessary string interpolations",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   use string interpolation if there's only a string expression in it.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> message;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> o = </SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#11796D\">$</SPAN>\n    <SPAN style=\"color:#222222\">message</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> message;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> o = message;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_this",
        "name": "Unnecessary this",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/usage#dont-use-this-when-not-needed-to-avoid-shadowing\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>DON'T</STRONG>\n   use \n  <CODE>this</CODE>\n   when not needed to avoid shadowing.\n</P>\n<CODE>this</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Box</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> update</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> newValue) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    this</SPAN>\n    <SPAN style=\"color:#222222\">.value = newValue;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Box</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> update</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> newValue) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    value = newValue;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Box</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  int</SPAN>\n    <SPAN style=\"color:#222222\"> value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> update</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> value) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    this</SPAN>\n    <SPAN style=\"color:#222222\">.value = value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unnecessary_to_list_in_spreads",
        "name": "Unnecessary to list in spreads",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  Unnecessary \n  <CODE>toList()</CODE>\n   in spreads.\n</P>\n<CODE>toList()</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">children: &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...[</SPAN>\n    <SPAN style=\"color:#11796D\">'foo'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'bar'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'baz'</SPAN>\n    <SPAN style=\"color:#222222\">].</SPAN>\n    <SPAN style=\"color:#6200EE\">map</SPAN>\n    <SPAN style=\"color:#222222\">((</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> s) =&gt; </SPAN>\n    <SPAN style=\"color:#0468D7\">Text</SPAN>\n    <SPAN style=\"color:#222222\">(s)).</SPAN>\n    <SPAN style=\"color:#6200EE\">toList</SPAN>\n    <SPAN style=\"color:#222222\">(),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">]</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">children: &lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#222222\">&gt;[</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  ...[</SPAN>\n    <SPAN style=\"color:#11796D\">'foo'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'bar'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'baz'</SPAN>\n    <SPAN style=\"color:#222222\">].</SPAN>\n    <SPAN style=\"color:#6200EE\">map</SPAN>\n    <SPAN style=\"color:#222222\">((</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> s) =&gt; </SPAN>\n    <SPAN style=\"color:#0468D7\">Text</SPAN>\n    <SPAN style=\"color:#222222\">(s)),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">]</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unreachable_from_main",
        "name": "Unreachable from main",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  Any member declared in an executable library should be used directly inside that library. An executable library is a library that contains a \n  <CODE>main</CODE>\n   top-level function or that contains a top-level function annotated with \n  <CODE>@pragma('vm:entry-point')</CODE>\n  ). Executable libraries are not usually imported and it's better to avoid defining unused members.\n</P>\n<CODE>main</CODE>\n<CODE>@pragma('vm:entry-point')</CODE>\n<P>\n  This rule assumes that an executable library isn't imported by other libraries except to execute its \n  <CODE>main</CODE>\n   function.\n</P>\n<CODE>main</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">main</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  f</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> f</SPAN>\n    <SPAN style=\"color:#222222\">() {}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "unrelated_type_equality_checks",
        "name": "Unrelated type equality checks",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   Compare references of unrelated types for equality.\n</P>\n<P>\n  Comparing references of a type where neither is a subtype of the other most likely will return \n  <CODE>false</CODE>\n   and might not reflect programmer's intent.\n</P>\n<CODE>false</CODE>\n<P>\n  <CODE>Int64</CODE>\n   and \n  <CODE>Int32</CODE>\n   from \n  <CODE>package:fixnum</CODE>\n   allow comparing to \n  <CODE>int</CODE>\n   provided the \n  <CODE>int</CODE>\n   is on the right hand side. The lint allows this as a special case.\n</P>\n<CODE>Int64</CODE>\n<CODE>Int32</CODE>\n<CODE>package:fixnum</CODE>\n<CODE>int</CODE>\n<CODE>int</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> x = </SPAN>\n    <SPAN style=\"color:#11796D\">'1'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (x == </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction1</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  String</SPAN>\n    <SPAN style=\"color:#222222\"> x = </SPAN>\n    <SPAN style=\"color:#11796D\">'1'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (x == </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction1'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction13</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">DerivedClass2</SPAN>\n    <SPAN style=\"color:#222222\"> instance) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> other = </SPAN>\n    <SPAN style=\"color:#0468D7\">DerivedClass3</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (other == instance) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction13'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> DerivedClass1</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Mixin</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> DerivedClass2</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#D43324\"> with</SPAN>\n    <SPAN style=\"color:#0468D7\"> Mixin</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> DerivedClass3</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#D43324\"> implements</SPAN>\n    <SPAN style=\"color:#0468D7\"> Mixin</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction2</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> x = </SPAN>\n    <SPAN style=\"color:#11796D\">'1'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> y = </SPAN>\n    <SPAN style=\"color:#11796D\">'2'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (x == y) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(someFunction2); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction3</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> i = </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">; i &lt; </SPAN>\n    <SPAN style=\"color:#11796D\">10</SPAN>\n    <SPAN style=\"color:#222222\">; i++) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    if</SPAN>\n    <SPAN style=\"color:#222222\"> (i == </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(someFunction3); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction4</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> x = </SPAN>\n    <SPAN style=\"color:#11796D\">'1'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (x == </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(someFunction4); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction7</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  List</SPAN>\n    <SPAN style=\"color:#222222\"> someList;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (someList.length == </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction7'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction8</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">ClassBase</SPAN>\n    <SPAN style=\"color:#222222\"> instance) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  DerivedClass1</SPAN>\n    <SPAN style=\"color:#222222\"> other;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (other == instance) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction8'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction10</SPAN>\n    <SPAN style=\"color:#222222\">(unknown) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> what = unknown - </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> index = </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">; index &lt; unknown; index++) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    if</SPAN>\n    <SPAN style=\"color:#222222\"> (what == index) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction10'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> someFunction11</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">Mixin</SPAN>\n    <SPAN style=\"color:#222222\"> instance) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  var</SPAN>\n    <SPAN style=\"color:#222222\"> other = </SPAN>\n    <SPAN style=\"color:#0468D7\">DerivedClass2</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (other == instance) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'someFunction11'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (other != instance) </SPAN>\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'!someFunction11'</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// OK</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Mixin</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> DerivedClass2</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> ClassBase</SPAN>\n    <SPAN style=\"color:#D43324\"> with</SPAN>\n    <SPAN style=\"color:#0468D7\"> Mixin</SPAN>\n    <SPAN style=\"color:#222222\"> {}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "BUG",
        "debt": "1min",
        "active": true
    },
    {
        "key": "unsafe_html",
        "name": "Unsafe html",
        "severity": "CRITICAL",
        "description": "<SECTION><P>\n  <STRONG>AVOID</STRONG>\n</P>\n<CODE>href</CODE>\n<CODE>src</CODE>\n<CODE>srcdoc</CODE>\n<CODE>createFragment</CODE>\n<CODE>open</CODE>\n<CODE>setInnerHtml</CODE>\n<CODE>Element.html</CODE>\n<CODE>DocumentFragment.html</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> script = </SPAN>\n    <SPAN style=\"color:#0468D7\">ScriptElement</SPAN>\n    <SPAN style=\"color:#222222\">()..src = </SPAN>\n    <SPAN style=\"color:#11796D\">'foo.js'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "use_build_context_synchronously",
        "name": "Use build context synchronously",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   use \n  <CODE>BuildContext</CODE>\n   across asynchronous gaps.\n</P>\n<CODE>BuildContext</CODE>\n<P>\n  Storing \n  <CODE>BuildContext</CODE>\n   for later usage can easily lead to difficult to diagnose crashes. Asynchronous gaps are implicitly storing \n  <CODE>BuildContext</CODE>\n   and are some of the easiest to overlook when writing code.\n</P>\n<CODE>BuildContext</CODE>\n<CODE>BuildContext</CODE>\n<P>\n  When a \n  <CODE>BuildContext</CODE>\n   is used, a \n  <CODE>mounted</CODE>\n   property must be checked after an asynchronous gap, depending on how the \n  <CODE>BuildContext</CODE>\n   is accessed:\n</P>\n<CODE>BuildContext</CODE>\n<CODE>mounted</CODE>\n<CODE>BuildContext</CODE>\n<CODE>State</CODE>\n<CODE>context</CODE>\n<CODE>State</CODE>\n<CODE>mounted</CODE>\n<CODE>BuildContext</CODE>\n<CODE>BuildContext</CODE>\n<CODE>mounted</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> onButtonTapped</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">BuildContext</SPAN>\n    <SPAN style=\"color:#222222\"> context) </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  await</SPAN>\n    <SPAN style=\"color:#0468D7\"> Future</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">delayed</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Duration</SPAN>\n    <SPAN style=\"color:#222222\">(seconds: </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">));</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Navigator</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">of</SPAN>\n    <SPAN style=\"color:#222222\">(context).</SPAN>\n    <SPAN style=\"color:#6200EE\">pop</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> onButtonTapped</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">BuildContext</SPAN>\n    <SPAN style=\"color:#222222\"> context) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Navigator</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">of</SPAN>\n    <SPAN style=\"color:#222222\">(context).</SPAN>\n    <SPAN style=\"color:#6200EE\">pop</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> onButtonTapped</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">BuildContext</SPAN>\n    <SPAN style=\"color:#222222\"> context) </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  await</SPAN>\n    <SPAN style=\"color:#0468D7\"> Future</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">delayed</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Duration</SPAN>\n    <SPAN style=\"color:#222222\">(seconds: </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">));</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (!context.mounted) </SPAN>\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Navigator</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">of</SPAN>\n    <SPAN style=\"color:#222222\">(context).</SPAN>\n    <SPAN style=\"color:#6200EE\">pop</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">abstract</SPAN>\n    <SPAN style=\"color:#D43324\"> class</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyState</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> State</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">MyWidget</SPAN>\n    <SPAN style=\"color:#222222\">&gt; {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> foo</SPAN>\n    <SPAN style=\"color:#222222\">() </SPAN>\n    <SPAN style=\"color:#D43324\">async</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    await</SPAN>\n    <SPAN style=\"color:#0468D7\"> Future</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">delayed</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Duration</SPAN>\n    <SPAN style=\"color:#222222\">(seconds: </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">));</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    if</SPAN>\n    <SPAN style=\"color:#222222\"> (!mounted) </SPAN>\n    <SPAN style=\"color:#D43324\">return</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// Checks `this.mounted`, not `context.mounted`.</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">    Navigator</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">of</SPAN>\n    <SPAN style=\"color:#222222\">(context).</SPAN>\n    <SPAN style=\"color:#6200EE\">pop</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "use_colored_box",
        "name": "Use colored box",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use \n  <CODE>ColoredBox</CODE>\n   when \n  <CODE>Container</CODE>\n   has only a \n  <CODE>Color</CODE>\n  .\n</P>\n<CODE>ColoredBox</CODE>\n<CODE>Container</CODE>\n<CODE>Color</CODE>\n<P>\n  A \n  <CODE>Container</CODE>\n   is a heavier Widget than a \n  <CODE>ColoredBox</CODE>\n  , and as bonus, \n  <CODE>ColoredBox</CODE>\n   has a \n  <CODE>const</CODE>\n   constructor.\n</P>\n<CODE>Container</CODE>\n<CODE>ColoredBox</CODE>\n<CODE>ColoredBox</CODE>\n<CODE>const</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> buildArea</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#0468D7\"> Container</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    color: </SPAN>\n    <SPAN style=\"color:#0468D7\">Colors</SPAN>\n    <SPAN style=\"color:#222222\">.blue,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    child: </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Text</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'hello'</SPAN>\n    <SPAN style=\"color:#222222\">),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> buildArea</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#0468D7\"> ColoredBox</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    color: </SPAN>\n    <SPAN style=\"color:#0468D7\">Colors</SPAN>\n    <SPAN style=\"color:#222222\">.blue,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    child: </SPAN>\n    <SPAN style=\"color:#0468D7\">Text</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'hello'</SPAN>\n    <SPAN style=\"color:#222222\">),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "use_decorated_box",
        "name": "Use decorated box",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use \n  <CODE>DecoratedBox</CODE>\n   when \n  <CODE>Container</CODE>\n   has only a \n  <CODE>Decoration</CODE>\n  .\n</P>\n<CODE>DecoratedBox</CODE>\n<CODE>Container</CODE>\n<CODE>Decoration</CODE>\n<P>\n  A \n  <CODE>Container</CODE>\n   is a heavier Widget than a \n  <CODE>DecoratedBox</CODE>\n  , and as bonus, \n  <CODE>DecoratedBox</CODE>\n   has a \n  <CODE>const</CODE>\n   constructor.\n</P>\n<CODE>Container</CODE>\n<CODE>DecoratedBox</CODE>\n<CODE>DecoratedBox</CODE>\n<CODE>const</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> buildArea</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#0468D7\"> Container</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    decoration: </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> BoxDecoration</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      color: </SPAN>\n    <SPAN style=\"color:#0468D7\">Colors</SPAN>\n    <SPAN style=\"color:#222222\">.blue,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      borderRadius: </SPAN>\n    <SPAN style=\"color:#0468D7\">BorderRadius</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">all</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">        Radius</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">circular</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    child: </SPAN>\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Text</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'...'</SPAN>\n    <SPAN style=\"color:#222222\">),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Widget</SPAN>\n    <SPAN style=\"color:#6200EE\"> buildArea</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#0468D7\"> DecoratedBox</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    decoration: </SPAN>\n    <SPAN style=\"color:#0468D7\">BoxDecoration</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      color: </SPAN>\n    <SPAN style=\"color:#0468D7\">Colors</SPAN>\n    <SPAN style=\"color:#222222\">.blue,</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      borderRadius: </SPAN>\n    <SPAN style=\"color:#0468D7\">BorderRadius</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">all</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">        Radius</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">circular</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">5</SPAN>\n    <SPAN style=\"color:#222222\">),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">      ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    ),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    child: </SPAN>\n    <SPAN style=\"color:#0468D7\">Text</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'...'</SPAN>\n    <SPAN style=\"color:#222222\">),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  );</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "use_enums",
        "name": "Use enums",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  Classes that look like enumerations should be declared as \n  <CODE>enum</CODE>\n  s.\n</P>\n<CODE>enum</CODE>\n<P>\n  <STRONG>DO</STRONG>\n   use enums where appropriate.\n</P>\n<P>Candidates for enums are classes that:</P>\n<CODE>hashCode</CODE>\n<CODE>==</CODE>\n<CODE>values</CODE>\n<CODE>index</CODE>\n<CODE>Object</CODE>\n<P>\n  To learn more about creating and using these enums, check out \n  <A href=\"https://dart.dev/language/enums#declaring-enhanced-enums\">Declaring enhanced enums</A>\n  .\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> LogPriority</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> error = </SPAN>\n    <SPAN style=\"color:#0468D7\">LogPriority</SPAN>\n    <SPAN style=\"color:#222222\">._(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'Error'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> warning = </SPAN>\n    <SPAN style=\"color:#0468D7\">LogPriority</SPAN>\n    <SPAN style=\"color:#222222\">._(</SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'Warning'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  static</SPAN>\n    <SPAN style=\"color:#D43324\"> const</SPAN>\n    <SPAN style=\"color:#222222\"> log = </SPAN>\n    <SPAN style=\"color:#0468D7\">LogPriority</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">_unknown</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Log'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> String</SPAN>\n    <SPAN style=\"color:#222222\"> prefix;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> priority;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> LogPriority</SPAN>\n    <SPAN style=\"color:#222222\">._(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.priority, </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.prefix);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> LogPriority</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">_unknown</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> prefix) : </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">._(-</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, prefix);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">enum</SPAN>\n    <SPAN style=\"color:#0468D7\"> LogPriority</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  error</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'Error'</SPAN>\n    <SPAN style=\"color:#222222\">),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  warning</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#11796D\">'Warning'</SPAN>\n    <SPAN style=\"color:#222222\">),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  log.</SPAN>\n    <SPAN style=\"color:#6200EE\">unknown</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'Log'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> String</SPAN>\n    <SPAN style=\"color:#222222\"> prefix;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> priority;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> LogPriority</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.priority, </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">.prefix);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  const</SPAN>\n    <SPAN style=\"color:#0468D7\"> LogPriority</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">unknown</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#222222\"> prefix) : </SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">(-</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">, prefix);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "use_full_hex_values_for_flutter_colors",
        "name": "Use full hex values for flutter colors",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   an 8-digit hexadecimal integer (for example, 0xFFFFFFFF) to instantiate a Color. Colors have four 8-bit channels, which adds up to 32 bits, so Colors are described using a 32-bit integer.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Color</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Color</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">0x000001</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Color</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">0x00000001</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "use_function_type_syntax_for_parameters",
        "name": "Use function type syntax for parameters",
        "severity": "MINOR",
        "description": "<SECTION><P>Use generic function type syntax for parameters.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Iterable</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">where</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#6200EE\"> predicate</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\"> element)) {}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Iterable</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">where</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#0468D7\"> Function</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">) predicate) {}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "use_if_null_to_convert_nulls_to_bools",
        "name": "Use if null to convert nulls to bools",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/usage#prefer-using--to-convert-null-to-a-boolean-value\">Effective Dart</A>\n  :\n</P>\n<P>\n  Use \n  <CODE>??</CODE>\n   operators to convert \n  <CODE>null</CODE>\n  s to \n  <CODE>bool</CODE>\n  s.\n</P>\n<CODE>??</CODE>\n<CODE>null</CODE>\n<CODE>bool</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (nullableBool == </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (nullableBool != </SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (nullableBool ?? </SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">if</SPAN>\n    <SPAN style=\"color:#222222\"> (nullableBool ?? </SPAN>\n    <SPAN style=\"color:#11796D\">true</SPAN>\n    <SPAN style=\"color:#222222\">) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "use_is_even_rather_than_modulo",
        "name": "Use is even rather than modulo",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>PREFER</STRONG>\n   the use of intValue.isOdd/isEven to check for evenness.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\"> isEven = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\"> % </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\"> == </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\"> isOdd = </SPAN>\n    <SPAN style=\"color:#11796D\">13</SPAN>\n    <SPAN style=\"color:#222222\"> % </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\"> == </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\"> isEven = </SPAN>\n    <SPAN style=\"color:#11796D\">1.</SPAN>\n    <SPAN style=\"color:#222222\">isEven;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">bool</SPAN>\n    <SPAN style=\"color:#222222\"> isOdd = </SPAN>\n    <SPAN style=\"color:#11796D\">13.</SPAN>\n    <SPAN style=\"color:#222222\">isOdd;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "use_key_in_widget_constructors",
        "name": "Use key in widget constructors",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use key in widget constructors.\n</P>\n<P>It's a good practice to expose the ability to provide a key when creating public widgets.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyPublicWidget</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> StatelessWidget</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> MyPublicWidget</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> StatelessWidget</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  MyPublicWidget</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#D43324\">super</SPAN>\n    <SPAN style=\"color:#222222\">.key});</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "use_late_for_private_fields_and_variables",
        "name": "Use late for private fields and variables",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  Use \n  <CODE>late</CODE>\n   for private members with non-nullable types that are always expected to be non-null. Thus it's clear that the field is not expected to be \n  <CODE>null</CODE>\n   and it avoids null checks.\n</P>\n<CODE>late</CODE>\n<CODE>null</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">? _i;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  _i!.</SPAN>\n    <SPAN style=\"color:#6200EE\">abs</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">late</SPAN>\n    <SPAN style=\"color:#0468D7\"> int</SPAN>\n    <SPAN style=\"color:#222222\"> _i;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  _i.</SPAN>\n    <SPAN style=\"color:#6200EE\">abs</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>OK:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">? _i;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">m</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  _i?.</SPAN>\n    <SPAN style=\"color:#6200EE\">abs</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  _i = </SPAN>\n    <SPAN style=\"color:#11796D\">null</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "use_named_constants",
        "name": "Use named constants",
        "severity": "MINOR",
        "description": "<SECTION><P>Where possible, use already defined const values.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">const</SPAN>\n    <SPAN style=\"color:#0468D7\"> Duration</SPAN>\n    <SPAN style=\"color:#222222\">(seconds: </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">Duration</SPAN>\n    <SPAN style=\"color:#222222\">.zero;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "use_raw_strings",
        "name": "Use raw strings",
        "severity": "MINOR",
        "description": "<SECTION><P>A raw string can be used to avoid escaping only backslashes and dollars.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> s = </SPAN>\n    <SPAN style=\"color:#11796D\">'A string with only </SPAN>\n    <SPAN style=\"color:#222222\">\\\\</SPAN>\n    <SPAN style=\"color:#11796D\"> and </SPAN>\n    <SPAN style=\"color:#222222\">\\$</SPAN>\n    <SPAN style=\"color:#11796D\">'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> s = </SPAN>\n    <SPAN style=\"color:#11796D\">r'A string with only \\ and $'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "use_rethrow_when_possible",
        "name": "Use rethrow when possible",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/usage#do-use-rethrow-to-rethrow-a-caught-exception\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>DO</STRONG>\n   use rethrow to rethrow a caught exception.\n</P>\n<P>As Dart provides rethrow as a feature, it should be used to improve terseness and readability.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  somethingRisky</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">catch</SPAN>\n    <SPAN style=\"color:#222222\">(e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (!</SPAN>\n    <SPAN style=\"color:#6200EE\">canHandle</SPAN>\n    <SPAN style=\"color:#222222\">(e)) </SPAN>\n    <SPAN style=\"color:#D43324\">throw</SPAN>\n    <SPAN style=\"color:#222222\"> e;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  handle</SPAN>\n    <SPAN style=\"color:#222222\">(e);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  somethingRisky</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">catch</SPAN>\n    <SPAN style=\"color:#222222\">(e) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  if</SPAN>\n    <SPAN style=\"color:#222222\"> (!</SPAN>\n    <SPAN style=\"color:#6200EE\">canHandle</SPAN>\n    <SPAN style=\"color:#222222\">(e)) </SPAN>\n    <SPAN style=\"color:#D43324\">rethrow</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  handle</SPAN>\n    <SPAN style=\"color:#222222\">(e);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "use_setters_to_change_properties",
        "name": "Use setters to change properties",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use a setter for operations that conceptually change a property.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">rectangle.</SPAN>\n    <SPAN style=\"color:#6200EE\">setWidth</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">button.</SPAN>\n    <SPAN style=\"color:#6200EE\">setVisible</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">rectangle.width = </SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">button.visible = </SPAN>\n    <SPAN style=\"color:#11796D\">false</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "use_string_buffers",
        "name": "Use string buffers",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use string buffers to compose strings.\n</P>\n<P>In most cases, using a string buffer is preferred for composing strings due to its improved performance.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#6200EE\"> foo</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> buffer = </SPAN>\n    <SPAN style=\"color:#11796D\">''</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> i = </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">; i &lt; </SPAN>\n    <SPAN style=\"color:#11796D\">10</SPAN>\n    <SPAN style=\"color:#222222\">; i++) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    buffer += </SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> buffer;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">String</SPAN>\n    <SPAN style=\"color:#6200EE\"> foo</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  final</SPAN>\n    <SPAN style=\"color:#222222\"> buffer = </SPAN>\n    <SPAN style=\"color:#0468D7\">StringBuffer</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  for</SPAN>\n    <SPAN style=\"color:#222222\"> (</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\"> i = </SPAN>\n    <SPAN style=\"color:#11796D\">0</SPAN>\n    <SPAN style=\"color:#222222\">; i &lt; </SPAN>\n    <SPAN style=\"color:#11796D\">10</SPAN>\n    <SPAN style=\"color:#222222\">; i++) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">    buffer.</SPAN>\n    <SPAN style=\"color:#6200EE\">write</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'a'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  return</SPAN>\n    <SPAN style=\"color:#222222\"> buffer.</SPAN>\n    <SPAN style=\"color:#6200EE\">toString</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "use_string_in_part_of_directives",
        "name": "Use string in part of directives",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/usage#do-use-strings-in-part-of-directives\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>DO</STRONG>\n   use strings in \n  <CODE>part of</CODE>\n   directives.\n</P>\n<CODE>part of</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">part of</SPAN>\n    <SPAN style=\"color:#222222\"> my_library;</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">part of</SPAN>\n    <SPAN style=\"color:#11796D\"> '../../my_library.dart'</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "use_super_parameters",
        "name": "Use super parameters",
        "severity": "MINOR",
        "description": "<SECTION><P>\"Forwarding constructor\"s, that do nothing except forward parameters to their superclass constructors should take advantage of super-initializer parameters rather than repeating the names of parameters when passing them to the superclass constructors. This makes the code more concise and easier to read and maintain.</P>\n<P>\n  <STRONG>DO</STRONG>\n   use super-initializer parameters where possible.\n</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">? x, </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">? y});</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  B</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">? x, </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">? y}) : </SPAN>\n    <SPAN style=\"color:#D43324\">super</SPAN>\n    <SPAN style=\"color:#222222\">(x: x, y: y);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">? x, </SPAN>\n    <SPAN style=\"color:#0468D7\">int</SPAN>\n    <SPAN style=\"color:#222222\">? y});</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> B</SPAN>\n    <SPAN style=\"color:#D43324\"> extends</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  B</SPAN>\n    <SPAN style=\"color:#222222\">({</SPAN>\n    <SPAN style=\"color:#D43324\">super</SPAN>\n    <SPAN style=\"color:#222222\">.x, </SPAN>\n    <SPAN style=\"color:#D43324\">super</SPAN>\n    <SPAN style=\"color:#222222\">.y});</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "use_test_throws_matchers",
        "name": "Use test throws matchers",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  Use the \n  <CODE>throwsA</CODE>\n   matcher instead of try-catch with \n  <CODE>fail()</CODE>\n  .\n</P>\n<CODE>throwsA</CODE>\n<CODE>fail()</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// sync code</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  someSyncFunctionThatThrows</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  fail</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'expected Error'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">on</SPAN>\n    <SPAN style=\"color:#0468D7\"> Error</SPAN>\n    <SPAN style=\"color:#D43324\"> catch</SPAN>\n    <SPAN style=\"color:#222222\"> (error) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  expect</SPAN>\n    <SPAN style=\"color:#222222\">(error.message, </SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'some message'</SPAN>\n    <SPAN style=\"color:#222222\">));</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// async code</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">try</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  await</SPAN>\n    <SPAN style=\"color:#6200EE\"> someAsyncFunctionThatThrows</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  fail</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'expected Error'</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">} </SPAN>\n    <SPAN style=\"color:#D43324\">on</SPAN>\n    <SPAN style=\"color:#0468D7\"> Error</SPAN>\n    <SPAN style=\"color:#D43324\"> catch</SPAN>\n    <SPAN style=\"color:#222222\"> (error) {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  expect</SPAN>\n    <SPAN style=\"color:#222222\">(error.message, </SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'some message'</SPAN>\n    <SPAN style=\"color:#222222\">));</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// sync code</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">expect</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  () =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">someSyncFunctionThatThrows</SPAN>\n    <SPAN style=\"color:#222222\">(),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  throwsA</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#6200EE\">isA</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Error</SPAN>\n    <SPAN style=\"color:#222222\">&gt;().</SPAN>\n    <SPAN style=\"color:#6200EE\">having</SPAN>\n    <SPAN style=\"color:#222222\">((</SPAN>\n    <SPAN style=\"color:#0468D7\">Error</SPAN>\n    <SPAN style=\"color:#222222\"> error) =&gt; error.message, </SPAN>\n    <SPAN style=\"color:#11796D\">'message'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'some message'</SPAN>\n    <SPAN style=\"color:#222222\">))),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6E6E70\">// async code</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">await</SPAN>\n    <SPAN style=\"color:#6200EE\"> expectLater</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  () =&gt; </SPAN>\n    <SPAN style=\"color:#6200EE\">someAsyncFunctionThatThrows</SPAN>\n    <SPAN style=\"color:#222222\">(),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">  throwsA</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#6200EE\">isA</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">Error</SPAN>\n    <SPAN style=\"color:#222222\">&gt;().</SPAN>\n    <SPAN style=\"color:#6200EE\">having</SPAN>\n    <SPAN style=\"color:#222222\">((</SPAN>\n    <SPAN style=\"color:#0468D7\">Error</SPAN>\n    <SPAN style=\"color:#222222\"> error) =&gt; error.message, </SPAN>\n    <SPAN style=\"color:#11796D\">'message'</SPAN>\n    <SPAN style=\"color:#222222\">, </SPAN>\n    <SPAN style=\"color:#6200EE\">contains</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'some message'</SPAN>\n    <SPAN style=\"color:#222222\">))),</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "use_to_and_as_if_applicable",
        "name": "Use to and as if applicable",
        "severity": "MINOR",
        "description": "<SECTION><P>\n  From \n  <A href=\"https://dart.dev/effective-dart/design#prefer-naming-a-method-to___-if-it-copies-the-objects-state-to-a-new-object\">Effective Dart</A>\n  :\n</P>\n<P>\n  <STRONG>PREFER</STRONG>\n   naming a method \n  <CODE>to___()</CODE>\n   if it copies the object's state to a new object.\n</P>\n<CODE>to___()</CODE>\n<P>\n  <STRONG>PREFER</STRONG>\n   naming a method \n  <CODE>as___()</CODE>\n   if it returns a different representation backed by the original object.\n</P>\n<CODE>as___()</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Bar</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Foo</SPAN>\n    <SPAN style=\"color:#6200EE\"> myMethod</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#0468D7\"> Foo</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">from</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Bar</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Foo</SPAN>\n    <SPAN style=\"color:#6200EE\"> toFoo</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#0468D7\"> Foo</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">from</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> Bar</SPAN>\n    <SPAN style=\"color:#222222\"> {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  Foo</SPAN>\n    <SPAN style=\"color:#6200EE\"> asFoo</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">    return</SPAN>\n    <SPAN style=\"color:#0468D7\"> Foo</SPAN>\n    <SPAN style=\"color:#222222\">.</SPAN>\n    <SPAN style=\"color:#6200EE\">from</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#D43324\">this</SPAN>\n    <SPAN style=\"color:#222222\">);</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "1min",
        "active": true
    },
    {
        "key": "use_truncating_division",
        "name": "Use truncating division",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use truncating division, '~/', instead of regular division ('/') followed by 'toInt()'.\n</P>\n<P>Dart features a \"truncating division\" operator which is the same operation as division followed by truncation, but which is more concise and expressive, and may be more performant on some platforms, for certain inputs.</P>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> x = (</SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\"> / </SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">).</SPAN>\n    <SPAN style=\"color:#6200EE\">toInt</SPAN>\n    <SPAN style=\"color:#222222\">();</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">var</SPAN>\n    <SPAN style=\"color:#222222\"> x = </SPAN>\n    <SPAN style=\"color:#11796D\">2</SPAN>\n    <SPAN style=\"color:#222222\"> ~/ </SPAN>\n    <SPAN style=\"color:#11796D\">3</SPAN>\n    <SPAN style=\"color:#222222\">;</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "valid_regexps",
        "name": "Valid regexps",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DO</STRONG>\n   use valid regular expression syntax when creating regular expression instances.\n</P>\n<P>\n  Regular expressions created with invalid syntax will throw a \n  <CODE>FormatException</CODE>\n   at runtime so should be avoided.\n</P>\n<CODE>FormatException</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">RegExp</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">r'('</SPAN>\n    <SPAN style=\"color:#222222\">).</SPAN>\n    <SPAN style=\"color:#6200EE\">hasMatch</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'foo()'</SPAN>\n    <SPAN style=\"color:#222222\">));</SPAN>\n  </SPAN>\n</CODE>\n<P>\n  <STRONG>GOOD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#6200EE\">print</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">RegExp</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">r'\\('</SPAN>\n    <SPAN style=\"color:#222222\">).</SPAN>\n    <SPAN style=\"color:#6200EE\">hasMatch</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">'foo()'</SPAN>\n    <SPAN style=\"color:#222222\">));</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "void_checks",
        "name": "Void checks",
        "severity": "MAJOR",
        "description": "<SECTION><P>\n  <STRONG>DON'T</STRONG>\n   assign to \n  <CODE>void</CODE>\n  .\n</P>\n<CODE>void</CODE>\n<P>\n  <STRONG>BAD:</STRONG>\n</P>\n<CODE>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">class</SPAN>\n    <SPAN style=\"color:#0468D7\"> A</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\">&gt; {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  T</SPAN>\n    <SPAN style=\"color:#222222\"> value;</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">  void</SPAN>\n    <SPAN style=\"color:#6200EE\"> test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#0468D7\">T</SPAN>\n    <SPAN style=\"color:#222222\"> arg) { }</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n  <SPAN class=\"line\"/>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#6200EE\"> main</SPAN>\n    <SPAN style=\"color:#222222\">() {</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#0468D7\">  A</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\">&gt; a = </SPAN>\n    <SPAN style=\"color:#0468D7\">A</SPAN>\n    <SPAN style=\"color:#222222\">&lt;</SPAN>\n    <SPAN style=\"color:#D43324\">void</SPAN>\n    <SPAN style=\"color:#222222\">&gt;();</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  a.value = </SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">; </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">  a.</SPAN>\n    <SPAN style=\"color:#6200EE\">test</SPAN>\n    <SPAN style=\"color:#222222\">(</SPAN>\n    <SPAN style=\"color:#11796D\">1</SPAN>\n    <SPAN style=\"color:#222222\">); </SPAN>\n    <SPAN style=\"color:#6E6E70\">// LINT</SPAN>\n  </SPAN>\n  <SPAN class=\"line\">\n    <SPAN style=\"color:#222222\">}</SPAN>\n  </SPAN>\n</CODE>\n</SECTION>",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "abi_specific_integer_invalid",
        "name": "Abi specific integer invalid",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a class that extends AbiSpecificInteger doesn't meet all of the following requirements:\n @see https://dart.dev/tools/diagnostic-messages#abi_specific_integer_invalid",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "abstract_field_initializer",
        "name": "Abstract field initializer",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a field that has the abstract modifier also has an initializer.\n @see https://dart.dev/tools/diagnostic-messages#abstract_field_initializer",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "argument_must_be_native",
        "name": "Argument must be native",
        "severity": "MAJOR",
        "description": "The analyzer produces this diagnostic when the argument passed to Native.addressOf isn't annotated with the Native annotation.\n @see https://dart.dev/tools/diagnostic-messages#argument_must_be_native",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "argument_type_not_assignable_to_error_handler",
        "name": "Argument type not assignable to error handler",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an invocation of Future.catchError has an argument that is a function whose parameters aren't compatible with the arguments that will be passed to the function when it's invoked. The static type of the first argument to catchError is just Function, even though the function that is passed in is expected to have either a single parameter of type Object or two parameters of type Object and StackTrace.\n @see https://dart.dev/tools/diagnostic-messages#argument_type_not_assignable_to_error_handler",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "body_might_complete_normally",
        "name": "Body might complete normally",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a method or function has a return type that's potentially non-nullable but would implicitly return null if control reached the end of the function.\n @see https://dart.dev/tools/diagnostic-messages#body_might_complete_normally",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "conflicting_constructor_and_static_member",
        "name": "Conflicting constructor and static member",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a named constructor and either a static method or static field have the same name. Both are accessed using the name of the class, so having the same name makes the reference ambiguous.\n @see https://dart.dev/tools/diagnostic-messages#conflicting_constructor_and_static_member",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "const_map_key_not_primitive_equality",
        "name": "Const map key not primitive equality",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when the class of object used as a key in a constant map literal implements either the == operator, the getter hashCode, or both. The implementation of constant maps uses both the == operator and the hashCode getter, so any implementation other than the ones inherited from Object requires executing arbitrary code at compile time, which isn't supported.\n @see https://dart.dev/tools/diagnostic-messages#const_map_key_not_primitive_equality",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "dead_null_aware_expression",
        "name": "Dead null aware expression",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic in two cases.The first is when the left operand of an ?? operator can't be null. The right operand is only evaluated if the left operand has the value null, and because the left operand can't be null, the right operand is never evaluated.The second is when the left-hand side of an assignment using the ??= operator can't be null. The right-hand side is only evaluated if the left-hand side has the value null, and because the left-hand side can't be null, the right-hand side is never evaluated.\n @see https://dart.dev/tools/diagnostic-messages#dead_null_aware_expression",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "deprecated_new_in_comment_reference",
        "name": "Deprecated new in comment reference",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a comment reference (the name of a declaration enclosed in square brackets in a documentation comment) uses the keyword new to refer to a constructor. This form is deprecated.\n @see https://dart.dev/tools/diagnostic-messages#deprecated_new_in_comment_reference",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "duplicate_constructor",
        "name": "Duplicate constructor",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a class declares more than one unnamed constructor or when it declares more than one constructor with the same name.\n @see https://dart.dev/tools/diagnostic-messages#duplicate_constructor",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "duplicate_field_name",
        "name": "Duplicate field name",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when either a record literal or a record type annotation contains a field whose name is the same as a previously declared field in the same literal or type.\n @see https://dart.dev/tools/diagnostic-messages#duplicate_field_name",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "duplicate_ignore",
        "name": "Duplicate ignore",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a diagnostic name appears in an ignore comment, but the diagnostic is already being ignored, either because it's already included in the same ignore comment or because it appears in an ignore-in-file comment.\n @see https://dart.dev/tools/diagnostic-messages#duplicate_ignore",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "duplicate_pattern_field",
        "name": "Duplicate pattern field",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a record pattern matches the same field more than once, or when an object pattern matches the same getter more than once.\n @see https://dart.dev/tools/diagnostic-messages#duplicate_pattern_field",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "external_with_initializer",
        "name": "External with initializer",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a field or variable marked with the keyword external has an initializer, or when an external field is initialized in a constructor.\n @see https://dart.dev/tools/diagnostic-messages#external_with_initializer",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "field_initializer_redirecting_constructor",
        "name": "Field initializer redirecting constructor",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a redirecting constructor initializes a field in the object. This isn't allowed because the instance that has the field hasn't been created at the point at which it should be initialized.\n @see https://dart.dev/tools/diagnostic-messages#field_initializer_redirecting_constructor",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "illegal_concrete_enum_member",
        "name": "Illegal concrete enum member",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when either an enum declaration, a class that implements Enum, or a mixin with a superclass constraint of Enum, declares or inherits a concrete instance member named either index, hashCode, or ==.\n @see https://dart.dev/tools/diagnostic-messages#illegal_concrete_enum_member",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "illegal_enum_values",
        "name": "Illegal enum values",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when either a class that implements Enum or a mixin with a superclass constraint of Enum has an instance member named values.\n @see https://dart.dev/tools/diagnostic-messages#illegal_enum_values",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "implicit_super_initializer_missing_arguments",
        "name": "Implicit super initializer missing arguments",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a constructor implicitly invokes the unnamed constructor from the superclass, the unnamed constructor of the superclass has a required parameter, and there's no super parameter corresponding to the required parameter.\n @see https://dart.dev/tools/diagnostic-messages#implicit_super_initializer_missing_arguments",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "inconsistent_pattern_variable_logical_or",
        "name": "Inconsistent pattern variable logical or",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a pattern variable that is declared on all branches of a logical-or pattern doesn't have the same type on every branch. It is also produced when the variable has a different finality on different branches. A pattern variable declared on multiple branches of a logical-or pattern is required to have the same type and finality in each branch, so that the type and finality of the variable can be known in code that's guarded by the logical-or pattern.\n @see https://dart.dev/tools/diagnostic-messages#inconsistent_pattern_variable_logical_or",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invalid_annotation",
        "name": "Invalid annotation",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an annotation is found that is using something that is neither a variable marked as const or the invocation of a const constructor.Getters can't be used as annotations.\n @see https://dart.dev/tools/diagnostic-messages#invalid_annotation",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invalid_extension_argument_count",
        "name": "Invalid extension argument count",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an extension override doesn't have exactly one argument. The argument is the expression used to compute the value of this within the extension method, so there must be one argument.\n @see https://dart.dev/tools/diagnostic-messages#invalid_extension_argument_count",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invalid_field_name",
        "name": "Invalid field name",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when either a record literal or a record type annotation has a field whose name is invalid. The name is invalid if it is:\n @see https://dart.dev/tools/diagnostic-messages#invalid_field_name",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invalid_literal_annotation",
        "name": "Invalid literal annotation",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when the literal annotation is applied to anything other than a const constructor.\n @see https://dart.dev/tools/diagnostic-messages#invalid_literal_annotation",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invalid_non_virtual_annotation",
        "name": "Invalid non virtual annotation",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when the nonVirtual annotation is found on a declaration other than a member of a class, mixin, or enum, or if the member isn't a concrete instance member.\n @see https://dart.dev/tools/diagnostic-messages#invalid_non_virtual_annotation",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invalid_null_aware_operator",
        "name": "Invalid null aware operator",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a null-aware operator (?., ?.., ?[, ?..[, or ...?) is used on a receiver that's known to be non-nullable.\n @see https://dart.dev/tools/diagnostic-messages#invalid_null_aware_operator",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invalid_pattern_variable_in_shared_case_scope",
        "name": "Invalid pattern variable in shared case scope",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when multiple case clauses in a switch statement share a body, and at least one of them declares a variable that is referenced in the shared statements, but the variable is either not declared in all of the case clauses or it is declared in inconsistent ways.If the variable isn't declared in all of the case clauses, then it won't have a value if one of the clauses that doesn't declare the variable is the one that matches and executes the body. This includes the situation where one of the case clauses is the default clause.If the variable is declared in inconsistent ways, either being final in some cases and not final in others or having a different type in different cases, then the semantics of what the type or finality of the variable should be are not defined.\n @see https://dart.dev/tools/diagnostic-messages#invalid_pattern_variable_in_shared_case_scope",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invalid_return_type_for_catch_error",
        "name": "Invalid return type for catch error",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an invocation of Future.catchError has an argument whose return type isn't compatible with the type returned by the instance of Future. At runtime, the method catchError attempts to return the value from the callback as the result of the future, which results in another exception being thrown.\n @see https://dart.dev/tools/diagnostic-messages#invalid_return_type_for_catch_error",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invalid_super_formal_parameter_location",
        "name": "Invalid super formal parameter location",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a super parameter is used anywhere other than a non-redirecting generative constructor.\n @see https://dart.dev/tools/diagnostic-messages#invalid_super_formal_parameter_location",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invalid_type_argument_in_const_literal",
        "name": "Invalid type argument in const literal",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a type parameter is used as a type argument in a list, map, or set literal that is prefixed by const. This isn't allowed because the value of the type parameter (the actual type that will be used at runtime) can't be known at compile time.\n @see https://dart.dev/tools/diagnostic-messages#invalid_type_argument_in_const_literal",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invalid_visible_outside_template_annotation",
        "name": "Invalid visible outside template annotation",
        "severity": "MAJOR",
        "description": "The analyzer produces this diagnostic when the @visibleOutsideTemplate annotation is used incorrectly. This annotation is only meant to annotate members of a class, enum, or mixin that has the @visibleForTemplate annotation, to opt those members out of the visibility restrictions that @visibleForTemplate imposes.\n @see https://dart.dev/tools/diagnostic-messages#invalid_visible_outside_template_annotation",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "invocation_of_non_function_expression",
        "name": "Invocation of non function expression",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a function invocation is found, but the name being referenced isn't the name of a function, or when the expression computing the function doesn't compute a function.\n @see https://dart.dev/tools/diagnostic-messages#invocation_of_non_function_expression",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "missing_default_value_for_parameter",
        "name": "Missing default value for parameter",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an optional parameter, whether positional or named, has a potentially non-nullable type and doesn't specify a default value. Optional parameters that have no explicit default value have an implicit default value of null. If the type of the parameter doesn't allow the parameter to have a value of null, then the implicit default value isn't valid.\n @see https://dart.dev/tools/diagnostic-messages#missing_default_value_for_parameter",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "non_constant_map_element",
        "name": "Non constant map element",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an if element or a spread element in a constant map isn't a constant element.\n @see https://dart.dev/tools/diagnostic-messages#non_constant_map_element",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "not_assigned_potentially_non_nullable_local_variable",
        "name": "Not assigned potentially non nullable local variable",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a local variable is referenced and has all these characteristics:\n @see https://dart.dev/tools/diagnostic-messages#not_assigned_potentially_non_nullable_local_variable",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "not_initialized_non_nullable_instance_field",
        "name": "Not initialized non nullable instance field",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a field is declared and has all these characteristics:\n @see https://dart.dev/tools/diagnostic-messages#not_initialized_non_nullable_instance_field",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "not_initialized_non_nullable_variable",
        "name": "Not initialized non nullable variable",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a static field or top-level variable has a type that's non-nullable and doesn't have an initializer. Fields and variables that don't have an initializer are normally initialized to null, but the type of the field or variable doesn't allow it to be set to null, so an explicit initializer must be provided.\n @see https://dart.dev/tools/diagnostic-messages#not_initialized_non_nullable_variable",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "recursive_constructor_redirect",
        "name": "Recursive constructor redirect",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a constructor redirects to itself, either directly or indirectly, creating an infinite loop.\n @see https://dart.dev/tools/diagnostic-messages#recursive_constructor_redirect",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "redirect_to_invalid_function_type",
        "name": "Redirect to invalid function type",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a factory constructor attempts to redirect to another constructor, but the two have incompatible parameters. The parameters are compatible if all of the parameters of the redirecting constructor can be passed to the other constructor and if the other constructor doesn't require any parameters that aren't declared by the redirecting constructor.\n @see https://dart.dev/tools/diagnostic-messages#redirect_to_invalid_function_type",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "return_in_generator",
        "name": "Return in generator",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a generator function (one whose body is marked with either async* or sync*) uses either a return statement to return a value or implicitly returns a value because of using =>. In any of these cases, they should use yield instead of return.\n @see https://dart.dev/tools/diagnostic-messages#return_in_generator",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "subtype_of_disallowed_type",
        "name": "Subtype of disallowed type",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when one of the restricted classes is used in either an extends, implements, with, or on clause. The classes bool, double, FutureOr, int, Null, num, and String are all restricted in this way, to allow for more efficient implementations.\n @see https://dart.dev/tools/diagnostic-messages#subtype_of_disallowed_type",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "super_formal_parameter_without_associated_positional",
        "name": "Super formal parameter without associated positional",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when there's a positional super parameter in a constructor and the implicitly or explicitly invoked super constructor doesn't have a positional parameter at the corresponding index.Positional super parameters are associated with positional parameters in the super constructor by their index. That is, the first super parameter is associated with the first positional parameter in the super constructor, the second with the second, and so on.\n @see https://dart.dev/tools/diagnostic-messages#super_formal_parameter_without_associated_positional",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "type_check_with_null",
        "name": "Type check with null",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when there's a type check (using the as operator) where the type is Null. There's only one value whose type is Null, so the code is both more readable and more performant when it tests for null explicitly.\n @see https://dart.dev/tools/diagnostic-messages#type_check_with_null",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "type_parameter_supertype_of_its_bound",
        "name": "Type parameter supertype of its bound",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when the bound of a type parameter (the type following the extends keyword) is either directly or indirectly the type parameter itself. Stating that the type parameter must be the same as itself or a subtype of itself or a subtype of itself isn't helpful because it will always be the same as itself.\n @see https://dart.dev/tools/diagnostic-messages#type_parameter_supertype_of_its_bound",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "undefined_constructor_in_initializer",
        "name": "Undefined constructor in initializer",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a superclass constructor is invoked in the initializer list of a constructor, but the superclass doesn't define the constructor being invoked.\n @see https://dart.dev/tools/diagnostic-messages#undefined_constructor_in_initializer",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "undefined_enum_constructor",
        "name": "Undefined enum constructor",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when the constructor invoked to initialize an enum value doesn't exist.\n @see https://dart.dev/tools/diagnostic-messages#undefined_enum_constructor",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "undefined_extension_getter",
        "name": "Undefined extension getter",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an extension override is used to invoke a getter, but the getter isn't defined by the specified extension. The analyzer also produces this diagnostic when a static getter is referenced but isn't defined by the specified extension.\n @see https://dart.dev/tools/diagnostic-messages#undefined_extension_getter",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "undefined_extension_method",
        "name": "Undefined extension method",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an extension override is used to invoke a method, but the method isn't defined by the specified extension. The analyzer also produces this diagnostic when a static method is referenced but isn't defined by the specified extension.\n @see https://dart.dev/tools/diagnostic-messages#undefined_extension_method",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "undefined_extension_setter",
        "name": "Undefined extension setter",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an extension override is used to invoke a setter, but the setter isn't defined by the specified extension. The analyzer also produces this diagnostic when a static setter is referenced but isn't defined by the specified extension.\n @see https://dart.dev/tools/diagnostic-messages#undefined_extension_setter",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "undefined_super_member",
        "name": "Undefined super member",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when an inherited member (method, getter, setter, or operator) is referenced using super, but there's no member with that name in the superclass chain.\n @see https://dart.dev/tools/diagnostic-messages#undefined_super_member",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "unnecessary_null_comparison",
        "name": "Unnecessary null comparison",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when it finds an equality comparison (either == or !=) with one operand of null and the other operand can't be null. Such comparisons are always either true or false, so they serve no purpose.\n @see https://dart.dev/tools/diagnostic-messages#unnecessary_null_comparison",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "uri_does_not_exist",
        "name": "Uri does not exist",
        "severity": "BLOCKER",
        "description": "The analyzer produces this diagnostic when an import, export, or part directive is found where the URI refers to a file that doesn't exist.\n @see https://dart.dev/tools/diagnostic-messages#uri_does_not_exist",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "uri_does_not_exist_in_doc_import",
        "name": "Uri does not exist in doc import",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a doc-import is found where the URI refers to a file that doesn't exist.\n @see https://dart.dev/tools/diagnostic-messages#uri_does_not_exist_in_doc_import",
        "type": "CODE_SMELL",
        "debt": "5min",
        "active": true
    },
    {
        "key": "wrong_number_of_parameters_for_setter",
        "name": "Wrong number of parameters for setter",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a setter is found that doesn't declare exactly one required positional parameter.\n @see https://dart.dev/tools/diagnostic-messages#wrong_number_of_parameters_for_setter",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "wrong_number_of_type_arguments",
        "name": "Wrong number of type arguments",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a type that has type parameters is used and type arguments are provided, but the number of type arguments isn't the same as the number of type parameters.The analyzer also produces this diagnostic when a constructor is invoked and the number of type arguments doesn't match the number of type parameters declared for the class.\n @see https://dart.dev/tools/diagnostic-messages#wrong_number_of_type_arguments",
        "type": "BUG",
        "debt": "5min",
        "active": true
    },
    {
        "key": "yield_in_non_generator",
        "name": "Yield in non generator",
        "severity": "MINOR",
        "description": "The analyzer produces this diagnostic when a yield or yield* statement appears in a function whose body isn't marked with one of the async* or sync* modifiers.\n @see https://dart.dev/tools/diagnostic-messages#yield_in_non_generator",
        "type": "BUG",
        "debt": "5min",
        "active": true
    }
]